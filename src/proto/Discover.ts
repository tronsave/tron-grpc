/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: src/proto/Discover.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace protocol {
    export class Endpoint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: Uint8Array;
            port?: number;
            nodeId?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("nodeId" in data && data.nodeId != undefined) {
                    this.nodeId = data.nodeId;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get nodeId() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set nodeId(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            address?: Uint8Array;
            port?: number;
            nodeId?: Uint8Array;
        }): Endpoint {
            const message = new Endpoint({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.nodeId != null) {
                message.nodeId = data.nodeId;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: Uint8Array;
                port?: number;
                nodeId?: Uint8Array;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.nodeId != null) {
                data.nodeId = this.nodeId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeBytes(1, this.address);
            if (this.port != 0)
                writer.writeInt32(2, this.port);
            if (this.nodeId.length)
                writer.writeBytes(3, this.nodeId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Endpoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Endpoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readBytes();
                        break;
                    case 2:
                        message.port = reader.readInt32();
                        break;
                    case 3:
                        message.nodeId = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Endpoint {
            return Endpoint.deserialize(bytes);
        }
    }
    export class PingMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: Endpoint;
            to?: Endpoint;
            version?: number;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get from() {
            return pb_1.Message.getWrapperField(this, Endpoint, 1) as Endpoint;
        }
        set from(value: Endpoint) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_from() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get to() {
            return pb_1.Message.getWrapperField(this, Endpoint, 2) as Endpoint;
        }
        set to(value: Endpoint) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_to() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            from?: ReturnType<typeof Endpoint.prototype.toObject>;
            to?: ReturnType<typeof Endpoint.prototype.toObject>;
            version?: number;
            timestamp?: number;
        }): PingMessage {
            const message = new PingMessage({});
            if (data.from != null) {
                message.from = Endpoint.fromObject(data.from);
            }
            if (data.to != null) {
                message.to = Endpoint.fromObject(data.to);
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                from?: ReturnType<typeof Endpoint.prototype.toObject>;
                to?: ReturnType<typeof Endpoint.prototype.toObject>;
                version?: number;
                timestamp?: number;
            } = {};
            if (this.from != null) {
                data.from = this.from.toObject();
            }
            if (this.to != null) {
                data.to = this.to.toObject();
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_from)
                writer.writeMessage(1, this.from, () => this.from.serialize(writer));
            if (this.has_to)
                writer.writeMessage(2, this.to, () => this.to.serialize(writer));
            if (this.version != 0)
                writer.writeInt32(3, this.version);
            if (this.timestamp != 0)
                writer.writeInt64(4, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.from, () => message.from = Endpoint.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.to, () => message.to = Endpoint.deserialize(reader));
                        break;
                    case 3:
                        message.version = reader.readInt32();
                        break;
                    case 4:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingMessage {
            return PingMessage.deserialize(bytes);
        }
    }
    export class PongMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: Endpoint;
            echo?: number;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("echo" in data && data.echo != undefined) {
                    this.echo = data.echo;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get from() {
            return pb_1.Message.getWrapperField(this, Endpoint, 1) as Endpoint;
        }
        set from(value: Endpoint) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_from() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get echo() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set echo(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            from?: ReturnType<typeof Endpoint.prototype.toObject>;
            echo?: number;
            timestamp?: number;
        }): PongMessage {
            const message = new PongMessage({});
            if (data.from != null) {
                message.from = Endpoint.fromObject(data.from);
            }
            if (data.echo != null) {
                message.echo = data.echo;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                from?: ReturnType<typeof Endpoint.prototype.toObject>;
                echo?: number;
                timestamp?: number;
            } = {};
            if (this.from != null) {
                data.from = this.from.toObject();
            }
            if (this.echo != null) {
                data.echo = this.echo;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_from)
                writer.writeMessage(1, this.from, () => this.from.serialize(writer));
            if (this.echo != 0)
                writer.writeInt32(2, this.echo);
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PongMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PongMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.from, () => message.from = Endpoint.deserialize(reader));
                        break;
                    case 2:
                        message.echo = reader.readInt32();
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PongMessage {
            return PongMessage.deserialize(bytes);
        }
    }
    export class FindNeighbours extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: Endpoint;
            targetId?: Uint8Array;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("targetId" in data && data.targetId != undefined) {
                    this.targetId = data.targetId;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get from() {
            return pb_1.Message.getWrapperField(this, Endpoint, 1) as Endpoint;
        }
        set from(value: Endpoint) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_from() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get targetId() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set targetId(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            from?: ReturnType<typeof Endpoint.prototype.toObject>;
            targetId?: Uint8Array;
            timestamp?: number;
        }): FindNeighbours {
            const message = new FindNeighbours({});
            if (data.from != null) {
                message.from = Endpoint.fromObject(data.from);
            }
            if (data.targetId != null) {
                message.targetId = data.targetId;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                from?: ReturnType<typeof Endpoint.prototype.toObject>;
                targetId?: Uint8Array;
                timestamp?: number;
            } = {};
            if (this.from != null) {
                data.from = this.from.toObject();
            }
            if (this.targetId != null) {
                data.targetId = this.targetId;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_from)
                writer.writeMessage(1, this.from, () => this.from.serialize(writer));
            if (this.targetId.length)
                writer.writeBytes(2, this.targetId);
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindNeighbours {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindNeighbours();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.from, () => message.from = Endpoint.deserialize(reader));
                        break;
                    case 2:
                        message.targetId = reader.readBytes();
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindNeighbours {
            return FindNeighbours.deserialize(bytes);
        }
    }
    export class Neighbours extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: Endpoint;
            neighbours?: Endpoint[];
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("neighbours" in data && data.neighbours != undefined) {
                    this.neighbours = data.neighbours;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get from() {
            return pb_1.Message.getWrapperField(this, Endpoint, 1) as Endpoint;
        }
        set from(value: Endpoint) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_from() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get neighbours() {
            return pb_1.Message.getRepeatedWrapperField(this, Endpoint, 2) as Endpoint[];
        }
        set neighbours(value: Endpoint[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            from?: ReturnType<typeof Endpoint.prototype.toObject>;
            neighbours?: ReturnType<typeof Endpoint.prototype.toObject>[];
            timestamp?: number;
        }): Neighbours {
            const message = new Neighbours({});
            if (data.from != null) {
                message.from = Endpoint.fromObject(data.from);
            }
            if (data.neighbours != null) {
                message.neighbours = data.neighbours.map(item => Endpoint.fromObject(item));
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                from?: ReturnType<typeof Endpoint.prototype.toObject>;
                neighbours?: ReturnType<typeof Endpoint.prototype.toObject>[];
                timestamp?: number;
            } = {};
            if (this.from != null) {
                data.from = this.from.toObject();
            }
            if (this.neighbours != null) {
                data.neighbours = this.neighbours.map((item: Endpoint) => item.toObject());
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_from)
                writer.writeMessage(1, this.from, () => this.from.serialize(writer));
            if (this.neighbours.length)
                writer.writeRepeatedMessage(2, this.neighbours, (item: Endpoint) => item.serialize(writer));
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Neighbours {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Neighbours();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.from, () => message.from = Endpoint.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.neighbours, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Endpoint.deserialize(reader), Endpoint));
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Neighbours {
            return Neighbours.deserialize(bytes);
        }
    }
    export class BackupMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            flag?: boolean;
            priority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("flag" in data && data.flag != undefined) {
                    this.flag = data.flag;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
            }
        }
        get flag() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set flag(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            flag?: boolean;
            priority?: number;
        }): BackupMessage {
            const message = new BackupMessage({});
            if (data.flag != null) {
                message.flag = data.flag;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            return message;
        }
        toObject() {
            const data: {
                flag?: boolean;
                priority?: number;
            } = {};
            if (this.flag != null) {
                data.flag = this.flag;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.flag != false)
                writer.writeBool(1, this.flag);
            if (this.priority != 0)
                writer.writeInt32(2, this.priority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BackupMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BackupMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.flag = reader.readBool();
                        break;
                    case 2:
                        message.priority = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BackupMessage {
            return BackupMessage.deserialize(bytes);
        }
    }
}
