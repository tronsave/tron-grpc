/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: src/proto/API.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Tron";
import * as dependency_2 from "./contract/account_contract";
import * as dependency_3 from "./contract/asset_issue_contract";
import * as dependency_4 from "./contract/witness_contract";
import * as dependency_5 from "./contract/balance_contract";
import * as dependency_6 from "./contract/proposal_contract";
import * as dependency_7 from "./contract/storage_contract";
import * as dependency_8 from "./contract/exchange_contract";
import * as dependency_9 from "./contract/market_contract";
import * as dependency_10 from "./contract/smart_contract";
import * as dependency_11 from "./contract/shield_contract";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace protocol {
    export class Return extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: boolean;
            code?: Return.response_code;
            message?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set result(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, Return.response_code.SUCCESS) as Return.response_code;
        }
        set code(value: Return.response_code) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set message(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            result?: boolean;
            code?: Return.response_code;
            message?: Uint8Array;
        }): Return {
            const message = new Return({});
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: boolean;
                code?: Return.response_code;
                message?: Uint8Array;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result != false)
                writer.writeBool(1, this.result);
            if (this.code != Return.response_code.SUCCESS)
                writer.writeEnum(2, this.code);
            if (this.message.length)
                writer.writeBytes(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Return {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Return();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readBool();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        message.message = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Return {
            return Return.deserialize(bytes);
        }
    }
    export namespace Return {
        export enum response_code {
            SUCCESS = 0,
            SIGERROR = 1,
            CONTRACT_VALIDATE_ERROR = 2,
            CONTRACT_EXE_ERROR = 3,
            BANDWITH_ERROR = 4,
            DUP_TRANSACTION_ERROR = 5,
            TAPOS_ERROR = 6,
            TOO_BIG_TRANSACTION_ERROR = 7,
            TRANSACTION_EXPIRATION_ERROR = 8,
            SERVER_BUSY = 9,
            NO_CONNECTION = 10,
            NOT_ENOUGH_EFFECTIVE_CONNECTION = 11,
            BLOCK_UNSOLIDIFIED = 12,
            OTHER_ERROR = 20
        }
    }
    export class BlockReference extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_num?: number;
            block_hash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_num" in data && data.block_num != undefined) {
                    this.block_num = data.block_num;
                }
                if ("block_hash" in data && data.block_hash != undefined) {
                    this.block_hash = data.block_hash;
                }
            }
        }
        get block_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set block_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set block_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            block_num?: number;
            block_hash?: Uint8Array;
        }): BlockReference {
            const message = new BlockReference({});
            if (data.block_num != null) {
                message.block_num = data.block_num;
            }
            if (data.block_hash != null) {
                message.block_hash = data.block_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                block_num?: number;
                block_hash?: Uint8Array;
            } = {};
            if (this.block_num != null) {
                data.block_num = this.block_num;
            }
            if (this.block_hash != null) {
                data.block_hash = this.block_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_num != 0)
                writer.writeInt64(1, this.block_num);
            if (this.block_hash.length)
                writer.writeBytes(2, this.block_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockReference {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockReference();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_num = reader.readInt64();
                        break;
                    case 2:
                        message.block_hash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockReference {
            return BlockReference.deserialize(bytes);
        }
    }
    export class WitnessList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            witnesses?: dependency_1.protocol.Witness[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("witnesses" in data && data.witnesses != undefined) {
                    this.witnesses = data.witnesses;
                }
            }
        }
        get witnesses() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.protocol.Witness, 1) as dependency_1.protocol.Witness[];
        }
        set witnesses(value: dependency_1.protocol.Witness[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            witnesses?: ReturnType<typeof dependency_1.protocol.Witness.prototype.toObject>[];
        }): WitnessList {
            const message = new WitnessList({});
            if (data.witnesses != null) {
                message.witnesses = data.witnesses.map(item => dependency_1.protocol.Witness.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                witnesses?: ReturnType<typeof dependency_1.protocol.Witness.prototype.toObject>[];
            } = {};
            if (this.witnesses != null) {
                data.witnesses = this.witnesses.map((item: dependency_1.protocol.Witness) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.witnesses.length)
                writer.writeRepeatedMessage(1, this.witnesses, (item: dependency_1.protocol.Witness) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WitnessList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WitnessList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.witnesses, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.protocol.Witness.deserialize(reader), dependency_1.protocol.Witness));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WitnessList {
            return WitnessList.deserialize(bytes);
        }
    }
    export class ProposalList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposals?: dependency_1.protocol.Proposal[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposals" in data && data.proposals != undefined) {
                    this.proposals = data.proposals;
                }
            }
        }
        get proposals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.protocol.Proposal, 1) as dependency_1.protocol.Proposal[];
        }
        set proposals(value: dependency_1.protocol.Proposal[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            proposals?: ReturnType<typeof dependency_1.protocol.Proposal.prototype.toObject>[];
        }): ProposalList {
            const message = new ProposalList({});
            if (data.proposals != null) {
                message.proposals = data.proposals.map(item => dependency_1.protocol.Proposal.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                proposals?: ReturnType<typeof dependency_1.protocol.Proposal.prototype.toObject>[];
            } = {};
            if (this.proposals != null) {
                data.proposals = this.proposals.map((item: dependency_1.protocol.Proposal) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposals.length)
                writer.writeRepeatedMessage(1, this.proposals, (item: dependency_1.protocol.Proposal) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProposalList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProposalList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.proposals, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.protocol.Proposal.deserialize(reader), dependency_1.protocol.Proposal));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProposalList {
            return ProposalList.deserialize(bytes);
        }
    }
    export class ExchangeList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            exchanges?: dependency_1.protocol.Exchange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("exchanges" in data && data.exchanges != undefined) {
                    this.exchanges = data.exchanges;
                }
            }
        }
        get exchanges() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.protocol.Exchange, 1) as dependency_1.protocol.Exchange[];
        }
        set exchanges(value: dependency_1.protocol.Exchange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            exchanges?: ReturnType<typeof dependency_1.protocol.Exchange.prototype.toObject>[];
        }): ExchangeList {
            const message = new ExchangeList({});
            if (data.exchanges != null) {
                message.exchanges = data.exchanges.map(item => dependency_1.protocol.Exchange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                exchanges?: ReturnType<typeof dependency_1.protocol.Exchange.prototype.toObject>[];
            } = {};
            if (this.exchanges != null) {
                data.exchanges = this.exchanges.map((item: dependency_1.protocol.Exchange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.exchanges.length)
                writer.writeRepeatedMessage(1, this.exchanges, (item: dependency_1.protocol.Exchange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.exchanges, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.protocol.Exchange.deserialize(reader), dependency_1.protocol.Exchange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeList {
            return ExchangeList.deserialize(bytes);
        }
    }
    export class AssetIssueList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assetIssue?: dependency_3.protocol.AssetIssueContract[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assetIssue" in data && data.assetIssue != undefined) {
                    this.assetIssue = data.assetIssue;
                }
            }
        }
        get assetIssue() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.protocol.AssetIssueContract, 1) as dependency_3.protocol.AssetIssueContract[];
        }
        set assetIssue(value: dependency_3.protocol.AssetIssueContract[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            assetIssue?: ReturnType<typeof dependency_3.protocol.AssetIssueContract.prototype.toObject>[];
        }): AssetIssueList {
            const message = new AssetIssueList({});
            if (data.assetIssue != null) {
                message.assetIssue = data.assetIssue.map(item => dependency_3.protocol.AssetIssueContract.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                assetIssue?: ReturnType<typeof dependency_3.protocol.AssetIssueContract.prototype.toObject>[];
            } = {};
            if (this.assetIssue != null) {
                data.assetIssue = this.assetIssue.map((item: dependency_3.protocol.AssetIssueContract) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assetIssue.length)
                writer.writeRepeatedMessage(1, this.assetIssue, (item: dependency_3.protocol.AssetIssueContract) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssetIssueList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssetIssueList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.assetIssue, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.protocol.AssetIssueContract.deserialize(reader), dependency_3.protocol.AssetIssueContract));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssetIssueList {
            return AssetIssueList.deserialize(bytes);
        }
    }
    export class BlockList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: dependency_1.protocol.Block[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.protocol.Block, 1) as dependency_1.protocol.Block[];
        }
        set block(value: dependency_1.protocol.Block[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_1.protocol.Block.prototype.toObject>[];
        }): BlockList {
            const message = new BlockList({});
            if (data.block != null) {
                message.block = data.block.map(item => dependency_1.protocol.Block.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_1.protocol.Block.prototype.toObject>[];
            } = {};
            if (this.block != null) {
                data.block = this.block.map((item: dependency_1.protocol.Block) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block.length)
                writer.writeRepeatedMessage(1, this.block, (item: dependency_1.protocol.Block) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.protocol.Block.deserialize(reader), dependency_1.protocol.Block));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockList {
            return BlockList.deserialize(bytes);
        }
    }
    export class TransactionList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction?: dependency_1.protocol.Transaction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.protocol.Transaction, 1) as dependency_1.protocol.Transaction[];
        }
        set transaction(value: dependency_1.protocol.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof dependency_1.protocol.Transaction.prototype.toObject>[];
        }): TransactionList {
            const message = new TransactionList({});
            if (data.transaction != null) {
                message.transaction = data.transaction.map(item => dependency_1.protocol.Transaction.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof dependency_1.protocol.Transaction.prototype.toObject>[];
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.map((item: dependency_1.protocol.Transaction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transaction.length)
                writer.writeRepeatedMessage(1, this.transaction, (item: dependency_1.protocol.Transaction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.protocol.Transaction.deserialize(reader), dependency_1.protocol.Transaction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionList {
            return TransactionList.deserialize(bytes);
        }
    }
    export class TransactionIdList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txId?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txId" in data && data.txId != undefined) {
                    this.txId = data.txId;
                }
            }
        }
        get txId() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set txId(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            txId?: string[];
        }): TransactionIdList {
            const message = new TransactionIdList({});
            if (data.txId != null) {
                message.txId = data.txId;
            }
            return message;
        }
        toObject() {
            const data: {
                txId?: string[];
            } = {};
            if (this.txId != null) {
                data.txId = this.txId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txId.length)
                writer.writeRepeatedString(1, this.txId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionIdList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionIdList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionIdList {
            return TransactionIdList.deserialize(bytes);
        }
    }
    export class DelegatedResourceMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fromAddress?: Uint8Array;
            toAddress?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fromAddress" in data && data.fromAddress != undefined) {
                    this.fromAddress = data.fromAddress;
                }
                if ("toAddress" in data && data.toAddress != undefined) {
                    this.toAddress = data.toAddress;
                }
            }
        }
        get fromAddress() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set fromAddress(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get toAddress() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set toAddress(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            fromAddress?: Uint8Array;
            toAddress?: Uint8Array;
        }): DelegatedResourceMessage {
            const message = new DelegatedResourceMessage({});
            if (data.fromAddress != null) {
                message.fromAddress = data.fromAddress;
            }
            if (data.toAddress != null) {
                message.toAddress = data.toAddress;
            }
            return message;
        }
        toObject() {
            const data: {
                fromAddress?: Uint8Array;
                toAddress?: Uint8Array;
            } = {};
            if (this.fromAddress != null) {
                data.fromAddress = this.fromAddress;
            }
            if (this.toAddress != null) {
                data.toAddress = this.toAddress;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fromAddress.length)
                writer.writeBytes(1, this.fromAddress);
            if (this.toAddress.length)
                writer.writeBytes(2, this.toAddress);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelegatedResourceMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelegatedResourceMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fromAddress = reader.readBytes();
                        break;
                    case 2:
                        message.toAddress = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelegatedResourceMessage {
            return DelegatedResourceMessage.deserialize(bytes);
        }
    }
    export class DelegatedResourceList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegatedResource?: dependency_1.protocol.DelegatedResource[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegatedResource" in data && data.delegatedResource != undefined) {
                    this.delegatedResource = data.delegatedResource;
                }
            }
        }
        get delegatedResource() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.protocol.DelegatedResource, 1) as dependency_1.protocol.DelegatedResource[];
        }
        set delegatedResource(value: dependency_1.protocol.DelegatedResource[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            delegatedResource?: ReturnType<typeof dependency_1.protocol.DelegatedResource.prototype.toObject>[];
        }): DelegatedResourceList {
            const message = new DelegatedResourceList({});
            if (data.delegatedResource != null) {
                message.delegatedResource = data.delegatedResource.map(item => dependency_1.protocol.DelegatedResource.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                delegatedResource?: ReturnType<typeof dependency_1.protocol.DelegatedResource.prototype.toObject>[];
            } = {};
            if (this.delegatedResource != null) {
                data.delegatedResource = this.delegatedResource.map((item: dependency_1.protocol.DelegatedResource) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delegatedResource.length)
                writer.writeRepeatedMessage(1, this.delegatedResource, (item: dependency_1.protocol.DelegatedResource) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelegatedResourceList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelegatedResourceList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.delegatedResource, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.protocol.DelegatedResource.deserialize(reader), dependency_1.protocol.DelegatedResource));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelegatedResourceList {
            return DelegatedResourceList.deserialize(bytes);
        }
    }
    export class GetAvailableUnfreezeCountRequestMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
        }): GetAvailableUnfreezeCountRequestMessage {
            const message = new GetAvailableUnfreezeCountRequestMessage({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAvailableUnfreezeCountRequestMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAvailableUnfreezeCountRequestMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAvailableUnfreezeCountRequestMessage {
            return GetAvailableUnfreezeCountRequestMessage.deserialize(bytes);
        }
    }
    export class GetAvailableUnfreezeCountResponseMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            count?: number;
        }): GetAvailableUnfreezeCountResponseMessage {
            const message = new GetAvailableUnfreezeCountResponseMessage({});
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                count?: number;
            } = {};
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.count != 0)
                writer.writeInt64(1, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAvailableUnfreezeCountResponseMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAvailableUnfreezeCountResponseMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.count = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAvailableUnfreezeCountResponseMessage {
            return GetAvailableUnfreezeCountResponseMessage.deserialize(bytes);
        }
    }
    export class CanDelegatedMaxSizeRequestMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: number;
            owner_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set type(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: number;
            owner_address?: Uint8Array;
        }): CanDelegatedMaxSizeRequestMessage {
            const message = new CanDelegatedMaxSizeRequestMessage({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: number;
                owner_address?: Uint8Array;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != 0)
                writer.writeInt32(1, this.type);
            if (this.owner_address.length)
                writer.writeBytes(2, this.owner_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CanDelegatedMaxSizeRequestMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CanDelegatedMaxSizeRequestMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readInt32();
                        break;
                    case 2:
                        message.owner_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CanDelegatedMaxSizeRequestMessage {
            return CanDelegatedMaxSizeRequestMessage.deserialize(bytes);
        }
    }
    export class CanDelegatedMaxSizeResponseMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            max_size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("max_size" in data && data.max_size != undefined) {
                    this.max_size = data.max_size;
                }
            }
        }
        get max_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set max_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            max_size?: number;
        }): CanDelegatedMaxSizeResponseMessage {
            const message = new CanDelegatedMaxSizeResponseMessage({});
            if (data.max_size != null) {
                message.max_size = data.max_size;
            }
            return message;
        }
        toObject() {
            const data: {
                max_size?: number;
            } = {};
            if (this.max_size != null) {
                data.max_size = this.max_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.max_size != 0)
                writer.writeInt64(1, this.max_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CanDelegatedMaxSizeResponseMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CanDelegatedMaxSizeResponseMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.max_size = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CanDelegatedMaxSizeResponseMessage {
            return CanDelegatedMaxSizeResponseMessage.deserialize(bytes);
        }
    }
    export class CanWithdrawUnfreezeAmountRequestMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            timestamp?: number;
        }): CanWithdrawUnfreezeAmountRequestMessage {
            const message = new CanWithdrawUnfreezeAmountRequestMessage({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                timestamp?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.timestamp != 0)
                writer.writeInt64(2, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CanWithdrawUnfreezeAmountRequestMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CanWithdrawUnfreezeAmountRequestMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CanWithdrawUnfreezeAmountRequestMessage {
            return CanWithdrawUnfreezeAmountRequestMessage.deserialize(bytes);
        }
    }
    export class CanWithdrawUnfreezeAmountResponseMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            amount?: number;
        }): CanWithdrawUnfreezeAmountResponseMessage {
            const message = new CanWithdrawUnfreezeAmountResponseMessage({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: number;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount != 0)
                writer.writeInt64(1, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CanWithdrawUnfreezeAmountResponseMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CanWithdrawUnfreezeAmountResponseMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CanWithdrawUnfreezeAmountResponseMessage {
            return CanWithdrawUnfreezeAmountResponseMessage.deserialize(bytes);
        }
    }
    export class PricesResponseMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            prices?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("prices" in data && data.prices != undefined) {
                    this.prices = data.prices;
                }
            }
        }
        get prices() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set prices(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            prices?: string;
        }): PricesResponseMessage {
            const message = new PricesResponseMessage({});
            if (data.prices != null) {
                message.prices = data.prices;
            }
            return message;
        }
        toObject() {
            const data: {
                prices?: string;
            } = {};
            if (this.prices != null) {
                data.prices = this.prices;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.prices.length)
                writer.writeString(1, this.prices);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PricesResponseMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PricesResponseMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.prices = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PricesResponseMessage {
            return PricesResponseMessage.deserialize(bytes);
        }
    }
    export class NodeList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nodes?: Node[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nodes" in data && data.nodes != undefined) {
                    this.nodes = data.nodes;
                }
            }
        }
        get nodes() {
            return pb_1.Message.getRepeatedWrapperField(this, Node, 1) as Node[];
        }
        set nodes(value: Node[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            nodes?: ReturnType<typeof Node.prototype.toObject>[];
        }): NodeList {
            const message = new NodeList({});
            if (data.nodes != null) {
                message.nodes = data.nodes.map(item => Node.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                nodes?: ReturnType<typeof Node.prototype.toObject>[];
            } = {};
            if (this.nodes != null) {
                data.nodes = this.nodes.map((item: Node) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nodes.length)
                writer.writeRepeatedMessage(1, this.nodes, (item: Node) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NodeList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NodeList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.nodes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Node.deserialize(reader), Node));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NodeList {
            return NodeList.deserialize(bytes);
        }
    }
    export class Node extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: Address;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getWrapperField(this, Address, 1) as Address;
        }
        set address(value: Address) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_address() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            address?: ReturnType<typeof Address.prototype.toObject>;
        }): Node {
            const message = new Node({});
            if (data.address != null) {
                message.address = Address.fromObject(data.address);
            }
            return message;
        }
        toObject() {
            const data: {
                address?: ReturnType<typeof Address.prototype.toObject>;
            } = {};
            if (this.address != null) {
                data.address = this.address.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_address)
                writer.writeMessage(1, this.address, () => this.address.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Node {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Node();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.address, () => message.address = Address.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Node {
            return Node.deserialize(bytes);
        }
    }
    export class Address extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            host?: Uint8Array;
            port?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
            }
        }
        get host() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set host(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            host?: Uint8Array;
            port?: number;
        }): Address {
            const message = new Address({});
            if (data.host != null) {
                message.host = data.host;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            return message;
        }
        toObject() {
            const data: {
                host?: Uint8Array;
                port?: number;
            } = {};
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.host.length)
                writer.writeBytes(1, this.host);
            if (this.port != 0)
                writer.writeInt32(2, this.port);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Address {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Address();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.host = reader.readBytes();
                        break;
                    case 2:
                        message.port = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Address {
            return Address.deserialize(bytes);
        }
    }
    export class EmptyMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): EmptyMessage {
            const message = new EmptyMessage({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmptyMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmptyMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmptyMessage {
            return EmptyMessage.deserialize(bytes);
        }
    }
    export class NumberMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("num" in data && data.num != undefined) {
                    this.num = data.num;
                }
            }
        }
        get num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            num?: number;
        }): NumberMessage {
            const message = new NumberMessage({});
            if (data.num != null) {
                message.num = data.num;
            }
            return message;
        }
        toObject() {
            const data: {
                num?: number;
            } = {};
            if (this.num != null) {
                data.num = this.num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.num != 0)
                writer.writeInt64(1, this.num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NumberMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NumberMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.num = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NumberMessage {
            return NumberMessage.deserialize(bytes);
        }
    }
    export class BytesMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }): BytesMessage {
            const message = new BytesMessage({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BytesMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BytesMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BytesMessage {
            return BytesMessage.deserialize(bytes);
        }
    }
    export class TimeMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            beginInMilliseconds?: number;
            endInMilliseconds?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("beginInMilliseconds" in data && data.beginInMilliseconds != undefined) {
                    this.beginInMilliseconds = data.beginInMilliseconds;
                }
                if ("endInMilliseconds" in data && data.endInMilliseconds != undefined) {
                    this.endInMilliseconds = data.endInMilliseconds;
                }
            }
        }
        get beginInMilliseconds() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set beginInMilliseconds(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get endInMilliseconds() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set endInMilliseconds(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            beginInMilliseconds?: number;
            endInMilliseconds?: number;
        }): TimeMessage {
            const message = new TimeMessage({});
            if (data.beginInMilliseconds != null) {
                message.beginInMilliseconds = data.beginInMilliseconds;
            }
            if (data.endInMilliseconds != null) {
                message.endInMilliseconds = data.endInMilliseconds;
            }
            return message;
        }
        toObject() {
            const data: {
                beginInMilliseconds?: number;
                endInMilliseconds?: number;
            } = {};
            if (this.beginInMilliseconds != null) {
                data.beginInMilliseconds = this.beginInMilliseconds;
            }
            if (this.endInMilliseconds != null) {
                data.endInMilliseconds = this.endInMilliseconds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.beginInMilliseconds != 0)
                writer.writeInt64(1, this.beginInMilliseconds);
            if (this.endInMilliseconds != 0)
                writer.writeInt64(2, this.endInMilliseconds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimeMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimeMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.beginInMilliseconds = reader.readInt64();
                        break;
                    case 2:
                        message.endInMilliseconds = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimeMessage {
            return TimeMessage.deserialize(bytes);
        }
    }
    export class BlockReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id_or_num?: string;
            detail?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id_or_num" in data && data.id_or_num != undefined) {
                    this.id_or_num = data.id_or_num;
                }
                if ("detail" in data && data.detail != undefined) {
                    this.detail = data.detail;
                }
            }
        }
        get id_or_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id_or_num(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get detail() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set detail(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id_or_num?: string;
            detail?: boolean;
        }): BlockReq {
            const message = new BlockReq({});
            if (data.id_or_num != null) {
                message.id_or_num = data.id_or_num;
            }
            if (data.detail != null) {
                message.detail = data.detail;
            }
            return message;
        }
        toObject() {
            const data: {
                id_or_num?: string;
                detail?: boolean;
            } = {};
            if (this.id_or_num != null) {
                data.id_or_num = this.id_or_num;
            }
            if (this.detail != null) {
                data.detail = this.detail;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id_or_num.length)
                writer.writeString(1, this.id_or_num);
            if (this.detail != false)
                writer.writeBool(2, this.detail);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id_or_num = reader.readString();
                        break;
                    case 2:
                        message.detail = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockReq {
            return BlockReq.deserialize(bytes);
        }
    }
    export class BlockLimit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            startNum?: number;
            endNum?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("startNum" in data && data.startNum != undefined) {
                    this.startNum = data.startNum;
                }
                if ("endNum" in data && data.endNum != undefined) {
                    this.endNum = data.endNum;
                }
            }
        }
        get startNum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set startNum(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get endNum() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set endNum(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            startNum?: number;
            endNum?: number;
        }): BlockLimit {
            const message = new BlockLimit({});
            if (data.startNum != null) {
                message.startNum = data.startNum;
            }
            if (data.endNum != null) {
                message.endNum = data.endNum;
            }
            return message;
        }
        toObject() {
            const data: {
                startNum?: number;
                endNum?: number;
            } = {};
            if (this.startNum != null) {
                data.startNum = this.startNum;
            }
            if (this.endNum != null) {
                data.endNum = this.endNum;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.startNum != 0)
                writer.writeInt64(1, this.startNum);
            if (this.endNum != 0)
                writer.writeInt64(2, this.endNum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockLimit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockLimit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.startNum = reader.readInt64();
                        break;
                    case 2:
                        message.endNum = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockLimit {
            return BlockLimit.deserialize(bytes);
        }
    }
    export class TransactionLimit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transactionId?: Uint8Array;
            limitNum?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactionId" in data && data.transactionId != undefined) {
                    this.transactionId = data.transactionId;
                }
                if ("limitNum" in data && data.limitNum != undefined) {
                    this.limitNum = data.limitNum;
                }
            }
        }
        get transactionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set transactionId(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get limitNum() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limitNum(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            transactionId?: Uint8Array;
            limitNum?: number;
        }): TransactionLimit {
            const message = new TransactionLimit({});
            if (data.transactionId != null) {
                message.transactionId = data.transactionId;
            }
            if (data.limitNum != null) {
                message.limitNum = data.limitNum;
            }
            return message;
        }
        toObject() {
            const data: {
                transactionId?: Uint8Array;
                limitNum?: number;
            } = {};
            if (this.transactionId != null) {
                data.transactionId = this.transactionId;
            }
            if (this.limitNum != null) {
                data.limitNum = this.limitNum;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transactionId.length)
                writer.writeBytes(1, this.transactionId);
            if (this.limitNum != 0)
                writer.writeInt64(2, this.limitNum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionLimit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionLimit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.transactionId = reader.readBytes();
                        break;
                    case 2:
                        message.limitNum = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionLimit {
            return TransactionLimit.deserialize(bytes);
        }
    }
    export class AccountPaginated extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: dependency_1.protocol.Account;
            offset?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get account() {
            return pb_1.Message.getWrapperField(this, dependency_1.protocol.Account, 1) as dependency_1.protocol.Account;
        }
        set account(value: dependency_1.protocol.Account) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_account() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            account?: ReturnType<typeof dependency_1.protocol.Account.prototype.toObject>;
            offset?: number;
            limit?: number;
        }): AccountPaginated {
            const message = new AccountPaginated({});
            if (data.account != null) {
                message.account = dependency_1.protocol.Account.fromObject(data.account);
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: ReturnType<typeof dependency_1.protocol.Account.prototype.toObject>;
                offset?: number;
                limit?: number;
            } = {};
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_account)
                writer.writeMessage(1, this.account, () => this.account.serialize(writer));
            if (this.offset != 0)
                writer.writeInt64(2, this.offset);
            if (this.limit != 0)
                writer.writeInt64(3, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountPaginated {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountPaginated();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account, () => message.account = dependency_1.protocol.Account.deserialize(reader));
                        break;
                    case 2:
                        message.offset = reader.readInt64();
                        break;
                    case 3:
                        message.limit = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountPaginated {
            return AccountPaginated.deserialize(bytes);
        }
    }
    export class TimePaginatedMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timeMessage?: TimeMessage;
            offset?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timeMessage" in data && data.timeMessage != undefined) {
                    this.timeMessage = data.timeMessage;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get timeMessage() {
            return pb_1.Message.getWrapperField(this, TimeMessage, 1) as TimeMessage;
        }
        set timeMessage(value: TimeMessage) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_timeMessage() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            timeMessage?: ReturnType<typeof TimeMessage.prototype.toObject>;
            offset?: number;
            limit?: number;
        }): TimePaginatedMessage {
            const message = new TimePaginatedMessage({});
            if (data.timeMessage != null) {
                message.timeMessage = TimeMessage.fromObject(data.timeMessage);
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                timeMessage?: ReturnType<typeof TimeMessage.prototype.toObject>;
                offset?: number;
                limit?: number;
            } = {};
            if (this.timeMessage != null) {
                data.timeMessage = this.timeMessage.toObject();
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_timeMessage)
                writer.writeMessage(1, this.timeMessage, () => this.timeMessage.serialize(writer));
            if (this.offset != 0)
                writer.writeInt64(2, this.offset);
            if (this.limit != 0)
                writer.writeInt64(3, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimePaginatedMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimePaginatedMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timeMessage, () => message.timeMessage = TimeMessage.deserialize(reader));
                        break;
                    case 2:
                        message.offset = reader.readInt64();
                        break;
                    case 3:
                        message.limit = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimePaginatedMessage {
            return TimePaginatedMessage.deserialize(bytes);
        }
    }
    export class AccountNetMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            freeNetUsed?: number;
            freeNetLimit?: number;
            NetUsed?: number;
            NetLimit?: number;
            assetNetUsed?: Map<string, number>;
            assetNetLimit?: Map<string, number>;
            TotalNetLimit?: number;
            TotalNetWeight?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("freeNetUsed" in data && data.freeNetUsed != undefined) {
                    this.freeNetUsed = data.freeNetUsed;
                }
                if ("freeNetLimit" in data && data.freeNetLimit != undefined) {
                    this.freeNetLimit = data.freeNetLimit;
                }
                if ("NetUsed" in data && data.NetUsed != undefined) {
                    this.NetUsed = data.NetUsed;
                }
                if ("NetLimit" in data && data.NetLimit != undefined) {
                    this.NetLimit = data.NetLimit;
                }
                if ("assetNetUsed" in data && data.assetNetUsed != undefined) {
                    this.assetNetUsed = data.assetNetUsed;
                }
                if ("assetNetLimit" in data && data.assetNetLimit != undefined) {
                    this.assetNetLimit = data.assetNetLimit;
                }
                if ("TotalNetLimit" in data && data.TotalNetLimit != undefined) {
                    this.TotalNetLimit = data.TotalNetLimit;
                }
                if ("TotalNetWeight" in data && data.TotalNetWeight != undefined) {
                    this.TotalNetWeight = data.TotalNetWeight;
                }
            }
            if (!this.assetNetUsed)
                this.assetNetUsed = new Map();
            if (!this.assetNetLimit)
                this.assetNetLimit = new Map();
        }
        get freeNetUsed() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set freeNetUsed(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get freeNetLimit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set freeNetLimit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get NetUsed() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set NetUsed(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get NetLimit() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set NetLimit(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get assetNetUsed() {
            return pb_1.Message.getField(this, 5) as any as Map<string, number>;
        }
        set assetNetUsed(value: Map<string, number>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get assetNetLimit() {
            return pb_1.Message.getField(this, 6) as any as Map<string, number>;
        }
        set assetNetLimit(value: Map<string, number>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get TotalNetLimit() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set TotalNetLimit(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get TotalNetWeight() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set TotalNetWeight(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            freeNetUsed?: number;
            freeNetLimit?: number;
            NetUsed?: number;
            NetLimit?: number;
            assetNetUsed?: {
                [key: string]: number;
            };
            assetNetLimit?: {
                [key: string]: number;
            };
            TotalNetLimit?: number;
            TotalNetWeight?: number;
        }): AccountNetMessage {
            const message = new AccountNetMessage({});
            if (data.freeNetUsed != null) {
                message.freeNetUsed = data.freeNetUsed;
            }
            if (data.freeNetLimit != null) {
                message.freeNetLimit = data.freeNetLimit;
            }
            if (data.NetUsed != null) {
                message.NetUsed = data.NetUsed;
            }
            if (data.NetLimit != null) {
                message.NetLimit = data.NetLimit;
            }
            if (typeof data.assetNetUsed == "object") {
                message.assetNetUsed = new Map(Object.entries(data.assetNetUsed));
            }
            if (typeof data.assetNetLimit == "object") {
                message.assetNetLimit = new Map(Object.entries(data.assetNetLimit));
            }
            if (data.TotalNetLimit != null) {
                message.TotalNetLimit = data.TotalNetLimit;
            }
            if (data.TotalNetWeight != null) {
                message.TotalNetWeight = data.TotalNetWeight;
            }
            return message;
        }
        toObject() {
            const data: {
                freeNetUsed?: number;
                freeNetLimit?: number;
                NetUsed?: number;
                NetLimit?: number;
                assetNetUsed?: {
                    [key: string]: number;
                };
                assetNetLimit?: {
                    [key: string]: number;
                };
                TotalNetLimit?: number;
                TotalNetWeight?: number;
            } = {};
            if (this.freeNetUsed != null) {
                data.freeNetUsed = this.freeNetUsed;
            }
            if (this.freeNetLimit != null) {
                data.freeNetLimit = this.freeNetLimit;
            }
            if (this.NetUsed != null) {
                data.NetUsed = this.NetUsed;
            }
            if (this.NetLimit != null) {
                data.NetLimit = this.NetLimit;
            }
            if (this.assetNetUsed != null) {
                data.assetNetUsed = (Object.fromEntries)(this.assetNetUsed);
            }
            if (this.assetNetLimit != null) {
                data.assetNetLimit = (Object.fromEntries)(this.assetNetLimit);
            }
            if (this.TotalNetLimit != null) {
                data.TotalNetLimit = this.TotalNetLimit;
            }
            if (this.TotalNetWeight != null) {
                data.TotalNetWeight = this.TotalNetWeight;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.freeNetUsed != 0)
                writer.writeInt64(1, this.freeNetUsed);
            if (this.freeNetLimit != 0)
                writer.writeInt64(2, this.freeNetLimit);
            if (this.NetUsed != 0)
                writer.writeInt64(3, this.NetUsed);
            if (this.NetLimit != 0)
                writer.writeInt64(4, this.NetLimit);
            for (const [key, value] of this.assetNetUsed) {
                writer.writeMessage(5, this.assetNetUsed, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            for (const [key, value] of this.assetNetLimit) {
                writer.writeMessage(6, this.assetNetLimit, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            if (this.TotalNetLimit != 0)
                writer.writeInt64(7, this.TotalNetLimit);
            if (this.TotalNetWeight != 0)
                writer.writeInt64(8, this.TotalNetWeight);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountNetMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountNetMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.freeNetUsed = reader.readInt64();
                        break;
                    case 2:
                        message.freeNetLimit = reader.readInt64();
                        break;
                    case 3:
                        message.NetUsed = reader.readInt64();
                        break;
                    case 4:
                        message.NetLimit = reader.readInt64();
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.assetNetUsed as any, reader, reader.readString, reader.readInt64));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.assetNetLimit as any, reader, reader.readString, reader.readInt64));
                        break;
                    case 7:
                        message.TotalNetLimit = reader.readInt64();
                        break;
                    case 8:
                        message.TotalNetWeight = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountNetMessage {
            return AccountNetMessage.deserialize(bytes);
        }
    }
    export class AccountResourceMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            freeNetUsed?: number;
            freeNetLimit?: number;
            NetUsed?: number;
            NetLimit?: number;
            assetNetUsed?: Map<string, number>;
            assetNetLimit?: Map<string, number>;
            TotalNetLimit?: number;
            TotalNetWeight?: number;
            TotalTronPowerWeight?: number;
            tronPowerUsed?: number;
            tronPowerLimit?: number;
            EnergyUsed?: number;
            EnergyLimit?: number;
            TotalEnergyLimit?: number;
            TotalEnergyWeight?: number;
            storageUsed?: number;
            storageLimit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("freeNetUsed" in data && data.freeNetUsed != undefined) {
                    this.freeNetUsed = data.freeNetUsed;
                }
                if ("freeNetLimit" in data && data.freeNetLimit != undefined) {
                    this.freeNetLimit = data.freeNetLimit;
                }
                if ("NetUsed" in data && data.NetUsed != undefined) {
                    this.NetUsed = data.NetUsed;
                }
                if ("NetLimit" in data && data.NetLimit != undefined) {
                    this.NetLimit = data.NetLimit;
                }
                if ("assetNetUsed" in data && data.assetNetUsed != undefined) {
                    this.assetNetUsed = data.assetNetUsed;
                }
                if ("assetNetLimit" in data && data.assetNetLimit != undefined) {
                    this.assetNetLimit = data.assetNetLimit;
                }
                if ("TotalNetLimit" in data && data.TotalNetLimit != undefined) {
                    this.TotalNetLimit = data.TotalNetLimit;
                }
                if ("TotalNetWeight" in data && data.TotalNetWeight != undefined) {
                    this.TotalNetWeight = data.TotalNetWeight;
                }
                if ("TotalTronPowerWeight" in data && data.TotalTronPowerWeight != undefined) {
                    this.TotalTronPowerWeight = data.TotalTronPowerWeight;
                }
                if ("tronPowerUsed" in data && data.tronPowerUsed != undefined) {
                    this.tronPowerUsed = data.tronPowerUsed;
                }
                if ("tronPowerLimit" in data && data.tronPowerLimit != undefined) {
                    this.tronPowerLimit = data.tronPowerLimit;
                }
                if ("EnergyUsed" in data && data.EnergyUsed != undefined) {
                    this.EnergyUsed = data.EnergyUsed;
                }
                if ("EnergyLimit" in data && data.EnergyLimit != undefined) {
                    this.EnergyLimit = data.EnergyLimit;
                }
                if ("TotalEnergyLimit" in data && data.TotalEnergyLimit != undefined) {
                    this.TotalEnergyLimit = data.TotalEnergyLimit;
                }
                if ("TotalEnergyWeight" in data && data.TotalEnergyWeight != undefined) {
                    this.TotalEnergyWeight = data.TotalEnergyWeight;
                }
                if ("storageUsed" in data && data.storageUsed != undefined) {
                    this.storageUsed = data.storageUsed;
                }
                if ("storageLimit" in data && data.storageLimit != undefined) {
                    this.storageLimit = data.storageLimit;
                }
            }
            if (!this.assetNetUsed)
                this.assetNetUsed = new Map();
            if (!this.assetNetLimit)
                this.assetNetLimit = new Map();
        }
        get freeNetUsed() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set freeNetUsed(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get freeNetLimit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set freeNetLimit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get NetUsed() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set NetUsed(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get NetLimit() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set NetLimit(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get assetNetUsed() {
            return pb_1.Message.getField(this, 5) as any as Map<string, number>;
        }
        set assetNetUsed(value: Map<string, number>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get assetNetLimit() {
            return pb_1.Message.getField(this, 6) as any as Map<string, number>;
        }
        set assetNetLimit(value: Map<string, number>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get TotalNetLimit() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set TotalNetLimit(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get TotalNetWeight() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set TotalNetWeight(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get TotalTronPowerWeight() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set TotalTronPowerWeight(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get tronPowerUsed() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set tronPowerUsed(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get tronPowerLimit() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set tronPowerLimit(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get EnergyUsed() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set EnergyUsed(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get EnergyLimit() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set EnergyLimit(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get TotalEnergyLimit() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set TotalEnergyLimit(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get TotalEnergyWeight() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set TotalEnergyWeight(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get storageUsed() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set storageUsed(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get storageLimit() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set storageLimit(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        static fromObject(data: {
            freeNetUsed?: number;
            freeNetLimit?: number;
            NetUsed?: number;
            NetLimit?: number;
            assetNetUsed?: {
                [key: string]: number;
            };
            assetNetLimit?: {
                [key: string]: number;
            };
            TotalNetLimit?: number;
            TotalNetWeight?: number;
            TotalTronPowerWeight?: number;
            tronPowerUsed?: number;
            tronPowerLimit?: number;
            EnergyUsed?: number;
            EnergyLimit?: number;
            TotalEnergyLimit?: number;
            TotalEnergyWeight?: number;
            storageUsed?: number;
            storageLimit?: number;
        }): AccountResourceMessage {
            const message = new AccountResourceMessage({});
            if (data.freeNetUsed != null) {
                message.freeNetUsed = data.freeNetUsed;
            }
            if (data.freeNetLimit != null) {
                message.freeNetLimit = data.freeNetLimit;
            }
            if (data.NetUsed != null) {
                message.NetUsed = data.NetUsed;
            }
            if (data.NetLimit != null) {
                message.NetLimit = data.NetLimit;
            }
            if (typeof data.assetNetUsed == "object") {
                message.assetNetUsed = new Map(Object.entries(data.assetNetUsed));
            }
            if (typeof data.assetNetLimit == "object") {
                message.assetNetLimit = new Map(Object.entries(data.assetNetLimit));
            }
            if (data.TotalNetLimit != null) {
                message.TotalNetLimit = data.TotalNetLimit;
            }
            if (data.TotalNetWeight != null) {
                message.TotalNetWeight = data.TotalNetWeight;
            }
            if (data.TotalTronPowerWeight != null) {
                message.TotalTronPowerWeight = data.TotalTronPowerWeight;
            }
            if (data.tronPowerUsed != null) {
                message.tronPowerUsed = data.tronPowerUsed;
            }
            if (data.tronPowerLimit != null) {
                message.tronPowerLimit = data.tronPowerLimit;
            }
            if (data.EnergyUsed != null) {
                message.EnergyUsed = data.EnergyUsed;
            }
            if (data.EnergyLimit != null) {
                message.EnergyLimit = data.EnergyLimit;
            }
            if (data.TotalEnergyLimit != null) {
                message.TotalEnergyLimit = data.TotalEnergyLimit;
            }
            if (data.TotalEnergyWeight != null) {
                message.TotalEnergyWeight = data.TotalEnergyWeight;
            }
            if (data.storageUsed != null) {
                message.storageUsed = data.storageUsed;
            }
            if (data.storageLimit != null) {
                message.storageLimit = data.storageLimit;
            }
            return message;
        }
        toObject() {
            const data: {
                freeNetUsed?: number;
                freeNetLimit?: number;
                NetUsed?: number;
                NetLimit?: number;
                assetNetUsed?: {
                    [key: string]: number;
                };
                assetNetLimit?: {
                    [key: string]: number;
                };
                TotalNetLimit?: number;
                TotalNetWeight?: number;
                TotalTronPowerWeight?: number;
                tronPowerUsed?: number;
                tronPowerLimit?: number;
                EnergyUsed?: number;
                EnergyLimit?: number;
                TotalEnergyLimit?: number;
                TotalEnergyWeight?: number;
                storageUsed?: number;
                storageLimit?: number;
            } = {};
            if (this.freeNetUsed != null) {
                data.freeNetUsed = this.freeNetUsed;
            }
            if (this.freeNetLimit != null) {
                data.freeNetLimit = this.freeNetLimit;
            }
            if (this.NetUsed != null) {
                data.NetUsed = this.NetUsed;
            }
            if (this.NetLimit != null) {
                data.NetLimit = this.NetLimit;
            }
            if (this.assetNetUsed != null) {
                data.assetNetUsed = (Object.fromEntries)(this.assetNetUsed);
            }
            if (this.assetNetLimit != null) {
                data.assetNetLimit = (Object.fromEntries)(this.assetNetLimit);
            }
            if (this.TotalNetLimit != null) {
                data.TotalNetLimit = this.TotalNetLimit;
            }
            if (this.TotalNetWeight != null) {
                data.TotalNetWeight = this.TotalNetWeight;
            }
            if (this.TotalTronPowerWeight != null) {
                data.TotalTronPowerWeight = this.TotalTronPowerWeight;
            }
            if (this.tronPowerUsed != null) {
                data.tronPowerUsed = this.tronPowerUsed;
            }
            if (this.tronPowerLimit != null) {
                data.tronPowerLimit = this.tronPowerLimit;
            }
            if (this.EnergyUsed != null) {
                data.EnergyUsed = this.EnergyUsed;
            }
            if (this.EnergyLimit != null) {
                data.EnergyLimit = this.EnergyLimit;
            }
            if (this.TotalEnergyLimit != null) {
                data.TotalEnergyLimit = this.TotalEnergyLimit;
            }
            if (this.TotalEnergyWeight != null) {
                data.TotalEnergyWeight = this.TotalEnergyWeight;
            }
            if (this.storageUsed != null) {
                data.storageUsed = this.storageUsed;
            }
            if (this.storageLimit != null) {
                data.storageLimit = this.storageLimit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.freeNetUsed != 0)
                writer.writeInt64(1, this.freeNetUsed);
            if (this.freeNetLimit != 0)
                writer.writeInt64(2, this.freeNetLimit);
            if (this.NetUsed != 0)
                writer.writeInt64(3, this.NetUsed);
            if (this.NetLimit != 0)
                writer.writeInt64(4, this.NetLimit);
            for (const [key, value] of this.assetNetUsed) {
                writer.writeMessage(5, this.assetNetUsed, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            for (const [key, value] of this.assetNetLimit) {
                writer.writeMessage(6, this.assetNetLimit, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            if (this.TotalNetLimit != 0)
                writer.writeInt64(7, this.TotalNetLimit);
            if (this.TotalNetWeight != 0)
                writer.writeInt64(8, this.TotalNetWeight);
            if (this.TotalTronPowerWeight != 0)
                writer.writeInt64(9, this.TotalTronPowerWeight);
            if (this.tronPowerUsed != 0)
                writer.writeInt64(10, this.tronPowerUsed);
            if (this.tronPowerLimit != 0)
                writer.writeInt64(11, this.tronPowerLimit);
            if (this.EnergyUsed != 0)
                writer.writeInt64(13, this.EnergyUsed);
            if (this.EnergyLimit != 0)
                writer.writeInt64(14, this.EnergyLimit);
            if (this.TotalEnergyLimit != 0)
                writer.writeInt64(15, this.TotalEnergyLimit);
            if (this.TotalEnergyWeight != 0)
                writer.writeInt64(16, this.TotalEnergyWeight);
            if (this.storageUsed != 0)
                writer.writeInt64(21, this.storageUsed);
            if (this.storageLimit != 0)
                writer.writeInt64(22, this.storageLimit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountResourceMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountResourceMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.freeNetUsed = reader.readInt64();
                        break;
                    case 2:
                        message.freeNetLimit = reader.readInt64();
                        break;
                    case 3:
                        message.NetUsed = reader.readInt64();
                        break;
                    case 4:
                        message.NetLimit = reader.readInt64();
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.assetNetUsed as any, reader, reader.readString, reader.readInt64));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.assetNetLimit as any, reader, reader.readString, reader.readInt64));
                        break;
                    case 7:
                        message.TotalNetLimit = reader.readInt64();
                        break;
                    case 8:
                        message.TotalNetWeight = reader.readInt64();
                        break;
                    case 9:
                        message.TotalTronPowerWeight = reader.readInt64();
                        break;
                    case 10:
                        message.tronPowerUsed = reader.readInt64();
                        break;
                    case 11:
                        message.tronPowerLimit = reader.readInt64();
                        break;
                    case 13:
                        message.EnergyUsed = reader.readInt64();
                        break;
                    case 14:
                        message.EnergyLimit = reader.readInt64();
                        break;
                    case 15:
                        message.TotalEnergyLimit = reader.readInt64();
                        break;
                    case 16:
                        message.TotalEnergyWeight = reader.readInt64();
                        break;
                    case 21:
                        message.storageUsed = reader.readInt64();
                        break;
                    case 22:
                        message.storageLimit = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountResourceMessage {
            return AccountResourceMessage.deserialize(bytes);
        }
    }
    export class PaginatedMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            offset?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            offset?: number;
            limit?: number;
        }): PaginatedMessage {
            const message = new PaginatedMessage({});
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                offset?: number;
                limit?: number;
            } = {};
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.offset != 0)
                writer.writeInt64(1, this.offset);
            if (this.limit != 0)
                writer.writeInt64(2, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaginatedMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PaginatedMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.offset = reader.readInt64();
                        break;
                    case 2:
                        message.limit = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PaginatedMessage {
            return PaginatedMessage.deserialize(bytes);
        }
    }
    export class TransactionExtention extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction?: dependency_1.protocol.Transaction;
            txid?: Uint8Array;
            constant_result?: Uint8Array[];
            result?: Return;
            energy_used?: number;
            logs?: dependency_1.protocol.TransactionInfo.Log[];
            internal_transactions?: dependency_1.protocol.InternalTransaction[];
            energy_penalty?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
                if ("txid" in data && data.txid != undefined) {
                    this.txid = data.txid;
                }
                if ("constant_result" in data && data.constant_result != undefined) {
                    this.constant_result = data.constant_result;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("energy_used" in data && data.energy_used != undefined) {
                    this.energy_used = data.energy_used;
                }
                if ("logs" in data && data.logs != undefined) {
                    this.logs = data.logs;
                }
                if ("internal_transactions" in data && data.internal_transactions != undefined) {
                    this.internal_transactions = data.internal_transactions;
                }
                if ("energy_penalty" in data && data.energy_penalty != undefined) {
                    this.energy_penalty = data.energy_penalty;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, dependency_1.protocol.Transaction, 1) as dependency_1.protocol.Transaction;
        }
        set transaction(value: dependency_1.protocol.Transaction) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get txid() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set txid(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get constant_result() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as Uint8Array[];
        }
        set constant_result(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, Return, 4) as Return;
        }
        set result(value: Return) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get energy_used() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set energy_used(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get logs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.protocol.TransactionInfo.Log, 6) as dependency_1.protocol.TransactionInfo.Log[];
        }
        set logs(value: dependency_1.protocol.TransactionInfo.Log[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get internal_transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.protocol.InternalTransaction, 7) as dependency_1.protocol.InternalTransaction[];
        }
        set internal_transactions(value: dependency_1.protocol.InternalTransaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get energy_penalty() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set energy_penalty(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof dependency_1.protocol.Transaction.prototype.toObject>;
            txid?: Uint8Array;
            constant_result?: Uint8Array[];
            result?: ReturnType<typeof Return.prototype.toObject>;
            energy_used?: number;
            logs?: ReturnType<typeof dependency_1.protocol.TransactionInfo.Log.prototype.toObject>[];
            internal_transactions?: ReturnType<typeof dependency_1.protocol.InternalTransaction.prototype.toObject>[];
            energy_penalty?: number;
        }): TransactionExtention {
            const message = new TransactionExtention({});
            if (data.transaction != null) {
                message.transaction = dependency_1.protocol.Transaction.fromObject(data.transaction);
            }
            if (data.txid != null) {
                message.txid = data.txid;
            }
            if (data.constant_result != null) {
                message.constant_result = data.constant_result;
            }
            if (data.result != null) {
                message.result = Return.fromObject(data.result);
            }
            if (data.energy_used != null) {
                message.energy_used = data.energy_used;
            }
            if (data.logs != null) {
                message.logs = data.logs.map(item => dependency_1.protocol.TransactionInfo.Log.fromObject(item));
            }
            if (data.internal_transactions != null) {
                message.internal_transactions = data.internal_transactions.map(item => dependency_1.protocol.InternalTransaction.fromObject(item));
            }
            if (data.energy_penalty != null) {
                message.energy_penalty = data.energy_penalty;
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof dependency_1.protocol.Transaction.prototype.toObject>;
                txid?: Uint8Array;
                constant_result?: Uint8Array[];
                result?: ReturnType<typeof Return.prototype.toObject>;
                energy_used?: number;
                logs?: ReturnType<typeof dependency_1.protocol.TransactionInfo.Log.prototype.toObject>[];
                internal_transactions?: ReturnType<typeof dependency_1.protocol.InternalTransaction.prototype.toObject>[];
                energy_penalty?: number;
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            if (this.txid != null) {
                data.txid = this.txid;
            }
            if (this.constant_result != null) {
                data.constant_result = this.constant_result;
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            if (this.energy_used != null) {
                data.energy_used = this.energy_used;
            }
            if (this.logs != null) {
                data.logs = this.logs.map((item: dependency_1.protocol.TransactionInfo.Log) => item.toObject());
            }
            if (this.internal_transactions != null) {
                data.internal_transactions = this.internal_transactions.map((item: dependency_1.protocol.InternalTransaction) => item.toObject());
            }
            if (this.energy_penalty != null) {
                data.energy_penalty = this.energy_penalty;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_transaction)
                writer.writeMessage(1, this.transaction, () => this.transaction.serialize(writer));
            if (this.txid.length)
                writer.writeBytes(2, this.txid);
            if (this.constant_result.length)
                writer.writeRepeatedBytes(3, this.constant_result);
            if (this.has_result)
                writer.writeMessage(4, this.result, () => this.result.serialize(writer));
            if (this.energy_used != 0)
                writer.writeInt64(5, this.energy_used);
            if (this.logs.length)
                writer.writeRepeatedMessage(6, this.logs, (item: dependency_1.protocol.TransactionInfo.Log) => item.serialize(writer));
            if (this.internal_transactions.length)
                writer.writeRepeatedMessage(7, this.internal_transactions, (item: dependency_1.protocol.InternalTransaction) => item.serialize(writer));
            if (this.energy_penalty != 0)
                writer.writeInt64(8, this.energy_penalty);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionExtention {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionExtention();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => message.transaction = dependency_1.protocol.Transaction.deserialize(reader));
                        break;
                    case 2:
                        message.txid = reader.readBytes();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    case 4:
                        reader.readMessage(message.result, () => message.result = Return.deserialize(reader));
                        break;
                    case 5:
                        message.energy_used = reader.readInt64();
                        break;
                    case 6:
                        reader.readMessage(message.logs, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.protocol.TransactionInfo.Log.deserialize(reader), dependency_1.protocol.TransactionInfo.Log));
                        break;
                    case 7:
                        reader.readMessage(message.internal_transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_1.protocol.InternalTransaction.deserialize(reader), dependency_1.protocol.InternalTransaction));
                        break;
                    case 8:
                        message.energy_penalty = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionExtention {
            return TransactionExtention.deserialize(bytes);
        }
    }
    export class EstimateEnergyMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: Return;
            energy_required?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("energy_required" in data && data.energy_required != undefined) {
                    this.energy_required = data.energy_required;
                }
            }
        }
        get result() {
            return pb_1.Message.getWrapperField(this, Return, 1) as Return;
        }
        set result(value: Return) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get energy_required() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set energy_required(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            result?: ReturnType<typeof Return.prototype.toObject>;
            energy_required?: number;
        }): EstimateEnergyMessage {
            const message = new EstimateEnergyMessage({});
            if (data.result != null) {
                message.result = Return.fromObject(data.result);
            }
            if (data.energy_required != null) {
                message.energy_required = data.energy_required;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: ReturnType<typeof Return.prototype.toObject>;
                energy_required?: number;
            } = {};
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            if (this.energy_required != null) {
                data.energy_required = this.energy_required;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_result)
                writer.writeMessage(1, this.result, () => this.result.serialize(writer));
            if (this.energy_required != 0)
                writer.writeInt64(2, this.energy_required);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EstimateEnergyMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EstimateEnergyMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.result, () => message.result = Return.deserialize(reader));
                        break;
                    case 2:
                        message.energy_required = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EstimateEnergyMessage {
            return EstimateEnergyMessage.deserialize(bytes);
        }
    }
    export class BlockExtention extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transactions?: TransactionExtention[];
            block_header?: dependency_1.protocol.BlockHeader;
            blockid?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactions" in data && data.transactions != undefined) {
                    this.transactions = data.transactions;
                }
                if ("block_header" in data && data.block_header != undefined) {
                    this.block_header = data.block_header;
                }
                if ("blockid" in data && data.blockid != undefined) {
                    this.blockid = data.blockid;
                }
            }
        }
        get transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionExtention, 1) as TransactionExtention[];
        }
        set transactions(value: TransactionExtention[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get block_header() {
            return pb_1.Message.getWrapperField(this, dependency_1.protocol.BlockHeader, 2) as dependency_1.protocol.BlockHeader;
        }
        set block_header(value: dependency_1.protocol.BlockHeader) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block_header() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get blockid() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set blockid(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            transactions?: ReturnType<typeof TransactionExtention.prototype.toObject>[];
            block_header?: ReturnType<typeof dependency_1.protocol.BlockHeader.prototype.toObject>;
            blockid?: Uint8Array;
        }): BlockExtention {
            const message = new BlockExtention({});
            if (data.transactions != null) {
                message.transactions = data.transactions.map(item => TransactionExtention.fromObject(item));
            }
            if (data.block_header != null) {
                message.block_header = dependency_1.protocol.BlockHeader.fromObject(data.block_header);
            }
            if (data.blockid != null) {
                message.blockid = data.blockid;
            }
            return message;
        }
        toObject() {
            const data: {
                transactions?: ReturnType<typeof TransactionExtention.prototype.toObject>[];
                block_header?: ReturnType<typeof dependency_1.protocol.BlockHeader.prototype.toObject>;
                blockid?: Uint8Array;
            } = {};
            if (this.transactions != null) {
                data.transactions = this.transactions.map((item: TransactionExtention) => item.toObject());
            }
            if (this.block_header != null) {
                data.block_header = this.block_header.toObject();
            }
            if (this.blockid != null) {
                data.blockid = this.blockid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transactions.length)
                writer.writeRepeatedMessage(1, this.transactions, (item: TransactionExtention) => item.serialize(writer));
            if (this.has_block_header)
                writer.writeMessage(2, this.block_header, () => this.block_header.serialize(writer));
            if (this.blockid.length)
                writer.writeBytes(3, this.blockid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockExtention {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockExtention();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TransactionExtention.deserialize(reader), TransactionExtention));
                        break;
                    case 2:
                        reader.readMessage(message.block_header, () => message.block_header = dependency_1.protocol.BlockHeader.deserialize(reader));
                        break;
                    case 3:
                        message.blockid = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockExtention {
            return BlockExtention.deserialize(bytes);
        }
    }
    export class BlockListExtention extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: BlockExtention[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block() {
            return pb_1.Message.getRepeatedWrapperField(this, BlockExtention, 1) as BlockExtention[];
        }
        set block(value: BlockExtention[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            block?: ReturnType<typeof BlockExtention.prototype.toObject>[];
        }): BlockListExtention {
            const message = new BlockListExtention({});
            if (data.block != null) {
                message.block = data.block.map(item => BlockExtention.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof BlockExtention.prototype.toObject>[];
            } = {};
            if (this.block != null) {
                data.block = this.block.map((item: BlockExtention) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block.length)
                writer.writeRepeatedMessage(1, this.block, (item: BlockExtention) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockListExtention {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockListExtention();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => pb_1.Message.addToRepeatedWrapperField(message, 1, BlockExtention.deserialize(reader), BlockExtention));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockListExtention {
            return BlockListExtention.deserialize(bytes);
        }
    }
    export class TransactionListExtention extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction?: TransactionExtention[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get transaction() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionExtention, 1) as TransactionExtention[];
        }
        set transaction(value: TransactionExtention[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transaction?: ReturnType<typeof TransactionExtention.prototype.toObject>[];
        }): TransactionListExtention {
            const message = new TransactionListExtention({});
            if (data.transaction != null) {
                message.transaction = data.transaction.map(item => TransactionExtention.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transaction?: ReturnType<typeof TransactionExtention.prototype.toObject>[];
            } = {};
            if (this.transaction != null) {
                data.transaction = this.transaction.map((item: TransactionExtention) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transaction.length)
                writer.writeRepeatedMessage(1, this.transaction, (item: TransactionExtention) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionListExtention {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionListExtention();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transaction, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TransactionExtention.deserialize(reader), TransactionExtention));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionListExtention {
            return TransactionListExtention.deserialize(bytes);
        }
    }
    export class BlockIncrementalMerkleTree extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            number?: number;
            merkleTree?: dependency_11.protocol.IncrementalMerkleTree;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("merkleTree" in data && data.merkleTree != undefined) {
                    this.merkleTree = data.merkleTree;
                }
            }
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get merkleTree() {
            return pb_1.Message.getWrapperField(this, dependency_11.protocol.IncrementalMerkleTree, 2) as dependency_11.protocol.IncrementalMerkleTree;
        }
        set merkleTree(value: dependency_11.protocol.IncrementalMerkleTree) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_merkleTree() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            number?: number;
            merkleTree?: ReturnType<typeof dependency_11.protocol.IncrementalMerkleTree.prototype.toObject>;
        }): BlockIncrementalMerkleTree {
            const message = new BlockIncrementalMerkleTree({});
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.merkleTree != null) {
                message.merkleTree = dependency_11.protocol.IncrementalMerkleTree.fromObject(data.merkleTree);
            }
            return message;
        }
        toObject() {
            const data: {
                number?: number;
                merkleTree?: ReturnType<typeof dependency_11.protocol.IncrementalMerkleTree.prototype.toObject>;
            } = {};
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.merkleTree != null) {
                data.merkleTree = this.merkleTree.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.number != 0)
                writer.writeInt64(1, this.number);
            if (this.has_merkleTree)
                writer.writeMessage(2, this.merkleTree, () => this.merkleTree.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockIncrementalMerkleTree {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockIncrementalMerkleTree();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.number = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.merkleTree, () => message.merkleTree = dependency_11.protocol.IncrementalMerkleTree.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockIncrementalMerkleTree {
            return BlockIncrementalMerkleTree.deserialize(bytes);
        }
    }
    export class TransactionSignWeight extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            permission?: dependency_1.protocol.Permission;
            approved_list?: Uint8Array[];
            current_weight?: number;
            result?: TransactionSignWeight.Result;
            transaction?: TransactionExtention;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("permission" in data && data.permission != undefined) {
                    this.permission = data.permission;
                }
                if ("approved_list" in data && data.approved_list != undefined) {
                    this.approved_list = data.approved_list;
                }
                if ("current_weight" in data && data.current_weight != undefined) {
                    this.current_weight = data.current_weight;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get permission() {
            return pb_1.Message.getWrapperField(this, dependency_1.protocol.Permission, 1) as dependency_1.protocol.Permission;
        }
        set permission(value: dependency_1.protocol.Permission) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_permission() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get approved_list() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set approved_list(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get current_weight() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set current_weight(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, TransactionSignWeight.Result, 4) as TransactionSignWeight.Result;
        }
        set result(value: TransactionSignWeight.Result) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, TransactionExtention, 5) as TransactionExtention;
        }
        set transaction(value: TransactionExtention) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            permission?: ReturnType<typeof dependency_1.protocol.Permission.prototype.toObject>;
            approved_list?: Uint8Array[];
            current_weight?: number;
            result?: ReturnType<typeof TransactionSignWeight.Result.prototype.toObject>;
            transaction?: ReturnType<typeof TransactionExtention.prototype.toObject>;
        }): TransactionSignWeight {
            const message = new TransactionSignWeight({});
            if (data.permission != null) {
                message.permission = dependency_1.protocol.Permission.fromObject(data.permission);
            }
            if (data.approved_list != null) {
                message.approved_list = data.approved_list;
            }
            if (data.current_weight != null) {
                message.current_weight = data.current_weight;
            }
            if (data.result != null) {
                message.result = TransactionSignWeight.Result.fromObject(data.result);
            }
            if (data.transaction != null) {
                message.transaction = TransactionExtention.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                permission?: ReturnType<typeof dependency_1.protocol.Permission.prototype.toObject>;
                approved_list?: Uint8Array[];
                current_weight?: number;
                result?: ReturnType<typeof TransactionSignWeight.Result.prototype.toObject>;
                transaction?: ReturnType<typeof TransactionExtention.prototype.toObject>;
            } = {};
            if (this.permission != null) {
                data.permission = this.permission.toObject();
            }
            if (this.approved_list != null) {
                data.approved_list = this.approved_list;
            }
            if (this.current_weight != null) {
                data.current_weight = this.current_weight;
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_permission)
                writer.writeMessage(1, this.permission, () => this.permission.serialize(writer));
            if (this.approved_list.length)
                writer.writeRepeatedBytes(2, this.approved_list);
            if (this.current_weight != 0)
                writer.writeInt64(3, this.current_weight);
            if (this.has_result)
                writer.writeMessage(4, this.result, () => this.result.serialize(writer));
            if (this.has_transaction)
                writer.writeMessage(5, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionSignWeight {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionSignWeight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.permission, () => message.permission = dependency_1.protocol.Permission.deserialize(reader));
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 3:
                        message.current_weight = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.result, () => message.result = TransactionSignWeight.Result.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.transaction, () => message.transaction = TransactionExtention.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionSignWeight {
            return TransactionSignWeight.deserialize(bytes);
        }
    }
    export namespace TransactionSignWeight {
        export class Result extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                code?: TransactionSignWeight.Result.response_code;
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("code" in data && data.code != undefined) {
                        this.code = data.code;
                    }
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get code() {
                return pb_1.Message.getFieldWithDefault(this, 1, TransactionSignWeight.Result.response_code.ENOUGH_PERMISSION) as TransactionSignWeight.Result.response_code;
            }
            set code(value: TransactionSignWeight.Result.response_code) {
                pb_1.Message.setField(this, 1, value);
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                code?: TransactionSignWeight.Result.response_code;
                message?: string;
            }): Result {
                const message = new Result({});
                if (data.code != null) {
                    message.code = data.code;
                }
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    code?: TransactionSignWeight.Result.response_code;
                    message?: string;
                } = {};
                if (this.code != null) {
                    data.code = this.code;
                }
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.code != TransactionSignWeight.Result.response_code.ENOUGH_PERMISSION)
                    writer.writeEnum(1, this.code);
                if (this.message.length)
                    writer.writeString(2, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Result {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Result();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.code = reader.readEnum();
                            break;
                        case 2:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Result {
                return Result.deserialize(bytes);
            }
        }
        export namespace Result {
            export enum response_code {
                ENOUGH_PERMISSION = 0,
                NOT_ENOUGH_PERMISSION = 1,
                SIGNATURE_FORMAT_ERROR = 2,
                COMPUTE_ADDRESS_ERROR = 3,
                PERMISSION_ERROR = 4,
                OTHER_ERROR = 20
            }
        }
    }
    export class TransactionApprovedList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            approved_list?: Uint8Array[];
            result?: TransactionApprovedList.Result;
            transaction?: TransactionExtention;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("approved_list" in data && data.approved_list != undefined) {
                    this.approved_list = data.approved_list;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("transaction" in data && data.transaction != undefined) {
                    this.transaction = data.transaction;
                }
            }
        }
        get approved_list() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set approved_list(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, TransactionApprovedList.Result, 4) as TransactionApprovedList.Result;
        }
        set result(value: TransactionApprovedList.Result) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get transaction() {
            return pb_1.Message.getWrapperField(this, TransactionExtention, 5) as TransactionExtention;
        }
        set transaction(value: TransactionExtention) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_transaction() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            approved_list?: Uint8Array[];
            result?: ReturnType<typeof TransactionApprovedList.Result.prototype.toObject>;
            transaction?: ReturnType<typeof TransactionExtention.prototype.toObject>;
        }): TransactionApprovedList {
            const message = new TransactionApprovedList({});
            if (data.approved_list != null) {
                message.approved_list = data.approved_list;
            }
            if (data.result != null) {
                message.result = TransactionApprovedList.Result.fromObject(data.result);
            }
            if (data.transaction != null) {
                message.transaction = TransactionExtention.fromObject(data.transaction);
            }
            return message;
        }
        toObject() {
            const data: {
                approved_list?: Uint8Array[];
                result?: ReturnType<typeof TransactionApprovedList.Result.prototype.toObject>;
                transaction?: ReturnType<typeof TransactionExtention.prototype.toObject>;
            } = {};
            if (this.approved_list != null) {
                data.approved_list = this.approved_list;
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            if (this.transaction != null) {
                data.transaction = this.transaction.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.approved_list.length)
                writer.writeRepeatedBytes(2, this.approved_list);
            if (this.has_result)
                writer.writeMessage(4, this.result, () => this.result.serialize(writer));
            if (this.has_transaction)
                writer.writeMessage(5, this.transaction, () => this.transaction.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionApprovedList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionApprovedList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 4:
                        reader.readMessage(message.result, () => message.result = TransactionApprovedList.Result.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.transaction, () => message.transaction = TransactionExtention.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionApprovedList {
            return TransactionApprovedList.deserialize(bytes);
        }
    }
    export namespace TransactionApprovedList {
        export class Result extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                code?: TransactionApprovedList.Result.response_code;
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("code" in data && data.code != undefined) {
                        this.code = data.code;
                    }
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get code() {
                return pb_1.Message.getFieldWithDefault(this, 1, TransactionApprovedList.Result.response_code.SUCCESS) as TransactionApprovedList.Result.response_code;
            }
            set code(value: TransactionApprovedList.Result.response_code) {
                pb_1.Message.setField(this, 1, value);
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                code?: TransactionApprovedList.Result.response_code;
                message?: string;
            }): Result {
                const message = new Result({});
                if (data.code != null) {
                    message.code = data.code;
                }
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    code?: TransactionApprovedList.Result.response_code;
                    message?: string;
                } = {};
                if (this.code != null) {
                    data.code = this.code;
                }
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.code != TransactionApprovedList.Result.response_code.SUCCESS)
                    writer.writeEnum(1, this.code);
                if (this.message.length)
                    writer.writeString(2, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Result {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Result();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.code = reader.readEnum();
                            break;
                        case 2:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Result {
                return Result.deserialize(bytes);
            }
        }
        export namespace Result {
            export enum response_code {
                SUCCESS = 0,
                SIGNATURE_FORMAT_ERROR = 1,
                COMPUTE_ADDRESS_ERROR = 2,
                OTHER_ERROR = 20
            }
        }
    }
    export class IvkDecryptParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_block_index?: number;
            end_block_index?: number;
            ivk?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_block_index" in data && data.start_block_index != undefined) {
                    this.start_block_index = data.start_block_index;
                }
                if ("end_block_index" in data && data.end_block_index != undefined) {
                    this.end_block_index = data.end_block_index;
                }
                if ("ivk" in data && data.ivk != undefined) {
                    this.ivk = data.ivk;
                }
            }
        }
        get start_block_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start_block_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_block_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end_block_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ivk() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set ivk(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            start_block_index?: number;
            end_block_index?: number;
            ivk?: Uint8Array;
        }): IvkDecryptParameters {
            const message = new IvkDecryptParameters({});
            if (data.start_block_index != null) {
                message.start_block_index = data.start_block_index;
            }
            if (data.end_block_index != null) {
                message.end_block_index = data.end_block_index;
            }
            if (data.ivk != null) {
                message.ivk = data.ivk;
            }
            return message;
        }
        toObject() {
            const data: {
                start_block_index?: number;
                end_block_index?: number;
                ivk?: Uint8Array;
            } = {};
            if (this.start_block_index != null) {
                data.start_block_index = this.start_block_index;
            }
            if (this.end_block_index != null) {
                data.end_block_index = this.end_block_index;
            }
            if (this.ivk != null) {
                data.ivk = this.ivk;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_block_index != 0)
                writer.writeInt64(1, this.start_block_index);
            if (this.end_block_index != 0)
                writer.writeInt64(2, this.end_block_index);
            if (this.ivk.length)
                writer.writeBytes(3, this.ivk);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IvkDecryptParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IvkDecryptParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_block_index = reader.readInt64();
                        break;
                    case 2:
                        message.end_block_index = reader.readInt64();
                        break;
                    case 3:
                        message.ivk = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IvkDecryptParameters {
            return IvkDecryptParameters.deserialize(bytes);
        }
    }
    export class IvkDecryptAndMarkParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_block_index?: number;
            end_block_index?: number;
            ivk?: Uint8Array;
            ak?: Uint8Array;
            nk?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_block_index" in data && data.start_block_index != undefined) {
                    this.start_block_index = data.start_block_index;
                }
                if ("end_block_index" in data && data.end_block_index != undefined) {
                    this.end_block_index = data.end_block_index;
                }
                if ("ivk" in data && data.ivk != undefined) {
                    this.ivk = data.ivk;
                }
                if ("ak" in data && data.ak != undefined) {
                    this.ak = data.ak;
                }
                if ("nk" in data && data.nk != undefined) {
                    this.nk = data.nk;
                }
            }
        }
        get start_block_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start_block_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_block_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end_block_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ivk() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set ivk(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get ak() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set ak(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get nk() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set nk(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            start_block_index?: number;
            end_block_index?: number;
            ivk?: Uint8Array;
            ak?: Uint8Array;
            nk?: Uint8Array;
        }): IvkDecryptAndMarkParameters {
            const message = new IvkDecryptAndMarkParameters({});
            if (data.start_block_index != null) {
                message.start_block_index = data.start_block_index;
            }
            if (data.end_block_index != null) {
                message.end_block_index = data.end_block_index;
            }
            if (data.ivk != null) {
                message.ivk = data.ivk;
            }
            if (data.ak != null) {
                message.ak = data.ak;
            }
            if (data.nk != null) {
                message.nk = data.nk;
            }
            return message;
        }
        toObject() {
            const data: {
                start_block_index?: number;
                end_block_index?: number;
                ivk?: Uint8Array;
                ak?: Uint8Array;
                nk?: Uint8Array;
            } = {};
            if (this.start_block_index != null) {
                data.start_block_index = this.start_block_index;
            }
            if (this.end_block_index != null) {
                data.end_block_index = this.end_block_index;
            }
            if (this.ivk != null) {
                data.ivk = this.ivk;
            }
            if (this.ak != null) {
                data.ak = this.ak;
            }
            if (this.nk != null) {
                data.nk = this.nk;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_block_index != 0)
                writer.writeInt64(1, this.start_block_index);
            if (this.end_block_index != 0)
                writer.writeInt64(2, this.end_block_index);
            if (this.ivk.length)
                writer.writeBytes(5, this.ivk);
            if (this.ak.length)
                writer.writeBytes(3, this.ak);
            if (this.nk.length)
                writer.writeBytes(4, this.nk);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IvkDecryptAndMarkParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IvkDecryptAndMarkParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_block_index = reader.readInt64();
                        break;
                    case 2:
                        message.end_block_index = reader.readInt64();
                        break;
                    case 5:
                        message.ivk = reader.readBytes();
                        break;
                    case 3:
                        message.ak = reader.readBytes();
                        break;
                    case 4:
                        message.nk = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IvkDecryptAndMarkParameters {
            return IvkDecryptAndMarkParameters.deserialize(bytes);
        }
    }
    export class OvkDecryptParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_block_index?: number;
            end_block_index?: number;
            ovk?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_block_index" in data && data.start_block_index != undefined) {
                    this.start_block_index = data.start_block_index;
                }
                if ("end_block_index" in data && data.end_block_index != undefined) {
                    this.end_block_index = data.end_block_index;
                }
                if ("ovk" in data && data.ovk != undefined) {
                    this.ovk = data.ovk;
                }
            }
        }
        get start_block_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start_block_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_block_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end_block_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ovk() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set ovk(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            start_block_index?: number;
            end_block_index?: number;
            ovk?: Uint8Array;
        }): OvkDecryptParameters {
            const message = new OvkDecryptParameters({});
            if (data.start_block_index != null) {
                message.start_block_index = data.start_block_index;
            }
            if (data.end_block_index != null) {
                message.end_block_index = data.end_block_index;
            }
            if (data.ovk != null) {
                message.ovk = data.ovk;
            }
            return message;
        }
        toObject() {
            const data: {
                start_block_index?: number;
                end_block_index?: number;
                ovk?: Uint8Array;
            } = {};
            if (this.start_block_index != null) {
                data.start_block_index = this.start_block_index;
            }
            if (this.end_block_index != null) {
                data.end_block_index = this.end_block_index;
            }
            if (this.ovk != null) {
                data.ovk = this.ovk;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_block_index != 0)
                writer.writeInt64(1, this.start_block_index);
            if (this.end_block_index != 0)
                writer.writeInt64(2, this.end_block_index);
            if (this.ovk.length)
                writer.writeBytes(3, this.ovk);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OvkDecryptParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OvkDecryptParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_block_index = reader.readInt64();
                        break;
                    case 2:
                        message.end_block_index = reader.readInt64();
                        break;
                    case 3:
                        message.ovk = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OvkDecryptParameters {
            return OvkDecryptParameters.deserialize(bytes);
        }
    }
    export class DecryptNotes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            noteTxs?: DecryptNotes.NoteTx[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("noteTxs" in data && data.noteTxs != undefined) {
                    this.noteTxs = data.noteTxs;
                }
            }
        }
        get noteTxs() {
            return pb_1.Message.getRepeatedWrapperField(this, DecryptNotes.NoteTx, 1) as DecryptNotes.NoteTx[];
        }
        set noteTxs(value: DecryptNotes.NoteTx[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            noteTxs?: ReturnType<typeof DecryptNotes.NoteTx.prototype.toObject>[];
        }): DecryptNotes {
            const message = new DecryptNotes({});
            if (data.noteTxs != null) {
                message.noteTxs = data.noteTxs.map(item => DecryptNotes.NoteTx.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                noteTxs?: ReturnType<typeof DecryptNotes.NoteTx.prototype.toObject>[];
            } = {};
            if (this.noteTxs != null) {
                data.noteTxs = this.noteTxs.map((item: DecryptNotes.NoteTx) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.noteTxs.length)
                writer.writeRepeatedMessage(1, this.noteTxs, (item: DecryptNotes.NoteTx) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DecryptNotes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DecryptNotes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.noteTxs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DecryptNotes.NoteTx.deserialize(reader), DecryptNotes.NoteTx));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DecryptNotes {
            return DecryptNotes.deserialize(bytes);
        }
    }
    export namespace DecryptNotes {
        export class NoteTx extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                note?: Note;
                txid?: Uint8Array;
                index?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("note" in data && data.note != undefined) {
                        this.note = data.note;
                    }
                    if ("txid" in data && data.txid != undefined) {
                        this.txid = data.txid;
                    }
                    if ("index" in data && data.index != undefined) {
                        this.index = data.index;
                    }
                }
            }
            get note() {
                return pb_1.Message.getWrapperField(this, Note, 1) as Note;
            }
            set note(value: Note) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_note() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get txid() {
                return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
            }
            set txid(value: Uint8Array) {
                pb_1.Message.setField(this, 2, value);
            }
            get index() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set index(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                note?: ReturnType<typeof Note.prototype.toObject>;
                txid?: Uint8Array;
                index?: number;
            }): NoteTx {
                const message = new NoteTx({});
                if (data.note != null) {
                    message.note = Note.fromObject(data.note);
                }
                if (data.txid != null) {
                    message.txid = data.txid;
                }
                if (data.index != null) {
                    message.index = data.index;
                }
                return message;
            }
            toObject() {
                const data: {
                    note?: ReturnType<typeof Note.prototype.toObject>;
                    txid?: Uint8Array;
                    index?: number;
                } = {};
                if (this.note != null) {
                    data.note = this.note.toObject();
                }
                if (this.txid != null) {
                    data.txid = this.txid;
                }
                if (this.index != null) {
                    data.index = this.index;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_note)
                    writer.writeMessage(1, this.note, () => this.note.serialize(writer));
                if (this.txid.length)
                    writer.writeBytes(2, this.txid);
                if (this.index != 0)
                    writer.writeInt32(3, this.index);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NoteTx {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NoteTx();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.note, () => message.note = Note.deserialize(reader));
                            break;
                        case 2:
                            message.txid = reader.readBytes();
                            break;
                        case 3:
                            message.index = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): NoteTx {
                return NoteTx.deserialize(bytes);
            }
        }
    }
    export class DecryptNotesMarked extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            noteTxs?: DecryptNotesMarked.NoteTx[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("noteTxs" in data && data.noteTxs != undefined) {
                    this.noteTxs = data.noteTxs;
                }
            }
        }
        get noteTxs() {
            return pb_1.Message.getRepeatedWrapperField(this, DecryptNotesMarked.NoteTx, 1) as DecryptNotesMarked.NoteTx[];
        }
        set noteTxs(value: DecryptNotesMarked.NoteTx[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            noteTxs?: ReturnType<typeof DecryptNotesMarked.NoteTx.prototype.toObject>[];
        }): DecryptNotesMarked {
            const message = new DecryptNotesMarked({});
            if (data.noteTxs != null) {
                message.noteTxs = data.noteTxs.map(item => DecryptNotesMarked.NoteTx.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                noteTxs?: ReturnType<typeof DecryptNotesMarked.NoteTx.prototype.toObject>[];
            } = {};
            if (this.noteTxs != null) {
                data.noteTxs = this.noteTxs.map((item: DecryptNotesMarked.NoteTx) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.noteTxs.length)
                writer.writeRepeatedMessage(1, this.noteTxs, (item: DecryptNotesMarked.NoteTx) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DecryptNotesMarked {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DecryptNotesMarked();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.noteTxs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DecryptNotesMarked.NoteTx.deserialize(reader), DecryptNotesMarked.NoteTx));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DecryptNotesMarked {
            return DecryptNotesMarked.deserialize(bytes);
        }
    }
    export namespace DecryptNotesMarked {
        export class NoteTx extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                note?: Note;
                txid?: Uint8Array;
                index?: number;
                is_spend?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("note" in data && data.note != undefined) {
                        this.note = data.note;
                    }
                    if ("txid" in data && data.txid != undefined) {
                        this.txid = data.txid;
                    }
                    if ("index" in data && data.index != undefined) {
                        this.index = data.index;
                    }
                    if ("is_spend" in data && data.is_spend != undefined) {
                        this.is_spend = data.is_spend;
                    }
                }
            }
            get note() {
                return pb_1.Message.getWrapperField(this, Note, 1) as Note;
            }
            set note(value: Note) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_note() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get txid() {
                return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
            }
            set txid(value: Uint8Array) {
                pb_1.Message.setField(this, 2, value);
            }
            get index() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set index(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get is_spend() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set is_spend(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                note?: ReturnType<typeof Note.prototype.toObject>;
                txid?: Uint8Array;
                index?: number;
                is_spend?: boolean;
            }): NoteTx {
                const message = new NoteTx({});
                if (data.note != null) {
                    message.note = Note.fromObject(data.note);
                }
                if (data.txid != null) {
                    message.txid = data.txid;
                }
                if (data.index != null) {
                    message.index = data.index;
                }
                if (data.is_spend != null) {
                    message.is_spend = data.is_spend;
                }
                return message;
            }
            toObject() {
                const data: {
                    note?: ReturnType<typeof Note.prototype.toObject>;
                    txid?: Uint8Array;
                    index?: number;
                    is_spend?: boolean;
                } = {};
                if (this.note != null) {
                    data.note = this.note.toObject();
                }
                if (this.txid != null) {
                    data.txid = this.txid;
                }
                if (this.index != null) {
                    data.index = this.index;
                }
                if (this.is_spend != null) {
                    data.is_spend = this.is_spend;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_note)
                    writer.writeMessage(1, this.note, () => this.note.serialize(writer));
                if (this.txid.length)
                    writer.writeBytes(2, this.txid);
                if (this.index != 0)
                    writer.writeInt32(3, this.index);
                if (this.is_spend != false)
                    writer.writeBool(4, this.is_spend);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NoteTx {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NoteTx();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.note, () => message.note = Note.deserialize(reader));
                            break;
                        case 2:
                            message.txid = reader.readBytes();
                            break;
                        case 3:
                            message.index = reader.readInt32();
                            break;
                        case 4:
                            message.is_spend = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): NoteTx {
                return NoteTx.deserialize(bytes);
            }
        }
    }
    export class Note extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: number;
            payment_address?: string;
            rcm?: Uint8Array;
            memo?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("payment_address" in data && data.payment_address != undefined) {
                    this.payment_address = data.payment_address;
                }
                if ("rcm" in data && data.rcm != undefined) {
                    this.rcm = data.rcm;
                }
                if ("memo" in data && data.memo != undefined) {
                    this.memo = data.memo;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get payment_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set payment_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get rcm() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set rcm(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get memo() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set memo(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            value?: number;
            payment_address?: string;
            rcm?: Uint8Array;
            memo?: Uint8Array;
        }): Note {
            const message = new Note({});
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.payment_address != null) {
                message.payment_address = data.payment_address;
            }
            if (data.rcm != null) {
                message.rcm = data.rcm;
            }
            if (data.memo != null) {
                message.memo = data.memo;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: number;
                payment_address?: string;
                rcm?: Uint8Array;
                memo?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.payment_address != null) {
                data.payment_address = this.payment_address;
            }
            if (this.rcm != null) {
                data.rcm = this.rcm;
            }
            if (this.memo != null) {
                data.memo = this.memo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != 0)
                writer.writeInt64(1, this.value);
            if (this.payment_address.length)
                writer.writeString(2, this.payment_address);
            if (this.rcm.length)
                writer.writeBytes(3, this.rcm);
            if (this.memo.length)
                writer.writeBytes(4, this.memo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Note {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Note();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readInt64();
                        break;
                    case 2:
                        message.payment_address = reader.readString();
                        break;
                    case 3:
                        message.rcm = reader.readBytes();
                        break;
                    case 4:
                        message.memo = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Note {
            return Note.deserialize(bytes);
        }
    }
    export class SpendNote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            note?: Note;
            alpha?: Uint8Array;
            voucher?: dependency_11.protocol.IncrementalMerkleVoucher;
            path?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("note" in data && data.note != undefined) {
                    this.note = data.note;
                }
                if ("alpha" in data && data.alpha != undefined) {
                    this.alpha = data.alpha;
                }
                if ("voucher" in data && data.voucher != undefined) {
                    this.voucher = data.voucher;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
            }
        }
        get note() {
            return pb_1.Message.getWrapperField(this, Note, 3) as Note;
        }
        set note(value: Note) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_note() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get alpha() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set alpha(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get voucher() {
            return pb_1.Message.getWrapperField(this, dependency_11.protocol.IncrementalMerkleVoucher, 5) as dependency_11.protocol.IncrementalMerkleVoucher;
        }
        set voucher(value: dependency_11.protocol.IncrementalMerkleVoucher) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_voucher() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set path(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            note?: ReturnType<typeof Note.prototype.toObject>;
            alpha?: Uint8Array;
            voucher?: ReturnType<typeof dependency_11.protocol.IncrementalMerkleVoucher.prototype.toObject>;
            path?: Uint8Array;
        }): SpendNote {
            const message = new SpendNote({});
            if (data.note != null) {
                message.note = Note.fromObject(data.note);
            }
            if (data.alpha != null) {
                message.alpha = data.alpha;
            }
            if (data.voucher != null) {
                message.voucher = dependency_11.protocol.IncrementalMerkleVoucher.fromObject(data.voucher);
            }
            if (data.path != null) {
                message.path = data.path;
            }
            return message;
        }
        toObject() {
            const data: {
                note?: ReturnType<typeof Note.prototype.toObject>;
                alpha?: Uint8Array;
                voucher?: ReturnType<typeof dependency_11.protocol.IncrementalMerkleVoucher.prototype.toObject>;
                path?: Uint8Array;
            } = {};
            if (this.note != null) {
                data.note = this.note.toObject();
            }
            if (this.alpha != null) {
                data.alpha = this.alpha;
            }
            if (this.voucher != null) {
                data.voucher = this.voucher.toObject();
            }
            if (this.path != null) {
                data.path = this.path;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_note)
                writer.writeMessage(3, this.note, () => this.note.serialize(writer));
            if (this.alpha.length)
                writer.writeBytes(4, this.alpha);
            if (this.has_voucher)
                writer.writeMessage(5, this.voucher, () => this.voucher.serialize(writer));
            if (this.path.length)
                writer.writeBytes(6, this.path);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpendNote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpendNote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.note, () => message.note = Note.deserialize(reader));
                        break;
                    case 4:
                        message.alpha = reader.readBytes();
                        break;
                    case 5:
                        reader.readMessage(message.voucher, () => message.voucher = dependency_11.protocol.IncrementalMerkleVoucher.deserialize(reader));
                        break;
                    case 6:
                        message.path = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SpendNote {
            return SpendNote.deserialize(bytes);
        }
    }
    export class ReceiveNote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            note?: Note;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("note" in data && data.note != undefined) {
                    this.note = data.note;
                }
            }
        }
        get note() {
            return pb_1.Message.getWrapperField(this, Note, 1) as Note;
        }
        set note(value: Note) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_note() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            note?: ReturnType<typeof Note.prototype.toObject>;
        }): ReceiveNote {
            const message = new ReceiveNote({});
            if (data.note != null) {
                message.note = Note.fromObject(data.note);
            }
            return message;
        }
        toObject() {
            const data: {
                note?: ReturnType<typeof Note.prototype.toObject>;
            } = {};
            if (this.note != null) {
                data.note = this.note.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_note)
                writer.writeMessage(1, this.note, () => this.note.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReceiveNote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReceiveNote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.note, () => message.note = Note.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReceiveNote {
            return ReceiveNote.deserialize(bytes);
        }
    }
    export class PrivateParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transparent_from_address?: Uint8Array;
            ask?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
            from_amount?: number;
            shielded_spends?: SpendNote[];
            shielded_receives?: ReceiveNote[];
            transparent_to_address?: Uint8Array;
            to_amount?: number;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transparent_from_address" in data && data.transparent_from_address != undefined) {
                    this.transparent_from_address = data.transparent_from_address;
                }
                if ("ask" in data && data.ask != undefined) {
                    this.ask = data.ask;
                }
                if ("nsk" in data && data.nsk != undefined) {
                    this.nsk = data.nsk;
                }
                if ("ovk" in data && data.ovk != undefined) {
                    this.ovk = data.ovk;
                }
                if ("from_amount" in data && data.from_amount != undefined) {
                    this.from_amount = data.from_amount;
                }
                if ("shielded_spends" in data && data.shielded_spends != undefined) {
                    this.shielded_spends = data.shielded_spends;
                }
                if ("shielded_receives" in data && data.shielded_receives != undefined) {
                    this.shielded_receives = data.shielded_receives;
                }
                if ("transparent_to_address" in data && data.transparent_to_address != undefined) {
                    this.transparent_to_address = data.transparent_to_address;
                }
                if ("to_amount" in data && data.to_amount != undefined) {
                    this.to_amount = data.to_amount;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get transparent_from_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set transparent_from_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get ask() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set ask(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get nsk() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set nsk(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get ovk() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set ovk(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get from_amount() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set from_amount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get shielded_spends() {
            return pb_1.Message.getRepeatedWrapperField(this, SpendNote, 6) as SpendNote[];
        }
        set shielded_spends(value: SpendNote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get shielded_receives() {
            return pb_1.Message.getRepeatedWrapperField(this, ReceiveNote, 7) as ReceiveNote[];
        }
        set shielded_receives(value: ReceiveNote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get transparent_to_address() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set transparent_to_address(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        get to_amount() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set to_amount(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            transparent_from_address?: Uint8Array;
            ask?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
            from_amount?: number;
            shielded_spends?: ReturnType<typeof SpendNote.prototype.toObject>[];
            shielded_receives?: ReturnType<typeof ReceiveNote.prototype.toObject>[];
            transparent_to_address?: Uint8Array;
            to_amount?: number;
            timeout?: number;
        }): PrivateParameters {
            const message = new PrivateParameters({});
            if (data.transparent_from_address != null) {
                message.transparent_from_address = data.transparent_from_address;
            }
            if (data.ask != null) {
                message.ask = data.ask;
            }
            if (data.nsk != null) {
                message.nsk = data.nsk;
            }
            if (data.ovk != null) {
                message.ovk = data.ovk;
            }
            if (data.from_amount != null) {
                message.from_amount = data.from_amount;
            }
            if (data.shielded_spends != null) {
                message.shielded_spends = data.shielded_spends.map(item => SpendNote.fromObject(item));
            }
            if (data.shielded_receives != null) {
                message.shielded_receives = data.shielded_receives.map(item => ReceiveNote.fromObject(item));
            }
            if (data.transparent_to_address != null) {
                message.transparent_to_address = data.transparent_to_address;
            }
            if (data.to_amount != null) {
                message.to_amount = data.to_amount;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                transparent_from_address?: Uint8Array;
                ask?: Uint8Array;
                nsk?: Uint8Array;
                ovk?: Uint8Array;
                from_amount?: number;
                shielded_spends?: ReturnType<typeof SpendNote.prototype.toObject>[];
                shielded_receives?: ReturnType<typeof ReceiveNote.prototype.toObject>[];
                transparent_to_address?: Uint8Array;
                to_amount?: number;
                timeout?: number;
            } = {};
            if (this.transparent_from_address != null) {
                data.transparent_from_address = this.transparent_from_address;
            }
            if (this.ask != null) {
                data.ask = this.ask;
            }
            if (this.nsk != null) {
                data.nsk = this.nsk;
            }
            if (this.ovk != null) {
                data.ovk = this.ovk;
            }
            if (this.from_amount != null) {
                data.from_amount = this.from_amount;
            }
            if (this.shielded_spends != null) {
                data.shielded_spends = this.shielded_spends.map((item: SpendNote) => item.toObject());
            }
            if (this.shielded_receives != null) {
                data.shielded_receives = this.shielded_receives.map((item: ReceiveNote) => item.toObject());
            }
            if (this.transparent_to_address != null) {
                data.transparent_to_address = this.transparent_to_address;
            }
            if (this.to_amount != null) {
                data.to_amount = this.to_amount;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transparent_from_address.length)
                writer.writeBytes(1, this.transparent_from_address);
            if (this.ask.length)
                writer.writeBytes(2, this.ask);
            if (this.nsk.length)
                writer.writeBytes(3, this.nsk);
            if (this.ovk.length)
                writer.writeBytes(4, this.ovk);
            if (this.from_amount != 0)
                writer.writeInt64(5, this.from_amount);
            if (this.shielded_spends.length)
                writer.writeRepeatedMessage(6, this.shielded_spends, (item: SpendNote) => item.serialize(writer));
            if (this.shielded_receives.length)
                writer.writeRepeatedMessage(7, this.shielded_receives, (item: ReceiveNote) => item.serialize(writer));
            if (this.transparent_to_address.length)
                writer.writeBytes(8, this.transparent_to_address);
            if (this.to_amount != 0)
                writer.writeInt64(9, this.to_amount);
            if (this.timeout != 0)
                writer.writeInt64(10, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrivateParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrivateParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.transparent_from_address = reader.readBytes();
                        break;
                    case 2:
                        message.ask = reader.readBytes();
                        break;
                    case 3:
                        message.nsk = reader.readBytes();
                        break;
                    case 4:
                        message.ovk = reader.readBytes();
                        break;
                    case 5:
                        message.from_amount = reader.readInt64();
                        break;
                    case 6:
                        reader.readMessage(message.shielded_spends, () => pb_1.Message.addToRepeatedWrapperField(message, 6, SpendNote.deserialize(reader), SpendNote));
                        break;
                    case 7:
                        reader.readMessage(message.shielded_receives, () => pb_1.Message.addToRepeatedWrapperField(message, 7, ReceiveNote.deserialize(reader), ReceiveNote));
                        break;
                    case 8:
                        message.transparent_to_address = reader.readBytes();
                        break;
                    case 9:
                        message.to_amount = reader.readInt64();
                        break;
                    case 10:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrivateParameters {
            return PrivateParameters.deserialize(bytes);
        }
    }
    export class PrivateParametersWithoutAsk extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transparent_from_address?: Uint8Array;
            ak?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
            from_amount?: number;
            shielded_spends?: SpendNote[];
            shielded_receives?: ReceiveNote[];
            transparent_to_address?: Uint8Array;
            to_amount?: number;
            timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transparent_from_address" in data && data.transparent_from_address != undefined) {
                    this.transparent_from_address = data.transparent_from_address;
                }
                if ("ak" in data && data.ak != undefined) {
                    this.ak = data.ak;
                }
                if ("nsk" in data && data.nsk != undefined) {
                    this.nsk = data.nsk;
                }
                if ("ovk" in data && data.ovk != undefined) {
                    this.ovk = data.ovk;
                }
                if ("from_amount" in data && data.from_amount != undefined) {
                    this.from_amount = data.from_amount;
                }
                if ("shielded_spends" in data && data.shielded_spends != undefined) {
                    this.shielded_spends = data.shielded_spends;
                }
                if ("shielded_receives" in data && data.shielded_receives != undefined) {
                    this.shielded_receives = data.shielded_receives;
                }
                if ("transparent_to_address" in data && data.transparent_to_address != undefined) {
                    this.transparent_to_address = data.transparent_to_address;
                }
                if ("to_amount" in data && data.to_amount != undefined) {
                    this.to_amount = data.to_amount;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get transparent_from_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set transparent_from_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get ak() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set ak(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get nsk() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set nsk(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get ovk() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set ovk(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get from_amount() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set from_amount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get shielded_spends() {
            return pb_1.Message.getRepeatedWrapperField(this, SpendNote, 6) as SpendNote[];
        }
        set shielded_spends(value: SpendNote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get shielded_receives() {
            return pb_1.Message.getRepeatedWrapperField(this, ReceiveNote, 7) as ReceiveNote[];
        }
        set shielded_receives(value: ReceiveNote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get transparent_to_address() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set transparent_to_address(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        get to_amount() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set to_amount(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            transparent_from_address?: Uint8Array;
            ak?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
            from_amount?: number;
            shielded_spends?: ReturnType<typeof SpendNote.prototype.toObject>[];
            shielded_receives?: ReturnType<typeof ReceiveNote.prototype.toObject>[];
            transparent_to_address?: Uint8Array;
            to_amount?: number;
            timeout?: number;
        }): PrivateParametersWithoutAsk {
            const message = new PrivateParametersWithoutAsk({});
            if (data.transparent_from_address != null) {
                message.transparent_from_address = data.transparent_from_address;
            }
            if (data.ak != null) {
                message.ak = data.ak;
            }
            if (data.nsk != null) {
                message.nsk = data.nsk;
            }
            if (data.ovk != null) {
                message.ovk = data.ovk;
            }
            if (data.from_amount != null) {
                message.from_amount = data.from_amount;
            }
            if (data.shielded_spends != null) {
                message.shielded_spends = data.shielded_spends.map(item => SpendNote.fromObject(item));
            }
            if (data.shielded_receives != null) {
                message.shielded_receives = data.shielded_receives.map(item => ReceiveNote.fromObject(item));
            }
            if (data.transparent_to_address != null) {
                message.transparent_to_address = data.transparent_to_address;
            }
            if (data.to_amount != null) {
                message.to_amount = data.to_amount;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                transparent_from_address?: Uint8Array;
                ak?: Uint8Array;
                nsk?: Uint8Array;
                ovk?: Uint8Array;
                from_amount?: number;
                shielded_spends?: ReturnType<typeof SpendNote.prototype.toObject>[];
                shielded_receives?: ReturnType<typeof ReceiveNote.prototype.toObject>[];
                transparent_to_address?: Uint8Array;
                to_amount?: number;
                timeout?: number;
            } = {};
            if (this.transparent_from_address != null) {
                data.transparent_from_address = this.transparent_from_address;
            }
            if (this.ak != null) {
                data.ak = this.ak;
            }
            if (this.nsk != null) {
                data.nsk = this.nsk;
            }
            if (this.ovk != null) {
                data.ovk = this.ovk;
            }
            if (this.from_amount != null) {
                data.from_amount = this.from_amount;
            }
            if (this.shielded_spends != null) {
                data.shielded_spends = this.shielded_spends.map((item: SpendNote) => item.toObject());
            }
            if (this.shielded_receives != null) {
                data.shielded_receives = this.shielded_receives.map((item: ReceiveNote) => item.toObject());
            }
            if (this.transparent_to_address != null) {
                data.transparent_to_address = this.transparent_to_address;
            }
            if (this.to_amount != null) {
                data.to_amount = this.to_amount;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transparent_from_address.length)
                writer.writeBytes(1, this.transparent_from_address);
            if (this.ak.length)
                writer.writeBytes(2, this.ak);
            if (this.nsk.length)
                writer.writeBytes(3, this.nsk);
            if (this.ovk.length)
                writer.writeBytes(4, this.ovk);
            if (this.from_amount != 0)
                writer.writeInt64(5, this.from_amount);
            if (this.shielded_spends.length)
                writer.writeRepeatedMessage(6, this.shielded_spends, (item: SpendNote) => item.serialize(writer));
            if (this.shielded_receives.length)
                writer.writeRepeatedMessage(7, this.shielded_receives, (item: ReceiveNote) => item.serialize(writer));
            if (this.transparent_to_address.length)
                writer.writeBytes(8, this.transparent_to_address);
            if (this.to_amount != 0)
                writer.writeInt64(9, this.to_amount);
            if (this.timeout != 0)
                writer.writeInt64(10, this.timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrivateParametersWithoutAsk {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrivateParametersWithoutAsk();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.transparent_from_address = reader.readBytes();
                        break;
                    case 2:
                        message.ak = reader.readBytes();
                        break;
                    case 3:
                        message.nsk = reader.readBytes();
                        break;
                    case 4:
                        message.ovk = reader.readBytes();
                        break;
                    case 5:
                        message.from_amount = reader.readInt64();
                        break;
                    case 6:
                        reader.readMessage(message.shielded_spends, () => pb_1.Message.addToRepeatedWrapperField(message, 6, SpendNote.deserialize(reader), SpendNote));
                        break;
                    case 7:
                        reader.readMessage(message.shielded_receives, () => pb_1.Message.addToRepeatedWrapperField(message, 7, ReceiveNote.deserialize(reader), ReceiveNote));
                        break;
                    case 8:
                        message.transparent_to_address = reader.readBytes();
                        break;
                    case 9:
                        message.to_amount = reader.readInt64();
                        break;
                    case 10:
                        message.timeout = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrivateParametersWithoutAsk {
            return PrivateParametersWithoutAsk.deserialize(bytes);
        }
    }
    export class SpendAuthSigParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ask?: Uint8Array;
            tx_hash?: Uint8Array;
            alpha?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ask" in data && data.ask != undefined) {
                    this.ask = data.ask;
                }
                if ("tx_hash" in data && data.tx_hash != undefined) {
                    this.tx_hash = data.tx_hash;
                }
                if ("alpha" in data && data.alpha != undefined) {
                    this.alpha = data.alpha;
                }
            }
        }
        get ask() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ask(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get tx_hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set tx_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get alpha() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set alpha(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            ask?: Uint8Array;
            tx_hash?: Uint8Array;
            alpha?: Uint8Array;
        }): SpendAuthSigParameters {
            const message = new SpendAuthSigParameters({});
            if (data.ask != null) {
                message.ask = data.ask;
            }
            if (data.tx_hash != null) {
                message.tx_hash = data.tx_hash;
            }
            if (data.alpha != null) {
                message.alpha = data.alpha;
            }
            return message;
        }
        toObject() {
            const data: {
                ask?: Uint8Array;
                tx_hash?: Uint8Array;
                alpha?: Uint8Array;
            } = {};
            if (this.ask != null) {
                data.ask = this.ask;
            }
            if (this.tx_hash != null) {
                data.tx_hash = this.tx_hash;
            }
            if (this.alpha != null) {
                data.alpha = this.alpha;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ask.length)
                writer.writeBytes(1, this.ask);
            if (this.tx_hash.length)
                writer.writeBytes(2, this.tx_hash);
            if (this.alpha.length)
                writer.writeBytes(3, this.alpha);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpendAuthSigParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpendAuthSigParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ask = reader.readBytes();
                        break;
                    case 2:
                        message.tx_hash = reader.readBytes();
                        break;
                    case 3:
                        message.alpha = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SpendAuthSigParameters {
            return SpendAuthSigParameters.deserialize(bytes);
        }
    }
    export class NfParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            note?: Note;
            voucher?: dependency_11.protocol.IncrementalMerkleVoucher;
            ak?: Uint8Array;
            nk?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("note" in data && data.note != undefined) {
                    this.note = data.note;
                }
                if ("voucher" in data && data.voucher != undefined) {
                    this.voucher = data.voucher;
                }
                if ("ak" in data && data.ak != undefined) {
                    this.ak = data.ak;
                }
                if ("nk" in data && data.nk != undefined) {
                    this.nk = data.nk;
                }
            }
        }
        get note() {
            return pb_1.Message.getWrapperField(this, Note, 1) as Note;
        }
        set note(value: Note) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_note() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get voucher() {
            return pb_1.Message.getWrapperField(this, dependency_11.protocol.IncrementalMerkleVoucher, 2) as dependency_11.protocol.IncrementalMerkleVoucher;
        }
        set voucher(value: dependency_11.protocol.IncrementalMerkleVoucher) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_voucher() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ak() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set ak(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get nk() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set nk(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            note?: ReturnType<typeof Note.prototype.toObject>;
            voucher?: ReturnType<typeof dependency_11.protocol.IncrementalMerkleVoucher.prototype.toObject>;
            ak?: Uint8Array;
            nk?: Uint8Array;
        }): NfParameters {
            const message = new NfParameters({});
            if (data.note != null) {
                message.note = Note.fromObject(data.note);
            }
            if (data.voucher != null) {
                message.voucher = dependency_11.protocol.IncrementalMerkleVoucher.fromObject(data.voucher);
            }
            if (data.ak != null) {
                message.ak = data.ak;
            }
            if (data.nk != null) {
                message.nk = data.nk;
            }
            return message;
        }
        toObject() {
            const data: {
                note?: ReturnType<typeof Note.prototype.toObject>;
                voucher?: ReturnType<typeof dependency_11.protocol.IncrementalMerkleVoucher.prototype.toObject>;
                ak?: Uint8Array;
                nk?: Uint8Array;
            } = {};
            if (this.note != null) {
                data.note = this.note.toObject();
            }
            if (this.voucher != null) {
                data.voucher = this.voucher.toObject();
            }
            if (this.ak != null) {
                data.ak = this.ak;
            }
            if (this.nk != null) {
                data.nk = this.nk;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_note)
                writer.writeMessage(1, this.note, () => this.note.serialize(writer));
            if (this.has_voucher)
                writer.writeMessage(2, this.voucher, () => this.voucher.serialize(writer));
            if (this.ak.length)
                writer.writeBytes(3, this.ak);
            if (this.nk.length)
                writer.writeBytes(4, this.nk);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NfParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NfParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.note, () => message.note = Note.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.voucher, () => message.voucher = dependency_11.protocol.IncrementalMerkleVoucher.deserialize(reader));
                        break;
                    case 3:
                        message.ak = reader.readBytes();
                        break;
                    case 4:
                        message.nk = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NfParameters {
            return NfParameters.deserialize(bytes);
        }
    }
    export class ExpandedSpendingKeyMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ask?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ask" in data && data.ask != undefined) {
                    this.ask = data.ask;
                }
                if ("nsk" in data && data.nsk != undefined) {
                    this.nsk = data.nsk;
                }
                if ("ovk" in data && data.ovk != undefined) {
                    this.ovk = data.ovk;
                }
            }
        }
        get ask() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ask(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get nsk() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set nsk(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get ovk() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set ovk(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            ask?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
        }): ExpandedSpendingKeyMessage {
            const message = new ExpandedSpendingKeyMessage({});
            if (data.ask != null) {
                message.ask = data.ask;
            }
            if (data.nsk != null) {
                message.nsk = data.nsk;
            }
            if (data.ovk != null) {
                message.ovk = data.ovk;
            }
            return message;
        }
        toObject() {
            const data: {
                ask?: Uint8Array;
                nsk?: Uint8Array;
                ovk?: Uint8Array;
            } = {};
            if (this.ask != null) {
                data.ask = this.ask;
            }
            if (this.nsk != null) {
                data.nsk = this.nsk;
            }
            if (this.ovk != null) {
                data.ovk = this.ovk;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ask.length)
                writer.writeBytes(1, this.ask);
            if (this.nsk.length)
                writer.writeBytes(2, this.nsk);
            if (this.ovk.length)
                writer.writeBytes(3, this.ovk);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExpandedSpendingKeyMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExpandedSpendingKeyMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ask = reader.readBytes();
                        break;
                    case 2:
                        message.nsk = reader.readBytes();
                        break;
                    case 3:
                        message.ovk = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExpandedSpendingKeyMessage {
            return ExpandedSpendingKeyMessage.deserialize(bytes);
        }
    }
    export class ViewingKeyMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ak?: Uint8Array;
            nk?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ak" in data && data.ak != undefined) {
                    this.ak = data.ak;
                }
                if ("nk" in data && data.nk != undefined) {
                    this.nk = data.nk;
                }
            }
        }
        get ak() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ak(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get nk() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set nk(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ak?: Uint8Array;
            nk?: Uint8Array;
        }): ViewingKeyMessage {
            const message = new ViewingKeyMessage({});
            if (data.ak != null) {
                message.ak = data.ak;
            }
            if (data.nk != null) {
                message.nk = data.nk;
            }
            return message;
        }
        toObject() {
            const data: {
                ak?: Uint8Array;
                nk?: Uint8Array;
            } = {};
            if (this.ak != null) {
                data.ak = this.ak;
            }
            if (this.nk != null) {
                data.nk = this.nk;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ak.length)
                writer.writeBytes(1, this.ak);
            if (this.nk.length)
                writer.writeBytes(2, this.nk);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ViewingKeyMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ViewingKeyMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ak = reader.readBytes();
                        break;
                    case 2:
                        message.nk = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ViewingKeyMessage {
            return ViewingKeyMessage.deserialize(bytes);
        }
    }
    export class IncomingViewingKeyMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ivk?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ivk" in data && data.ivk != undefined) {
                    this.ivk = data.ivk;
                }
            }
        }
        get ivk() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ivk(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ivk?: Uint8Array;
        }): IncomingViewingKeyMessage {
            const message = new IncomingViewingKeyMessage({});
            if (data.ivk != null) {
                message.ivk = data.ivk;
            }
            return message;
        }
        toObject() {
            const data: {
                ivk?: Uint8Array;
            } = {};
            if (this.ivk != null) {
                data.ivk = this.ivk;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ivk.length)
                writer.writeBytes(1, this.ivk);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IncomingViewingKeyMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IncomingViewingKeyMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ivk = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IncomingViewingKeyMessage {
            return IncomingViewingKeyMessage.deserialize(bytes);
        }
    }
    export class DiversifierMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            d?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("d" in data && data.d != undefined) {
                    this.d = data.d;
                }
            }
        }
        get d() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set d(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            d?: Uint8Array;
        }): DiversifierMessage {
            const message = new DiversifierMessage({});
            if (data.d != null) {
                message.d = data.d;
            }
            return message;
        }
        toObject() {
            const data: {
                d?: Uint8Array;
            } = {};
            if (this.d != null) {
                data.d = this.d;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.d.length)
                writer.writeBytes(1, this.d);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiversifierMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiversifierMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.d = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiversifierMessage {
            return DiversifierMessage.deserialize(bytes);
        }
    }
    export class IncomingViewingKeyDiversifierMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ivk?: IncomingViewingKeyMessage;
            d?: DiversifierMessage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ivk" in data && data.ivk != undefined) {
                    this.ivk = data.ivk;
                }
                if ("d" in data && data.d != undefined) {
                    this.d = data.d;
                }
            }
        }
        get ivk() {
            return pb_1.Message.getWrapperField(this, IncomingViewingKeyMessage, 1) as IncomingViewingKeyMessage;
        }
        set ivk(value: IncomingViewingKeyMessage) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_ivk() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get d() {
            return pb_1.Message.getWrapperField(this, DiversifierMessage, 2) as DiversifierMessage;
        }
        set d(value: DiversifierMessage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_d() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            ivk?: ReturnType<typeof IncomingViewingKeyMessage.prototype.toObject>;
            d?: ReturnType<typeof DiversifierMessage.prototype.toObject>;
        }): IncomingViewingKeyDiversifierMessage {
            const message = new IncomingViewingKeyDiversifierMessage({});
            if (data.ivk != null) {
                message.ivk = IncomingViewingKeyMessage.fromObject(data.ivk);
            }
            if (data.d != null) {
                message.d = DiversifierMessage.fromObject(data.d);
            }
            return message;
        }
        toObject() {
            const data: {
                ivk?: ReturnType<typeof IncomingViewingKeyMessage.prototype.toObject>;
                d?: ReturnType<typeof DiversifierMessage.prototype.toObject>;
            } = {};
            if (this.ivk != null) {
                data.ivk = this.ivk.toObject();
            }
            if (this.d != null) {
                data.d = this.d.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ivk)
                writer.writeMessage(1, this.ivk, () => this.ivk.serialize(writer));
            if (this.has_d)
                writer.writeMessage(2, this.d, () => this.d.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IncomingViewingKeyDiversifierMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IncomingViewingKeyDiversifierMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ivk, () => message.ivk = IncomingViewingKeyMessage.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.d, () => message.d = DiversifierMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IncomingViewingKeyDiversifierMessage {
            return IncomingViewingKeyDiversifierMessage.deserialize(bytes);
        }
    }
    export class PaymentAddressMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            d?: DiversifierMessage;
            pkD?: Uint8Array;
            payment_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("d" in data && data.d != undefined) {
                    this.d = data.d;
                }
                if ("pkD" in data && data.pkD != undefined) {
                    this.pkD = data.pkD;
                }
                if ("payment_address" in data && data.payment_address != undefined) {
                    this.payment_address = data.payment_address;
                }
            }
        }
        get d() {
            return pb_1.Message.getWrapperField(this, DiversifierMessage, 1) as DiversifierMessage;
        }
        set d(value: DiversifierMessage) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_d() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get pkD() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set pkD(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get payment_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set payment_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            d?: ReturnType<typeof DiversifierMessage.prototype.toObject>;
            pkD?: Uint8Array;
            payment_address?: string;
        }): PaymentAddressMessage {
            const message = new PaymentAddressMessage({});
            if (data.d != null) {
                message.d = DiversifierMessage.fromObject(data.d);
            }
            if (data.pkD != null) {
                message.pkD = data.pkD;
            }
            if (data.payment_address != null) {
                message.payment_address = data.payment_address;
            }
            return message;
        }
        toObject() {
            const data: {
                d?: ReturnType<typeof DiversifierMessage.prototype.toObject>;
                pkD?: Uint8Array;
                payment_address?: string;
            } = {};
            if (this.d != null) {
                data.d = this.d.toObject();
            }
            if (this.pkD != null) {
                data.pkD = this.pkD;
            }
            if (this.payment_address != null) {
                data.payment_address = this.payment_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_d)
                writer.writeMessage(1, this.d, () => this.d.serialize(writer));
            if (this.pkD.length)
                writer.writeBytes(2, this.pkD);
            if (this.payment_address.length)
                writer.writeString(3, this.payment_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaymentAddressMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PaymentAddressMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.d, () => message.d = DiversifierMessage.deserialize(reader));
                        break;
                    case 2:
                        message.pkD = reader.readBytes();
                        break;
                    case 3:
                        message.payment_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PaymentAddressMessage {
            return PaymentAddressMessage.deserialize(bytes);
        }
    }
    export class ShieldedAddressInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sk?: Uint8Array;
            ask?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
            ak?: Uint8Array;
            nk?: Uint8Array;
            ivk?: Uint8Array;
            d?: Uint8Array;
            pkD?: Uint8Array;
            payment_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sk" in data && data.sk != undefined) {
                    this.sk = data.sk;
                }
                if ("ask" in data && data.ask != undefined) {
                    this.ask = data.ask;
                }
                if ("nsk" in data && data.nsk != undefined) {
                    this.nsk = data.nsk;
                }
                if ("ovk" in data && data.ovk != undefined) {
                    this.ovk = data.ovk;
                }
                if ("ak" in data && data.ak != undefined) {
                    this.ak = data.ak;
                }
                if ("nk" in data && data.nk != undefined) {
                    this.nk = data.nk;
                }
                if ("ivk" in data && data.ivk != undefined) {
                    this.ivk = data.ivk;
                }
                if ("d" in data && data.d != undefined) {
                    this.d = data.d;
                }
                if ("pkD" in data && data.pkD != undefined) {
                    this.pkD = data.pkD;
                }
                if ("payment_address" in data && data.payment_address != undefined) {
                    this.payment_address = data.payment_address;
                }
            }
        }
        get sk() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set sk(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get ask() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set ask(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get nsk() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set nsk(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get ovk() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set ovk(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get ak() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set ak(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get nk() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set nk(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get ivk() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set ivk(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get d() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set d(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        get pkD() {
            return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
        }
        set pkD(value: Uint8Array) {
            pb_1.Message.setField(this, 9, value);
        }
        get payment_address() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set payment_address(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            sk?: Uint8Array;
            ask?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
            ak?: Uint8Array;
            nk?: Uint8Array;
            ivk?: Uint8Array;
            d?: Uint8Array;
            pkD?: Uint8Array;
            payment_address?: string;
        }): ShieldedAddressInfo {
            const message = new ShieldedAddressInfo({});
            if (data.sk != null) {
                message.sk = data.sk;
            }
            if (data.ask != null) {
                message.ask = data.ask;
            }
            if (data.nsk != null) {
                message.nsk = data.nsk;
            }
            if (data.ovk != null) {
                message.ovk = data.ovk;
            }
            if (data.ak != null) {
                message.ak = data.ak;
            }
            if (data.nk != null) {
                message.nk = data.nk;
            }
            if (data.ivk != null) {
                message.ivk = data.ivk;
            }
            if (data.d != null) {
                message.d = data.d;
            }
            if (data.pkD != null) {
                message.pkD = data.pkD;
            }
            if (data.payment_address != null) {
                message.payment_address = data.payment_address;
            }
            return message;
        }
        toObject() {
            const data: {
                sk?: Uint8Array;
                ask?: Uint8Array;
                nsk?: Uint8Array;
                ovk?: Uint8Array;
                ak?: Uint8Array;
                nk?: Uint8Array;
                ivk?: Uint8Array;
                d?: Uint8Array;
                pkD?: Uint8Array;
                payment_address?: string;
            } = {};
            if (this.sk != null) {
                data.sk = this.sk;
            }
            if (this.ask != null) {
                data.ask = this.ask;
            }
            if (this.nsk != null) {
                data.nsk = this.nsk;
            }
            if (this.ovk != null) {
                data.ovk = this.ovk;
            }
            if (this.ak != null) {
                data.ak = this.ak;
            }
            if (this.nk != null) {
                data.nk = this.nk;
            }
            if (this.ivk != null) {
                data.ivk = this.ivk;
            }
            if (this.d != null) {
                data.d = this.d;
            }
            if (this.pkD != null) {
                data.pkD = this.pkD;
            }
            if (this.payment_address != null) {
                data.payment_address = this.payment_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sk.length)
                writer.writeBytes(1, this.sk);
            if (this.ask.length)
                writer.writeBytes(2, this.ask);
            if (this.nsk.length)
                writer.writeBytes(3, this.nsk);
            if (this.ovk.length)
                writer.writeBytes(4, this.ovk);
            if (this.ak.length)
                writer.writeBytes(5, this.ak);
            if (this.nk.length)
                writer.writeBytes(6, this.nk);
            if (this.ivk.length)
                writer.writeBytes(7, this.ivk);
            if (this.d.length)
                writer.writeBytes(8, this.d);
            if (this.pkD.length)
                writer.writeBytes(9, this.pkD);
            if (this.payment_address.length)
                writer.writeString(10, this.payment_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShieldedAddressInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShieldedAddressInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sk = reader.readBytes();
                        break;
                    case 2:
                        message.ask = reader.readBytes();
                        break;
                    case 3:
                        message.nsk = reader.readBytes();
                        break;
                    case 4:
                        message.ovk = reader.readBytes();
                        break;
                    case 5:
                        message.ak = reader.readBytes();
                        break;
                    case 6:
                        message.nk = reader.readBytes();
                        break;
                    case 7:
                        message.ivk = reader.readBytes();
                        break;
                    case 8:
                        message.d = reader.readBytes();
                        break;
                    case 9:
                        message.pkD = reader.readBytes();
                        break;
                    case 10:
                        message.payment_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShieldedAddressInfo {
            return ShieldedAddressInfo.deserialize(bytes);
        }
    }
    export class NoteParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ak?: Uint8Array;
            nk?: Uint8Array;
            note?: Note;
            txid?: Uint8Array;
            index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ak" in data && data.ak != undefined) {
                    this.ak = data.ak;
                }
                if ("nk" in data && data.nk != undefined) {
                    this.nk = data.nk;
                }
                if ("note" in data && data.note != undefined) {
                    this.note = data.note;
                }
                if ("txid" in data && data.txid != undefined) {
                    this.txid = data.txid;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get ak() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ak(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get nk() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set nk(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get note() {
            return pb_1.Message.getWrapperField(this, Note, 3) as Note;
        }
        set note(value: Note) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_note() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get txid() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set txid(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ak?: Uint8Array;
            nk?: Uint8Array;
            note?: ReturnType<typeof Note.prototype.toObject>;
            txid?: Uint8Array;
            index?: number;
        }): NoteParameters {
            const message = new NoteParameters({});
            if (data.ak != null) {
                message.ak = data.ak;
            }
            if (data.nk != null) {
                message.nk = data.nk;
            }
            if (data.note != null) {
                message.note = Note.fromObject(data.note);
            }
            if (data.txid != null) {
                message.txid = data.txid;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                ak?: Uint8Array;
                nk?: Uint8Array;
                note?: ReturnType<typeof Note.prototype.toObject>;
                txid?: Uint8Array;
                index?: number;
            } = {};
            if (this.ak != null) {
                data.ak = this.ak;
            }
            if (this.nk != null) {
                data.nk = this.nk;
            }
            if (this.note != null) {
                data.note = this.note.toObject();
            }
            if (this.txid != null) {
                data.txid = this.txid;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ak.length)
                writer.writeBytes(1, this.ak);
            if (this.nk.length)
                writer.writeBytes(2, this.nk);
            if (this.has_note)
                writer.writeMessage(3, this.note, () => this.note.serialize(writer));
            if (this.txid.length)
                writer.writeBytes(4, this.txid);
            if (this.index != 0)
                writer.writeInt32(5, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NoteParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NoteParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ak = reader.readBytes();
                        break;
                    case 2:
                        message.nk = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.note, () => message.note = Note.deserialize(reader));
                        break;
                    case 4:
                        message.txid = reader.readBytes();
                        break;
                    case 5:
                        message.index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NoteParameters {
            return NoteParameters.deserialize(bytes);
        }
    }
    export class SpendResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set result(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            result?: boolean;
            message?: string;
        }): SpendResult {
            const message = new SpendResult({});
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: boolean;
                message?: string;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result != false)
                writer.writeBool(1, this.result);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpendResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpendResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SpendResult {
            return SpendResult.deserialize(bytes);
        }
    }
    export class TransactionInfoList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transactionInfo?: dependency_1.protocol.TransactionInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactionInfo" in data && data.transactionInfo != undefined) {
                    this.transactionInfo = data.transactionInfo;
                }
            }
        }
        get transactionInfo() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.protocol.TransactionInfo, 1) as dependency_1.protocol.TransactionInfo[];
        }
        set transactionInfo(value: dependency_1.protocol.TransactionInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transactionInfo?: ReturnType<typeof dependency_1.protocol.TransactionInfo.prototype.toObject>[];
        }): TransactionInfoList {
            const message = new TransactionInfoList({});
            if (data.transactionInfo != null) {
                message.transactionInfo = data.transactionInfo.map(item => dependency_1.protocol.TransactionInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transactionInfo?: ReturnType<typeof dependency_1.protocol.TransactionInfo.prototype.toObject>[];
            } = {};
            if (this.transactionInfo != null) {
                data.transactionInfo = this.transactionInfo.map((item: dependency_1.protocol.TransactionInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transactionInfo.length)
                writer.writeRepeatedMessage(1, this.transactionInfo, (item: dependency_1.protocol.TransactionInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionInfoList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionInfoList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactionInfo, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.protocol.TransactionInfo.deserialize(reader), dependency_1.protocol.TransactionInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionInfoList {
            return TransactionInfoList.deserialize(bytes);
        }
    }
    export class SpendNoteTRC20 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            note?: Note;
            alpha?: Uint8Array;
            root?: Uint8Array;
            path?: Uint8Array;
            pos?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("note" in data && data.note != undefined) {
                    this.note = data.note;
                }
                if ("alpha" in data && data.alpha != undefined) {
                    this.alpha = data.alpha;
                }
                if ("root" in data && data.root != undefined) {
                    this.root = data.root;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("pos" in data && data.pos != undefined) {
                    this.pos = data.pos;
                }
            }
        }
        get note() {
            return pb_1.Message.getWrapperField(this, Note, 1) as Note;
        }
        set note(value: Note) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_note() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get alpha() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set alpha(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get root() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set root(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set path(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get pos() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set pos(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            note?: ReturnType<typeof Note.prototype.toObject>;
            alpha?: Uint8Array;
            root?: Uint8Array;
            path?: Uint8Array;
            pos?: number;
        }): SpendNoteTRC20 {
            const message = new SpendNoteTRC20({});
            if (data.note != null) {
                message.note = Note.fromObject(data.note);
            }
            if (data.alpha != null) {
                message.alpha = data.alpha;
            }
            if (data.root != null) {
                message.root = data.root;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.pos != null) {
                message.pos = data.pos;
            }
            return message;
        }
        toObject() {
            const data: {
                note?: ReturnType<typeof Note.prototype.toObject>;
                alpha?: Uint8Array;
                root?: Uint8Array;
                path?: Uint8Array;
                pos?: number;
            } = {};
            if (this.note != null) {
                data.note = this.note.toObject();
            }
            if (this.alpha != null) {
                data.alpha = this.alpha;
            }
            if (this.root != null) {
                data.root = this.root;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.pos != null) {
                data.pos = this.pos;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_note)
                writer.writeMessage(1, this.note, () => this.note.serialize(writer));
            if (this.alpha.length)
                writer.writeBytes(2, this.alpha);
            if (this.root.length)
                writer.writeBytes(3, this.root);
            if (this.path.length)
                writer.writeBytes(4, this.path);
            if (this.pos != 0)
                writer.writeInt64(5, this.pos);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpendNoteTRC20 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpendNoteTRC20();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.note, () => message.note = Note.deserialize(reader));
                        break;
                    case 2:
                        message.alpha = reader.readBytes();
                        break;
                    case 3:
                        message.root = reader.readBytes();
                        break;
                    case 4:
                        message.path = reader.readBytes();
                        break;
                    case 5:
                        message.pos = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SpendNoteTRC20 {
            return SpendNoteTRC20.deserialize(bytes);
        }
    }
    export class PrivateShieldedTRC20Parameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ask?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
            from_amount?: string;
            shielded_spends?: SpendNoteTRC20[];
            shielded_receives?: ReceiveNote[];
            transparent_to_address?: Uint8Array;
            to_amount?: string;
            shielded_TRC20_contract_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ask" in data && data.ask != undefined) {
                    this.ask = data.ask;
                }
                if ("nsk" in data && data.nsk != undefined) {
                    this.nsk = data.nsk;
                }
                if ("ovk" in data && data.ovk != undefined) {
                    this.ovk = data.ovk;
                }
                if ("from_amount" in data && data.from_amount != undefined) {
                    this.from_amount = data.from_amount;
                }
                if ("shielded_spends" in data && data.shielded_spends != undefined) {
                    this.shielded_spends = data.shielded_spends;
                }
                if ("shielded_receives" in data && data.shielded_receives != undefined) {
                    this.shielded_receives = data.shielded_receives;
                }
                if ("transparent_to_address" in data && data.transparent_to_address != undefined) {
                    this.transparent_to_address = data.transparent_to_address;
                }
                if ("to_amount" in data && data.to_amount != undefined) {
                    this.to_amount = data.to_amount;
                }
                if ("shielded_TRC20_contract_address" in data && data.shielded_TRC20_contract_address != undefined) {
                    this.shielded_TRC20_contract_address = data.shielded_TRC20_contract_address;
                }
            }
        }
        get ask() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ask(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get nsk() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set nsk(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get ovk() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set ovk(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get from_amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set from_amount(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get shielded_spends() {
            return pb_1.Message.getRepeatedWrapperField(this, SpendNoteTRC20, 5) as SpendNoteTRC20[];
        }
        set shielded_spends(value: SpendNoteTRC20[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get shielded_receives() {
            return pb_1.Message.getRepeatedWrapperField(this, ReceiveNote, 6) as ReceiveNote[];
        }
        set shielded_receives(value: ReceiveNote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get transparent_to_address() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set transparent_to_address(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get to_amount() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set to_amount(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get shielded_TRC20_contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
        }
        set shielded_TRC20_contract_address(value: Uint8Array) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            ask?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
            from_amount?: string;
            shielded_spends?: ReturnType<typeof SpendNoteTRC20.prototype.toObject>[];
            shielded_receives?: ReturnType<typeof ReceiveNote.prototype.toObject>[];
            transparent_to_address?: Uint8Array;
            to_amount?: string;
            shielded_TRC20_contract_address?: Uint8Array;
        }): PrivateShieldedTRC20Parameters {
            const message = new PrivateShieldedTRC20Parameters({});
            if (data.ask != null) {
                message.ask = data.ask;
            }
            if (data.nsk != null) {
                message.nsk = data.nsk;
            }
            if (data.ovk != null) {
                message.ovk = data.ovk;
            }
            if (data.from_amount != null) {
                message.from_amount = data.from_amount;
            }
            if (data.shielded_spends != null) {
                message.shielded_spends = data.shielded_spends.map(item => SpendNoteTRC20.fromObject(item));
            }
            if (data.shielded_receives != null) {
                message.shielded_receives = data.shielded_receives.map(item => ReceiveNote.fromObject(item));
            }
            if (data.transparent_to_address != null) {
                message.transparent_to_address = data.transparent_to_address;
            }
            if (data.to_amount != null) {
                message.to_amount = data.to_amount;
            }
            if (data.shielded_TRC20_contract_address != null) {
                message.shielded_TRC20_contract_address = data.shielded_TRC20_contract_address;
            }
            return message;
        }
        toObject() {
            const data: {
                ask?: Uint8Array;
                nsk?: Uint8Array;
                ovk?: Uint8Array;
                from_amount?: string;
                shielded_spends?: ReturnType<typeof SpendNoteTRC20.prototype.toObject>[];
                shielded_receives?: ReturnType<typeof ReceiveNote.prototype.toObject>[];
                transparent_to_address?: Uint8Array;
                to_amount?: string;
                shielded_TRC20_contract_address?: Uint8Array;
            } = {};
            if (this.ask != null) {
                data.ask = this.ask;
            }
            if (this.nsk != null) {
                data.nsk = this.nsk;
            }
            if (this.ovk != null) {
                data.ovk = this.ovk;
            }
            if (this.from_amount != null) {
                data.from_amount = this.from_amount;
            }
            if (this.shielded_spends != null) {
                data.shielded_spends = this.shielded_spends.map((item: SpendNoteTRC20) => item.toObject());
            }
            if (this.shielded_receives != null) {
                data.shielded_receives = this.shielded_receives.map((item: ReceiveNote) => item.toObject());
            }
            if (this.transparent_to_address != null) {
                data.transparent_to_address = this.transparent_to_address;
            }
            if (this.to_amount != null) {
                data.to_amount = this.to_amount;
            }
            if (this.shielded_TRC20_contract_address != null) {
                data.shielded_TRC20_contract_address = this.shielded_TRC20_contract_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ask.length)
                writer.writeBytes(1, this.ask);
            if (this.nsk.length)
                writer.writeBytes(2, this.nsk);
            if (this.ovk.length)
                writer.writeBytes(3, this.ovk);
            if (this.from_amount.length)
                writer.writeString(4, this.from_amount);
            if (this.shielded_spends.length)
                writer.writeRepeatedMessage(5, this.shielded_spends, (item: SpendNoteTRC20) => item.serialize(writer));
            if (this.shielded_receives.length)
                writer.writeRepeatedMessage(6, this.shielded_receives, (item: ReceiveNote) => item.serialize(writer));
            if (this.transparent_to_address.length)
                writer.writeBytes(7, this.transparent_to_address);
            if (this.to_amount.length)
                writer.writeString(8, this.to_amount);
            if (this.shielded_TRC20_contract_address.length)
                writer.writeBytes(9, this.shielded_TRC20_contract_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrivateShieldedTRC20Parameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrivateShieldedTRC20Parameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ask = reader.readBytes();
                        break;
                    case 2:
                        message.nsk = reader.readBytes();
                        break;
                    case 3:
                        message.ovk = reader.readBytes();
                        break;
                    case 4:
                        message.from_amount = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.shielded_spends, () => pb_1.Message.addToRepeatedWrapperField(message, 5, SpendNoteTRC20.deserialize(reader), SpendNoteTRC20));
                        break;
                    case 6:
                        reader.readMessage(message.shielded_receives, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ReceiveNote.deserialize(reader), ReceiveNote));
                        break;
                    case 7:
                        message.transparent_to_address = reader.readBytes();
                        break;
                    case 8:
                        message.to_amount = reader.readString();
                        break;
                    case 9:
                        message.shielded_TRC20_contract_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrivateShieldedTRC20Parameters {
            return PrivateShieldedTRC20Parameters.deserialize(bytes);
        }
    }
    export class PrivateShieldedTRC20ParametersWithoutAsk extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ak?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
            from_amount?: string;
            shielded_spends?: SpendNoteTRC20[];
            shielded_receives?: ReceiveNote[];
            transparent_to_address?: Uint8Array;
            to_amount?: string;
            shielded_TRC20_contract_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ak" in data && data.ak != undefined) {
                    this.ak = data.ak;
                }
                if ("nsk" in data && data.nsk != undefined) {
                    this.nsk = data.nsk;
                }
                if ("ovk" in data && data.ovk != undefined) {
                    this.ovk = data.ovk;
                }
                if ("from_amount" in data && data.from_amount != undefined) {
                    this.from_amount = data.from_amount;
                }
                if ("shielded_spends" in data && data.shielded_spends != undefined) {
                    this.shielded_spends = data.shielded_spends;
                }
                if ("shielded_receives" in data && data.shielded_receives != undefined) {
                    this.shielded_receives = data.shielded_receives;
                }
                if ("transparent_to_address" in data && data.transparent_to_address != undefined) {
                    this.transparent_to_address = data.transparent_to_address;
                }
                if ("to_amount" in data && data.to_amount != undefined) {
                    this.to_amount = data.to_amount;
                }
                if ("shielded_TRC20_contract_address" in data && data.shielded_TRC20_contract_address != undefined) {
                    this.shielded_TRC20_contract_address = data.shielded_TRC20_contract_address;
                }
            }
        }
        get ak() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ak(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get nsk() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set nsk(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get ovk() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set ovk(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get from_amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set from_amount(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get shielded_spends() {
            return pb_1.Message.getRepeatedWrapperField(this, SpendNoteTRC20, 5) as SpendNoteTRC20[];
        }
        set shielded_spends(value: SpendNoteTRC20[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get shielded_receives() {
            return pb_1.Message.getRepeatedWrapperField(this, ReceiveNote, 6) as ReceiveNote[];
        }
        set shielded_receives(value: ReceiveNote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get transparent_to_address() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set transparent_to_address(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get to_amount() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set to_amount(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get shielded_TRC20_contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
        }
        set shielded_TRC20_contract_address(value: Uint8Array) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            ak?: Uint8Array;
            nsk?: Uint8Array;
            ovk?: Uint8Array;
            from_amount?: string;
            shielded_spends?: ReturnType<typeof SpendNoteTRC20.prototype.toObject>[];
            shielded_receives?: ReturnType<typeof ReceiveNote.prototype.toObject>[];
            transparent_to_address?: Uint8Array;
            to_amount?: string;
            shielded_TRC20_contract_address?: Uint8Array;
        }): PrivateShieldedTRC20ParametersWithoutAsk {
            const message = new PrivateShieldedTRC20ParametersWithoutAsk({});
            if (data.ak != null) {
                message.ak = data.ak;
            }
            if (data.nsk != null) {
                message.nsk = data.nsk;
            }
            if (data.ovk != null) {
                message.ovk = data.ovk;
            }
            if (data.from_amount != null) {
                message.from_amount = data.from_amount;
            }
            if (data.shielded_spends != null) {
                message.shielded_spends = data.shielded_spends.map(item => SpendNoteTRC20.fromObject(item));
            }
            if (data.shielded_receives != null) {
                message.shielded_receives = data.shielded_receives.map(item => ReceiveNote.fromObject(item));
            }
            if (data.transparent_to_address != null) {
                message.transparent_to_address = data.transparent_to_address;
            }
            if (data.to_amount != null) {
                message.to_amount = data.to_amount;
            }
            if (data.shielded_TRC20_contract_address != null) {
                message.shielded_TRC20_contract_address = data.shielded_TRC20_contract_address;
            }
            return message;
        }
        toObject() {
            const data: {
                ak?: Uint8Array;
                nsk?: Uint8Array;
                ovk?: Uint8Array;
                from_amount?: string;
                shielded_spends?: ReturnType<typeof SpendNoteTRC20.prototype.toObject>[];
                shielded_receives?: ReturnType<typeof ReceiveNote.prototype.toObject>[];
                transparent_to_address?: Uint8Array;
                to_amount?: string;
                shielded_TRC20_contract_address?: Uint8Array;
            } = {};
            if (this.ak != null) {
                data.ak = this.ak;
            }
            if (this.nsk != null) {
                data.nsk = this.nsk;
            }
            if (this.ovk != null) {
                data.ovk = this.ovk;
            }
            if (this.from_amount != null) {
                data.from_amount = this.from_amount;
            }
            if (this.shielded_spends != null) {
                data.shielded_spends = this.shielded_spends.map((item: SpendNoteTRC20) => item.toObject());
            }
            if (this.shielded_receives != null) {
                data.shielded_receives = this.shielded_receives.map((item: ReceiveNote) => item.toObject());
            }
            if (this.transparent_to_address != null) {
                data.transparent_to_address = this.transparent_to_address;
            }
            if (this.to_amount != null) {
                data.to_amount = this.to_amount;
            }
            if (this.shielded_TRC20_contract_address != null) {
                data.shielded_TRC20_contract_address = this.shielded_TRC20_contract_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ak.length)
                writer.writeBytes(1, this.ak);
            if (this.nsk.length)
                writer.writeBytes(2, this.nsk);
            if (this.ovk.length)
                writer.writeBytes(3, this.ovk);
            if (this.from_amount.length)
                writer.writeString(4, this.from_amount);
            if (this.shielded_spends.length)
                writer.writeRepeatedMessage(5, this.shielded_spends, (item: SpendNoteTRC20) => item.serialize(writer));
            if (this.shielded_receives.length)
                writer.writeRepeatedMessage(6, this.shielded_receives, (item: ReceiveNote) => item.serialize(writer));
            if (this.transparent_to_address.length)
                writer.writeBytes(7, this.transparent_to_address);
            if (this.to_amount.length)
                writer.writeString(8, this.to_amount);
            if (this.shielded_TRC20_contract_address.length)
                writer.writeBytes(9, this.shielded_TRC20_contract_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrivateShieldedTRC20ParametersWithoutAsk {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrivateShieldedTRC20ParametersWithoutAsk();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ak = reader.readBytes();
                        break;
                    case 2:
                        message.nsk = reader.readBytes();
                        break;
                    case 3:
                        message.ovk = reader.readBytes();
                        break;
                    case 4:
                        message.from_amount = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.shielded_spends, () => pb_1.Message.addToRepeatedWrapperField(message, 5, SpendNoteTRC20.deserialize(reader), SpendNoteTRC20));
                        break;
                    case 6:
                        reader.readMessage(message.shielded_receives, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ReceiveNote.deserialize(reader), ReceiveNote));
                        break;
                    case 7:
                        message.transparent_to_address = reader.readBytes();
                        break;
                    case 8:
                        message.to_amount = reader.readString();
                        break;
                    case 9:
                        message.shielded_TRC20_contract_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrivateShieldedTRC20ParametersWithoutAsk {
            return PrivateShieldedTRC20ParametersWithoutAsk.deserialize(bytes);
        }
    }
    export class ShieldedTRC20Parameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            spend_description?: dependency_11.protocol.SpendDescription[];
            receive_description?: dependency_11.protocol.ReceiveDescription[];
            binding_signature?: Uint8Array;
            message_hash?: Uint8Array;
            trigger_contract_input?: string;
            parameter_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("spend_description" in data && data.spend_description != undefined) {
                    this.spend_description = data.spend_description;
                }
                if ("receive_description" in data && data.receive_description != undefined) {
                    this.receive_description = data.receive_description;
                }
                if ("binding_signature" in data && data.binding_signature != undefined) {
                    this.binding_signature = data.binding_signature;
                }
                if ("message_hash" in data && data.message_hash != undefined) {
                    this.message_hash = data.message_hash;
                }
                if ("trigger_contract_input" in data && data.trigger_contract_input != undefined) {
                    this.trigger_contract_input = data.trigger_contract_input;
                }
                if ("parameter_type" in data && data.parameter_type != undefined) {
                    this.parameter_type = data.parameter_type;
                }
            }
        }
        get spend_description() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_11.protocol.SpendDescription, 1) as dependency_11.protocol.SpendDescription[];
        }
        set spend_description(value: dependency_11.protocol.SpendDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get receive_description() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_11.protocol.ReceiveDescription, 2) as dependency_11.protocol.ReceiveDescription[];
        }
        set receive_description(value: dependency_11.protocol.ReceiveDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get binding_signature() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set binding_signature(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get message_hash() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set message_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get trigger_contract_input() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set trigger_contract_input(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get parameter_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set parameter_type(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            spend_description?: ReturnType<typeof dependency_11.protocol.SpendDescription.prototype.toObject>[];
            receive_description?: ReturnType<typeof dependency_11.protocol.ReceiveDescription.prototype.toObject>[];
            binding_signature?: Uint8Array;
            message_hash?: Uint8Array;
            trigger_contract_input?: string;
            parameter_type?: string;
        }): ShieldedTRC20Parameters {
            const message = new ShieldedTRC20Parameters({});
            if (data.spend_description != null) {
                message.spend_description = data.spend_description.map(item => dependency_11.protocol.SpendDescription.fromObject(item));
            }
            if (data.receive_description != null) {
                message.receive_description = data.receive_description.map(item => dependency_11.protocol.ReceiveDescription.fromObject(item));
            }
            if (data.binding_signature != null) {
                message.binding_signature = data.binding_signature;
            }
            if (data.message_hash != null) {
                message.message_hash = data.message_hash;
            }
            if (data.trigger_contract_input != null) {
                message.trigger_contract_input = data.trigger_contract_input;
            }
            if (data.parameter_type != null) {
                message.parameter_type = data.parameter_type;
            }
            return message;
        }
        toObject() {
            const data: {
                spend_description?: ReturnType<typeof dependency_11.protocol.SpendDescription.prototype.toObject>[];
                receive_description?: ReturnType<typeof dependency_11.protocol.ReceiveDescription.prototype.toObject>[];
                binding_signature?: Uint8Array;
                message_hash?: Uint8Array;
                trigger_contract_input?: string;
                parameter_type?: string;
            } = {};
            if (this.spend_description != null) {
                data.spend_description = this.spend_description.map((item: dependency_11.protocol.SpendDescription) => item.toObject());
            }
            if (this.receive_description != null) {
                data.receive_description = this.receive_description.map((item: dependency_11.protocol.ReceiveDescription) => item.toObject());
            }
            if (this.binding_signature != null) {
                data.binding_signature = this.binding_signature;
            }
            if (this.message_hash != null) {
                data.message_hash = this.message_hash;
            }
            if (this.trigger_contract_input != null) {
                data.trigger_contract_input = this.trigger_contract_input;
            }
            if (this.parameter_type != null) {
                data.parameter_type = this.parameter_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.spend_description.length)
                writer.writeRepeatedMessage(1, this.spend_description, (item: dependency_11.protocol.SpendDescription) => item.serialize(writer));
            if (this.receive_description.length)
                writer.writeRepeatedMessage(2, this.receive_description, (item: dependency_11.protocol.ReceiveDescription) => item.serialize(writer));
            if (this.binding_signature.length)
                writer.writeBytes(3, this.binding_signature);
            if (this.message_hash.length)
                writer.writeBytes(4, this.message_hash);
            if (this.trigger_contract_input.length)
                writer.writeString(5, this.trigger_contract_input);
            if (this.parameter_type.length)
                writer.writeString(6, this.parameter_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShieldedTRC20Parameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShieldedTRC20Parameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.spend_description, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_11.protocol.SpendDescription.deserialize(reader), dependency_11.protocol.SpendDescription));
                        break;
                    case 2:
                        reader.readMessage(message.receive_description, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_11.protocol.ReceiveDescription.deserialize(reader), dependency_11.protocol.ReceiveDescription));
                        break;
                    case 3:
                        message.binding_signature = reader.readBytes();
                        break;
                    case 4:
                        message.message_hash = reader.readBytes();
                        break;
                    case 5:
                        message.trigger_contract_input = reader.readString();
                        break;
                    case 6:
                        message.parameter_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShieldedTRC20Parameters {
            return ShieldedTRC20Parameters.deserialize(bytes);
        }
    }
    export class IvkDecryptTRC20Parameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_block_index?: number;
            end_block_index?: number;
            shielded_TRC20_contract_address?: Uint8Array;
            ivk?: Uint8Array;
            ak?: Uint8Array;
            nk?: Uint8Array;
            events?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_block_index" in data && data.start_block_index != undefined) {
                    this.start_block_index = data.start_block_index;
                }
                if ("end_block_index" in data && data.end_block_index != undefined) {
                    this.end_block_index = data.end_block_index;
                }
                if ("shielded_TRC20_contract_address" in data && data.shielded_TRC20_contract_address != undefined) {
                    this.shielded_TRC20_contract_address = data.shielded_TRC20_contract_address;
                }
                if ("ivk" in data && data.ivk != undefined) {
                    this.ivk = data.ivk;
                }
                if ("ak" in data && data.ak != undefined) {
                    this.ak = data.ak;
                }
                if ("nk" in data && data.nk != undefined) {
                    this.nk = data.nk;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get start_block_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start_block_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_block_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end_block_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get shielded_TRC20_contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set shielded_TRC20_contract_address(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get ivk() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set ivk(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get ak() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set ak(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get nk() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set nk(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get events() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set events(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            start_block_index?: number;
            end_block_index?: number;
            shielded_TRC20_contract_address?: Uint8Array;
            ivk?: Uint8Array;
            ak?: Uint8Array;
            nk?: Uint8Array;
            events?: string[];
        }): IvkDecryptTRC20Parameters {
            const message = new IvkDecryptTRC20Parameters({});
            if (data.start_block_index != null) {
                message.start_block_index = data.start_block_index;
            }
            if (data.end_block_index != null) {
                message.end_block_index = data.end_block_index;
            }
            if (data.shielded_TRC20_contract_address != null) {
                message.shielded_TRC20_contract_address = data.shielded_TRC20_contract_address;
            }
            if (data.ivk != null) {
                message.ivk = data.ivk;
            }
            if (data.ak != null) {
                message.ak = data.ak;
            }
            if (data.nk != null) {
                message.nk = data.nk;
            }
            if (data.events != null) {
                message.events = data.events;
            }
            return message;
        }
        toObject() {
            const data: {
                start_block_index?: number;
                end_block_index?: number;
                shielded_TRC20_contract_address?: Uint8Array;
                ivk?: Uint8Array;
                ak?: Uint8Array;
                nk?: Uint8Array;
                events?: string[];
            } = {};
            if (this.start_block_index != null) {
                data.start_block_index = this.start_block_index;
            }
            if (this.end_block_index != null) {
                data.end_block_index = this.end_block_index;
            }
            if (this.shielded_TRC20_contract_address != null) {
                data.shielded_TRC20_contract_address = this.shielded_TRC20_contract_address;
            }
            if (this.ivk != null) {
                data.ivk = this.ivk;
            }
            if (this.ak != null) {
                data.ak = this.ak;
            }
            if (this.nk != null) {
                data.nk = this.nk;
            }
            if (this.events != null) {
                data.events = this.events;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_block_index != 0)
                writer.writeInt64(1, this.start_block_index);
            if (this.end_block_index != 0)
                writer.writeInt64(2, this.end_block_index);
            if (this.shielded_TRC20_contract_address.length)
                writer.writeBytes(3, this.shielded_TRC20_contract_address);
            if (this.ivk.length)
                writer.writeBytes(4, this.ivk);
            if (this.ak.length)
                writer.writeBytes(5, this.ak);
            if (this.nk.length)
                writer.writeBytes(6, this.nk);
            if (this.events.length)
                writer.writeRepeatedString(7, this.events);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IvkDecryptTRC20Parameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IvkDecryptTRC20Parameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_block_index = reader.readInt64();
                        break;
                    case 2:
                        message.end_block_index = reader.readInt64();
                        break;
                    case 3:
                        message.shielded_TRC20_contract_address = reader.readBytes();
                        break;
                    case 4:
                        message.ivk = reader.readBytes();
                        break;
                    case 5:
                        message.ak = reader.readBytes();
                        break;
                    case 6:
                        message.nk = reader.readBytes();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IvkDecryptTRC20Parameters {
            return IvkDecryptTRC20Parameters.deserialize(bytes);
        }
    }
    export class OvkDecryptTRC20Parameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_block_index?: number;
            end_block_index?: number;
            ovk?: Uint8Array;
            shielded_TRC20_contract_address?: Uint8Array;
            events?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_block_index" in data && data.start_block_index != undefined) {
                    this.start_block_index = data.start_block_index;
                }
                if ("end_block_index" in data && data.end_block_index != undefined) {
                    this.end_block_index = data.end_block_index;
                }
                if ("ovk" in data && data.ovk != undefined) {
                    this.ovk = data.ovk;
                }
                if ("shielded_TRC20_contract_address" in data && data.shielded_TRC20_contract_address != undefined) {
                    this.shielded_TRC20_contract_address = data.shielded_TRC20_contract_address;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get start_block_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start_block_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_block_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end_block_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ovk() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set ovk(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get shielded_TRC20_contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set shielded_TRC20_contract_address(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get events() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set events(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            start_block_index?: number;
            end_block_index?: number;
            ovk?: Uint8Array;
            shielded_TRC20_contract_address?: Uint8Array;
            events?: string[];
        }): OvkDecryptTRC20Parameters {
            const message = new OvkDecryptTRC20Parameters({});
            if (data.start_block_index != null) {
                message.start_block_index = data.start_block_index;
            }
            if (data.end_block_index != null) {
                message.end_block_index = data.end_block_index;
            }
            if (data.ovk != null) {
                message.ovk = data.ovk;
            }
            if (data.shielded_TRC20_contract_address != null) {
                message.shielded_TRC20_contract_address = data.shielded_TRC20_contract_address;
            }
            if (data.events != null) {
                message.events = data.events;
            }
            return message;
        }
        toObject() {
            const data: {
                start_block_index?: number;
                end_block_index?: number;
                ovk?: Uint8Array;
                shielded_TRC20_contract_address?: Uint8Array;
                events?: string[];
            } = {};
            if (this.start_block_index != null) {
                data.start_block_index = this.start_block_index;
            }
            if (this.end_block_index != null) {
                data.end_block_index = this.end_block_index;
            }
            if (this.ovk != null) {
                data.ovk = this.ovk;
            }
            if (this.shielded_TRC20_contract_address != null) {
                data.shielded_TRC20_contract_address = this.shielded_TRC20_contract_address;
            }
            if (this.events != null) {
                data.events = this.events;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_block_index != 0)
                writer.writeInt64(1, this.start_block_index);
            if (this.end_block_index != 0)
                writer.writeInt64(2, this.end_block_index);
            if (this.ovk.length)
                writer.writeBytes(3, this.ovk);
            if (this.shielded_TRC20_contract_address.length)
                writer.writeBytes(4, this.shielded_TRC20_contract_address);
            if (this.events.length)
                writer.writeRepeatedString(5, this.events);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OvkDecryptTRC20Parameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OvkDecryptTRC20Parameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_block_index = reader.readInt64();
                        break;
                    case 2:
                        message.end_block_index = reader.readInt64();
                        break;
                    case 3:
                        message.ovk = reader.readBytes();
                        break;
                    case 4:
                        message.shielded_TRC20_contract_address = reader.readBytes();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OvkDecryptTRC20Parameters {
            return OvkDecryptTRC20Parameters.deserialize(bytes);
        }
    }
    export class DecryptNotesTRC20 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            noteTxs?: DecryptNotesTRC20.NoteTx[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("noteTxs" in data && data.noteTxs != undefined) {
                    this.noteTxs = data.noteTxs;
                }
            }
        }
        get noteTxs() {
            return pb_1.Message.getRepeatedWrapperField(this, DecryptNotesTRC20.NoteTx, 1) as DecryptNotesTRC20.NoteTx[];
        }
        set noteTxs(value: DecryptNotesTRC20.NoteTx[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            noteTxs?: ReturnType<typeof DecryptNotesTRC20.NoteTx.prototype.toObject>[];
        }): DecryptNotesTRC20 {
            const message = new DecryptNotesTRC20({});
            if (data.noteTxs != null) {
                message.noteTxs = data.noteTxs.map(item => DecryptNotesTRC20.NoteTx.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                noteTxs?: ReturnType<typeof DecryptNotesTRC20.NoteTx.prototype.toObject>[];
            } = {};
            if (this.noteTxs != null) {
                data.noteTxs = this.noteTxs.map((item: DecryptNotesTRC20.NoteTx) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.noteTxs.length)
                writer.writeRepeatedMessage(1, this.noteTxs, (item: DecryptNotesTRC20.NoteTx) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DecryptNotesTRC20 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DecryptNotesTRC20();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.noteTxs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DecryptNotesTRC20.NoteTx.deserialize(reader), DecryptNotesTRC20.NoteTx));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DecryptNotesTRC20 {
            return DecryptNotesTRC20.deserialize(bytes);
        }
    }
    export namespace DecryptNotesTRC20 {
        export class NoteTx extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                note?: Note;
                position?: number;
                is_spent?: boolean;
                txid?: Uint8Array;
                index?: number;
                to_amount?: string;
                transparent_to_address?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("note" in data && data.note != undefined) {
                        this.note = data.note;
                    }
                    if ("position" in data && data.position != undefined) {
                        this.position = data.position;
                    }
                    if ("is_spent" in data && data.is_spent != undefined) {
                        this.is_spent = data.is_spent;
                    }
                    if ("txid" in data && data.txid != undefined) {
                        this.txid = data.txid;
                    }
                    if ("index" in data && data.index != undefined) {
                        this.index = data.index;
                    }
                    if ("to_amount" in data && data.to_amount != undefined) {
                        this.to_amount = data.to_amount;
                    }
                    if ("transparent_to_address" in data && data.transparent_to_address != undefined) {
                        this.transparent_to_address = data.transparent_to_address;
                    }
                }
            }
            get note() {
                return pb_1.Message.getWrapperField(this, Note, 1) as Note;
            }
            set note(value: Note) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_note() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get position() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set position(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get is_spent() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set is_spent(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            get txid() {
                return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
            }
            set txid(value: Uint8Array) {
                pb_1.Message.setField(this, 4, value);
            }
            get index() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set index(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get to_amount() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set to_amount(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            get transparent_to_address() {
                return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
            }
            set transparent_to_address(value: Uint8Array) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                note?: ReturnType<typeof Note.prototype.toObject>;
                position?: number;
                is_spent?: boolean;
                txid?: Uint8Array;
                index?: number;
                to_amount?: string;
                transparent_to_address?: Uint8Array;
            }): NoteTx {
                const message = new NoteTx({});
                if (data.note != null) {
                    message.note = Note.fromObject(data.note);
                }
                if (data.position != null) {
                    message.position = data.position;
                }
                if (data.is_spent != null) {
                    message.is_spent = data.is_spent;
                }
                if (data.txid != null) {
                    message.txid = data.txid;
                }
                if (data.index != null) {
                    message.index = data.index;
                }
                if (data.to_amount != null) {
                    message.to_amount = data.to_amount;
                }
                if (data.transparent_to_address != null) {
                    message.transparent_to_address = data.transparent_to_address;
                }
                return message;
            }
            toObject() {
                const data: {
                    note?: ReturnType<typeof Note.prototype.toObject>;
                    position?: number;
                    is_spent?: boolean;
                    txid?: Uint8Array;
                    index?: number;
                    to_amount?: string;
                    transparent_to_address?: Uint8Array;
                } = {};
                if (this.note != null) {
                    data.note = this.note.toObject();
                }
                if (this.position != null) {
                    data.position = this.position;
                }
                if (this.is_spent != null) {
                    data.is_spent = this.is_spent;
                }
                if (this.txid != null) {
                    data.txid = this.txid;
                }
                if (this.index != null) {
                    data.index = this.index;
                }
                if (this.to_amount != null) {
                    data.to_amount = this.to_amount;
                }
                if (this.transparent_to_address != null) {
                    data.transparent_to_address = this.transparent_to_address;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_note)
                    writer.writeMessage(1, this.note, () => this.note.serialize(writer));
                if (this.position != 0)
                    writer.writeInt64(2, this.position);
                if (this.is_spent != false)
                    writer.writeBool(3, this.is_spent);
                if (this.txid.length)
                    writer.writeBytes(4, this.txid);
                if (this.index != 0)
                    writer.writeInt32(5, this.index);
                if (this.to_amount.length)
                    writer.writeString(6, this.to_amount);
                if (this.transparent_to_address.length)
                    writer.writeBytes(7, this.transparent_to_address);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NoteTx {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NoteTx();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.note, () => message.note = Note.deserialize(reader));
                            break;
                        case 2:
                            message.position = reader.readInt64();
                            break;
                        case 3:
                            message.is_spent = reader.readBool();
                            break;
                        case 4:
                            message.txid = reader.readBytes();
                            break;
                        case 5:
                            message.index = reader.readInt32();
                            break;
                        case 6:
                            message.to_amount = reader.readString();
                            break;
                        case 7:
                            message.transparent_to_address = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): NoteTx {
                return NoteTx.deserialize(bytes);
            }
        }
    }
    export class NfTRC20Parameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            note?: Note;
            ak?: Uint8Array;
            nk?: Uint8Array;
            position?: number;
            shielded_TRC20_contract_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("note" in data && data.note != undefined) {
                    this.note = data.note;
                }
                if ("ak" in data && data.ak != undefined) {
                    this.ak = data.ak;
                }
                if ("nk" in data && data.nk != undefined) {
                    this.nk = data.nk;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("shielded_TRC20_contract_address" in data && data.shielded_TRC20_contract_address != undefined) {
                    this.shielded_TRC20_contract_address = data.shielded_TRC20_contract_address;
                }
            }
        }
        get note() {
            return pb_1.Message.getWrapperField(this, Note, 1) as Note;
        }
        set note(value: Note) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_note() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ak() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set ak(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get nk() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set nk(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get position() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set position(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get shielded_TRC20_contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set shielded_TRC20_contract_address(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            note?: ReturnType<typeof Note.prototype.toObject>;
            ak?: Uint8Array;
            nk?: Uint8Array;
            position?: number;
            shielded_TRC20_contract_address?: Uint8Array;
        }): NfTRC20Parameters {
            const message = new NfTRC20Parameters({});
            if (data.note != null) {
                message.note = Note.fromObject(data.note);
            }
            if (data.ak != null) {
                message.ak = data.ak;
            }
            if (data.nk != null) {
                message.nk = data.nk;
            }
            if (data.position != null) {
                message.position = data.position;
            }
            if (data.shielded_TRC20_contract_address != null) {
                message.shielded_TRC20_contract_address = data.shielded_TRC20_contract_address;
            }
            return message;
        }
        toObject() {
            const data: {
                note?: ReturnType<typeof Note.prototype.toObject>;
                ak?: Uint8Array;
                nk?: Uint8Array;
                position?: number;
                shielded_TRC20_contract_address?: Uint8Array;
            } = {};
            if (this.note != null) {
                data.note = this.note.toObject();
            }
            if (this.ak != null) {
                data.ak = this.ak;
            }
            if (this.nk != null) {
                data.nk = this.nk;
            }
            if (this.position != null) {
                data.position = this.position;
            }
            if (this.shielded_TRC20_contract_address != null) {
                data.shielded_TRC20_contract_address = this.shielded_TRC20_contract_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_note)
                writer.writeMessage(1, this.note, () => this.note.serialize(writer));
            if (this.ak.length)
                writer.writeBytes(2, this.ak);
            if (this.nk.length)
                writer.writeBytes(3, this.nk);
            if (this.position != 0)
                writer.writeInt64(4, this.position);
            if (this.shielded_TRC20_contract_address.length)
                writer.writeBytes(5, this.shielded_TRC20_contract_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NfTRC20Parameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NfTRC20Parameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.note, () => message.note = Note.deserialize(reader));
                        break;
                    case 2:
                        message.ak = reader.readBytes();
                        break;
                    case 3:
                        message.nk = reader.readBytes();
                        break;
                    case 4:
                        message.position = reader.readInt64();
                        break;
                    case 5:
                        message.shielded_TRC20_contract_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NfTRC20Parameters {
            return NfTRC20Parameters.deserialize(bytes);
        }
    }
    export class NullifierResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_spent?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_spent" in data && data.is_spent != undefined) {
                    this.is_spent = data.is_spent;
                }
            }
        }
        get is_spent() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_spent(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_spent?: boolean;
        }): NullifierResult {
            const message = new NullifierResult({});
            if (data.is_spent != null) {
                message.is_spent = data.is_spent;
            }
            return message;
        }
        toObject() {
            const data: {
                is_spent?: boolean;
            } = {};
            if (this.is_spent != null) {
                data.is_spent = this.is_spent;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_spent != false)
                writer.writeBool(1, this.is_spent);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NullifierResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NullifierResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_spent = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NullifierResult {
            return NullifierResult.deserialize(bytes);
        }
    }
    export class ShieldedTRC20TriggerContractParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shielded_TRC20_Parameters?: ShieldedTRC20Parameters;
            spend_authority_signature?: BytesMessage[];
            amount?: string;
            transparent_to_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shielded_TRC20_Parameters" in data && data.shielded_TRC20_Parameters != undefined) {
                    this.shielded_TRC20_Parameters = data.shielded_TRC20_Parameters;
                }
                if ("spend_authority_signature" in data && data.spend_authority_signature != undefined) {
                    this.spend_authority_signature = data.spend_authority_signature;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("transparent_to_address" in data && data.transparent_to_address != undefined) {
                    this.transparent_to_address = data.transparent_to_address;
                }
            }
        }
        get shielded_TRC20_Parameters() {
            return pb_1.Message.getWrapperField(this, ShieldedTRC20Parameters, 1) as ShieldedTRC20Parameters;
        }
        set shielded_TRC20_Parameters(value: ShieldedTRC20Parameters) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_shielded_TRC20_Parameters() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get spend_authority_signature() {
            return pb_1.Message.getRepeatedWrapperField(this, BytesMessage, 2) as BytesMessage[];
        }
        set spend_authority_signature(value: BytesMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get transparent_to_address() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set transparent_to_address(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            shielded_TRC20_Parameters?: ReturnType<typeof ShieldedTRC20Parameters.prototype.toObject>;
            spend_authority_signature?: ReturnType<typeof BytesMessage.prototype.toObject>[];
            amount?: string;
            transparent_to_address?: Uint8Array;
        }): ShieldedTRC20TriggerContractParameters {
            const message = new ShieldedTRC20TriggerContractParameters({});
            if (data.shielded_TRC20_Parameters != null) {
                message.shielded_TRC20_Parameters = ShieldedTRC20Parameters.fromObject(data.shielded_TRC20_Parameters);
            }
            if (data.spend_authority_signature != null) {
                message.spend_authority_signature = data.spend_authority_signature.map(item => BytesMessage.fromObject(item));
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.transparent_to_address != null) {
                message.transparent_to_address = data.transparent_to_address;
            }
            return message;
        }
        toObject() {
            const data: {
                shielded_TRC20_Parameters?: ReturnType<typeof ShieldedTRC20Parameters.prototype.toObject>;
                spend_authority_signature?: ReturnType<typeof BytesMessage.prototype.toObject>[];
                amount?: string;
                transparent_to_address?: Uint8Array;
            } = {};
            if (this.shielded_TRC20_Parameters != null) {
                data.shielded_TRC20_Parameters = this.shielded_TRC20_Parameters.toObject();
            }
            if (this.spend_authority_signature != null) {
                data.spend_authority_signature = this.spend_authority_signature.map((item: BytesMessage) => item.toObject());
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.transparent_to_address != null) {
                data.transparent_to_address = this.transparent_to_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_shielded_TRC20_Parameters)
                writer.writeMessage(1, this.shielded_TRC20_Parameters, () => this.shielded_TRC20_Parameters.serialize(writer));
            if (this.spend_authority_signature.length)
                writer.writeRepeatedMessage(2, this.spend_authority_signature, (item: BytesMessage) => item.serialize(writer));
            if (this.amount.length)
                writer.writeString(3, this.amount);
            if (this.transparent_to_address.length)
                writer.writeBytes(4, this.transparent_to_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShieldedTRC20TriggerContractParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShieldedTRC20TriggerContractParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.shielded_TRC20_Parameters, () => message.shielded_TRC20_Parameters = ShieldedTRC20Parameters.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.spend_authority_signature, () => pb_1.Message.addToRepeatedWrapperField(message, 2, BytesMessage.deserialize(reader), BytesMessage));
                        break;
                    case 3:
                        message.amount = reader.readString();
                        break;
                    case 4:
                        message.transparent_to_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShieldedTRC20TriggerContractParameters {
            return ShieldedTRC20TriggerContractParameters.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedWalletService {
        static definition = {
            GetAccount: {
                path: "/protocol.Wallet/GetAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.Account) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.Account.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.Account) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.Account.deserialize(new Uint8Array(bytes))
            },
            GetAccountById: {
                path: "/protocol.Wallet/GetAccountById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.Account) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.Account.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.Account) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.Account.deserialize(new Uint8Array(bytes))
            },
            GetAccountBalance: {
                path: "/protocol.Wallet/GetAccountBalance",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.AccountBalanceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.AccountBalanceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_5.protocol.AccountBalanceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_5.protocol.AccountBalanceResponse.deserialize(new Uint8Array(bytes))
            },
            GetBlockBalanceTrace: {
                path: "/protocol.Wallet/GetBlockBalanceTrace",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.BlockBalanceTrace.BlockIdentifier) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.BlockBalanceTrace.BlockIdentifier.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_5.protocol.BlockBalanceTrace) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_5.protocol.BlockBalanceTrace.deserialize(new Uint8Array(bytes))
            },
            CreateTransaction2: {
                path: "/protocol.Wallet/CreateTransaction2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.TransferContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.TransferContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            BroadcastTransaction: {
                path: "/protocol.Wallet/BroadcastTransaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.Transaction) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.Transaction.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Return) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Return.deserialize(new Uint8Array(bytes))
            },
            SetAccountId: {
                path: "/protocol.Wallet/SetAccountId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.protocol.SetAccountIdContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.protocol.SetAccountIdContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.Transaction) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.Transaction.deserialize(new Uint8Array(bytes))
            },
            UpdateAccount2: {
                path: "/protocol.Wallet/UpdateAccount2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.protocol.AccountUpdateContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.protocol.AccountUpdateContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            UpdateSetting: {
                path: "/protocol.Wallet/UpdateSetting",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_10.protocol.UpdateSettingContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_10.protocol.UpdateSettingContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            UpdateEnergyLimit: {
                path: "/protocol.Wallet/UpdateEnergyLimit",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_10.protocol.UpdateEnergyLimitContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_10.protocol.UpdateEnergyLimitContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            VoteWitnessAccount2: {
                path: "/protocol.Wallet/VoteWitnessAccount2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_4.protocol.VoteWitnessContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_4.protocol.VoteWitnessContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            CreateAssetIssue2: {
                path: "/protocol.Wallet/CreateAssetIssue2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.protocol.AssetIssueContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.protocol.AssetIssueContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            UpdateWitness2: {
                path: "/protocol.Wallet/UpdateWitness2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_4.protocol.WitnessUpdateContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_4.protocol.WitnessUpdateContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            CreateAccount2: {
                path: "/protocol.Wallet/CreateAccount2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.protocol.AccountCreateContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.protocol.AccountCreateContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            CreateWitness2: {
                path: "/protocol.Wallet/CreateWitness2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_4.protocol.WitnessCreateContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_4.protocol.WitnessCreateContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            TransferAsset2: {
                path: "/protocol.Wallet/TransferAsset2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.protocol.TransferAssetContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.protocol.TransferAssetContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            ParticipateAssetIssue2: {
                path: "/protocol.Wallet/ParticipateAssetIssue2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.protocol.ParticipateAssetIssueContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.protocol.ParticipateAssetIssueContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            FreezeBalance2: {
                path: "/protocol.Wallet/FreezeBalance2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.FreezeBalanceContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.FreezeBalanceContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            FreezeBalanceV2: {
                path: "/protocol.Wallet/FreezeBalanceV2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.FreezeBalanceV2Contract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.FreezeBalanceV2Contract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            UnfreezeBalance2: {
                path: "/protocol.Wallet/UnfreezeBalance2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.UnfreezeBalanceContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.UnfreezeBalanceContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            UnfreezeBalanceV2: {
                path: "/protocol.Wallet/UnfreezeBalanceV2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.UnfreezeBalanceV2Contract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.UnfreezeBalanceV2Contract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            UnfreezeAsset2: {
                path: "/protocol.Wallet/UnfreezeAsset2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.protocol.UnfreezeAssetContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.protocol.UnfreezeAssetContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            WithdrawBalance2: {
                path: "/protocol.Wallet/WithdrawBalance2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.WithdrawBalanceContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.WithdrawBalanceContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            WithdrawExpireUnfreeze: {
                path: "/protocol.Wallet/WithdrawExpireUnfreeze",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.WithdrawExpireUnfreezeContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.WithdrawExpireUnfreezeContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            DelegateResource: {
                path: "/protocol.Wallet/DelegateResource",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.DelegateResourceContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.DelegateResourceContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            UnDelegateResource: {
                path: "/protocol.Wallet/UnDelegateResource",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.UnDelegateResourceContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.UnDelegateResourceContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            CancelAllUnfreezeV2: {
                path: "/protocol.Wallet/CancelAllUnfreezeV2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.protocol.CancelAllUnfreezeV2Contract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.protocol.CancelAllUnfreezeV2Contract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            UpdateAsset2: {
                path: "/protocol.Wallet/UpdateAsset2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.protocol.UpdateAssetContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.protocol.UpdateAssetContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            ProposalCreate: {
                path: "/protocol.Wallet/ProposalCreate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_6.protocol.ProposalCreateContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.protocol.ProposalCreateContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            ProposalApprove: {
                path: "/protocol.Wallet/ProposalApprove",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_6.protocol.ProposalApproveContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.protocol.ProposalApproveContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            ProposalDelete: {
                path: "/protocol.Wallet/ProposalDelete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_6.protocol.ProposalDeleteContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.protocol.ProposalDeleteContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            BuyStorage: {
                path: "/protocol.Wallet/BuyStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_7.protocol.BuyStorageContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_7.protocol.BuyStorageContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            BuyStorageBytes: {
                path: "/protocol.Wallet/BuyStorageBytes",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_7.protocol.BuyStorageBytesContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_7.protocol.BuyStorageBytesContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            SellStorage: {
                path: "/protocol.Wallet/SellStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_7.protocol.SellStorageContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_7.protocol.SellStorageContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            ExchangeCreate: {
                path: "/protocol.Wallet/ExchangeCreate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.protocol.ExchangeCreateContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.protocol.ExchangeCreateContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            ExchangeInject: {
                path: "/protocol.Wallet/ExchangeInject",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.protocol.ExchangeInjectContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.protocol.ExchangeInjectContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            ExchangeWithdraw: {
                path: "/protocol.Wallet/ExchangeWithdraw",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.protocol.ExchangeWithdrawContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.protocol.ExchangeWithdrawContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            ExchangeTransaction: {
                path: "/protocol.Wallet/ExchangeTransaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.protocol.ExchangeTransactionContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.protocol.ExchangeTransactionContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            MarketSellAsset: {
                path: "/protocol.Wallet/MarketSellAsset",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.protocol.MarketSellAssetContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.protocol.MarketSellAssetContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            MarketCancelOrder: {
                path: "/protocol.Wallet/MarketCancelOrder",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.protocol.MarketCancelOrderContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.protocol.MarketCancelOrderContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            GetMarketOrderById: {
                path: "/protocol.Wallet/GetMarketOrderById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.MarketOrder) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.MarketOrder.deserialize(new Uint8Array(bytes))
            },
            GetMarketOrderByAccount: {
                path: "/protocol.Wallet/GetMarketOrderByAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.MarketOrderList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.MarketOrderList.deserialize(new Uint8Array(bytes))
            },
            GetMarketPriceByPair: {
                path: "/protocol.Wallet/GetMarketPriceByPair",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.MarketOrderPair) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.MarketOrderPair.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.MarketPriceList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.MarketPriceList.deserialize(new Uint8Array(bytes))
            },
            GetMarketOrderListByPair: {
                path: "/protocol.Wallet/GetMarketOrderListByPair",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.MarketOrderPair) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.MarketOrderPair.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.MarketOrderList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.MarketOrderList.deserialize(new Uint8Array(bytes))
            },
            GetMarketPairList: {
                path: "/protocol.Wallet/GetMarketPairList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.MarketOrderPairList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.MarketOrderPairList.deserialize(new Uint8Array(bytes))
            },
            ListNodes: {
                path: "/protocol.Wallet/ListNodes",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NodeList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NodeList.deserialize(new Uint8Array(bytes))
            },
            GetAssetIssueByAccount: {
                path: "/protocol.Wallet/GetAssetIssueByAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.Account) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.Account.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssetIssueList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssetIssueList.deserialize(new Uint8Array(bytes))
            },
            GetAccountNet: {
                path: "/protocol.Wallet/GetAccountNet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.Account) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.Account.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccountNetMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccountNetMessage.deserialize(new Uint8Array(bytes))
            },
            GetAccountResource: {
                path: "/protocol.Wallet/GetAccountResource",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.Account) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.Account.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccountResourceMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccountResourceMessage.deserialize(new Uint8Array(bytes))
            },
            GetAssetIssueByName: {
                path: "/protocol.Wallet/GetAssetIssueByName",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.protocol.AssetIssueContract) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.protocol.AssetIssueContract.deserialize(new Uint8Array(bytes))
            },
            GetAssetIssueListByName: {
                path: "/protocol.Wallet/GetAssetIssueListByName",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssetIssueList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssetIssueList.deserialize(new Uint8Array(bytes))
            },
            GetAssetIssueById: {
                path: "/protocol.Wallet/GetAssetIssueById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.protocol.AssetIssueContract) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.protocol.AssetIssueContract.deserialize(new Uint8Array(bytes))
            },
            GetNowBlock2: {
                path: "/protocol.Wallet/GetNowBlock2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockExtention.deserialize(new Uint8Array(bytes))
            },
            GetBlockByNum2: {
                path: "/protocol.Wallet/GetBlockByNum2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockExtention.deserialize(new Uint8Array(bytes))
            },
            GetTransactionCountByBlockNum: {
                path: "/protocol.Wallet/GetTransactionCountByBlockNum",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes))
            },
            GetBlockById: {
                path: "/protocol.Wallet/GetBlockById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.Block) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.Block.deserialize(new Uint8Array(bytes))
            },
            GetBlockByLimitNext2: {
                path: "/protocol.Wallet/GetBlockByLimitNext2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BlockLimit) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BlockLimit.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockListExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockListExtention.deserialize(new Uint8Array(bytes))
            },
            GetBlockByLatestNum2: {
                path: "/protocol.Wallet/GetBlockByLatestNum2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockListExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockListExtention.deserialize(new Uint8Array(bytes))
            },
            GetTransactionById: {
                path: "/protocol.Wallet/GetTransactionById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.Transaction) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.Transaction.deserialize(new Uint8Array(bytes))
            },
            DeployContract: {
                path: "/protocol.Wallet/DeployContract",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_10.protocol.CreateSmartContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_10.protocol.CreateSmartContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            GetContract: {
                path: "/protocol.Wallet/GetContract",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_10.protocol.SmartContract) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_10.protocol.SmartContract.deserialize(new Uint8Array(bytes))
            },
            GetContractInfo: {
                path: "/protocol.Wallet/GetContractInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_10.protocol.SmartContractDataWrapper) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_10.protocol.SmartContractDataWrapper.deserialize(new Uint8Array(bytes))
            },
            TriggerContract: {
                path: "/protocol.Wallet/TriggerContract",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_10.protocol.TriggerSmartContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_10.protocol.TriggerSmartContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            TriggerConstantContract: {
                path: "/protocol.Wallet/TriggerConstantContract",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_10.protocol.TriggerSmartContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_10.protocol.TriggerSmartContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            EstimateEnergy: {
                path: "/protocol.Wallet/EstimateEnergy",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_10.protocol.TriggerSmartContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_10.protocol.TriggerSmartContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EstimateEnergyMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EstimateEnergyMessage.deserialize(new Uint8Array(bytes))
            },
            ClearContractABI: {
                path: "/protocol.Wallet/ClearContractABI",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_10.protocol.ClearABIContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_10.protocol.ClearABIContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            ListWitnesses: {
                path: "/protocol.Wallet/ListWitnesses",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WitnessList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WitnessList.deserialize(new Uint8Array(bytes))
            },
            GetDelegatedResource: {
                path: "/protocol.Wallet/GetDelegatedResource",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DelegatedResourceMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DelegatedResourceMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DelegatedResourceList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DelegatedResourceList.deserialize(new Uint8Array(bytes))
            },
            GetDelegatedResourceV2: {
                path: "/protocol.Wallet/GetDelegatedResourceV2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DelegatedResourceMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DelegatedResourceMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DelegatedResourceList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DelegatedResourceList.deserialize(new Uint8Array(bytes))
            },
            GetDelegatedResourceAccountIndex: {
                path: "/protocol.Wallet/GetDelegatedResourceAccountIndex",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.DelegatedResourceAccountIndex) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.DelegatedResourceAccountIndex.deserialize(new Uint8Array(bytes))
            },
            GetDelegatedResourceAccountIndexV2: {
                path: "/protocol.Wallet/GetDelegatedResourceAccountIndexV2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.DelegatedResourceAccountIndex) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.DelegatedResourceAccountIndex.deserialize(new Uint8Array(bytes))
            },
            GetCanDelegatedMaxSize: {
                path: "/protocol.Wallet/GetCanDelegatedMaxSize",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CanDelegatedMaxSizeRequestMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CanDelegatedMaxSizeRequestMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CanDelegatedMaxSizeResponseMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CanDelegatedMaxSizeResponseMessage.deserialize(new Uint8Array(bytes))
            },
            GetAvailableUnfreezeCount: {
                path: "/protocol.Wallet/GetAvailableUnfreezeCount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAvailableUnfreezeCountRequestMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAvailableUnfreezeCountRequestMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAvailableUnfreezeCountResponseMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAvailableUnfreezeCountResponseMessage.deserialize(new Uint8Array(bytes))
            },
            GetCanWithdrawUnfreezeAmount: {
                path: "/protocol.Wallet/GetCanWithdrawUnfreezeAmount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CanWithdrawUnfreezeAmountRequestMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CanWithdrawUnfreezeAmountRequestMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CanWithdrawUnfreezeAmountResponseMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CanWithdrawUnfreezeAmountResponseMessage.deserialize(new Uint8Array(bytes))
            },
            ListProposals: {
                path: "/protocol.Wallet/ListProposals",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ProposalList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ProposalList.deserialize(new Uint8Array(bytes))
            },
            GetPaginatedProposalList: {
                path: "/protocol.Wallet/GetPaginatedProposalList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PaginatedMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PaginatedMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ProposalList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ProposalList.deserialize(new Uint8Array(bytes))
            },
            GetProposalById: {
                path: "/protocol.Wallet/GetProposalById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.Proposal) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.Proposal.deserialize(new Uint8Array(bytes))
            },
            ListExchanges: {
                path: "/protocol.Wallet/ListExchanges",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExchangeList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExchangeList.deserialize(new Uint8Array(bytes))
            },
            GetPaginatedExchangeList: {
                path: "/protocol.Wallet/GetPaginatedExchangeList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PaginatedMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PaginatedMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExchangeList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExchangeList.deserialize(new Uint8Array(bytes))
            },
            GetExchangeById: {
                path: "/protocol.Wallet/GetExchangeById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.Exchange) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.Exchange.deserialize(new Uint8Array(bytes))
            },
            GetChainParameters: {
                path: "/protocol.Wallet/GetChainParameters",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.ChainParameters) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.ChainParameters.deserialize(new Uint8Array(bytes))
            },
            GetAssetIssueList: {
                path: "/protocol.Wallet/GetAssetIssueList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssetIssueList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssetIssueList.deserialize(new Uint8Array(bytes))
            },
            GetPaginatedAssetIssueList: {
                path: "/protocol.Wallet/GetPaginatedAssetIssueList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PaginatedMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PaginatedMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssetIssueList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssetIssueList.deserialize(new Uint8Array(bytes))
            },
            TotalTransaction: {
                path: "/protocol.Wallet/TotalTransaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes))
            },
            GetNextMaintenanceTime: {
                path: "/protocol.Wallet/GetNextMaintenanceTime",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes))
            },
            GetTransactionInfoById: {
                path: "/protocol.Wallet/GetTransactionInfoById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.TransactionInfo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.TransactionInfo.deserialize(new Uint8Array(bytes))
            },
            AccountPermissionUpdate: {
                path: "/protocol.Wallet/AccountPermissionUpdate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.protocol.AccountPermissionUpdateContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.protocol.AccountPermissionUpdateContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            GetTransactionSignWeight: {
                path: "/protocol.Wallet/GetTransactionSignWeight",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.Transaction) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.Transaction.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionSignWeight) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionSignWeight.deserialize(new Uint8Array(bytes))
            },
            GetTransactionApprovedList: {
                path: "/protocol.Wallet/GetTransactionApprovedList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.Transaction) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.Transaction.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionApprovedList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionApprovedList.deserialize(new Uint8Array(bytes))
            },
            GetNodeInfo: {
                path: "/protocol.Wallet/GetNodeInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.NodeInfo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.NodeInfo.deserialize(new Uint8Array(bytes))
            },
            GetRewardInfo: {
                path: "/protocol.Wallet/GetRewardInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes))
            },
            GetBrokerageInfo: {
                path: "/protocol.Wallet/GetBrokerageInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes))
            },
            UpdateBrokerage: {
                path: "/protocol.Wallet/UpdateBrokerage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_7.protocol.UpdateBrokerageContract) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_7.protocol.UpdateBrokerageContract.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            CreateShieldedTransaction: {
                path: "/protocol.Wallet/CreateShieldedTransaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PrivateParameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PrivateParameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            GetMerkleTreeVoucherInfo: {
                path: "/protocol.Wallet/GetMerkleTreeVoucherInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_11.protocol.OutputPointInfo) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_11.protocol.OutputPointInfo.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_11.protocol.IncrementalMerkleVoucherInfo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_11.protocol.IncrementalMerkleVoucherInfo.deserialize(new Uint8Array(bytes))
            },
            ScanNoteByIvk: {
                path: "/protocol.Wallet/ScanNoteByIvk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IvkDecryptParameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IvkDecryptParameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DecryptNotes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DecryptNotes.deserialize(new Uint8Array(bytes))
            },
            ScanAndMarkNoteByIvk: {
                path: "/protocol.Wallet/ScanAndMarkNoteByIvk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IvkDecryptAndMarkParameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IvkDecryptAndMarkParameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DecryptNotesMarked) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DecryptNotesMarked.deserialize(new Uint8Array(bytes))
            },
            ScanNoteByOvk: {
                path: "/protocol.Wallet/ScanNoteByOvk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: OvkDecryptParameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => OvkDecryptParameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DecryptNotes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DecryptNotes.deserialize(new Uint8Array(bytes))
            },
            GetSpendingKey: {
                path: "/protocol.Wallet/GetSpendingKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes))
            },
            GetExpandedSpendingKey: {
                path: "/protocol.Wallet/GetExpandedSpendingKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExpandedSpendingKeyMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExpandedSpendingKeyMessage.deserialize(new Uint8Array(bytes))
            },
            GetAkFromAsk: {
                path: "/protocol.Wallet/GetAkFromAsk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes))
            },
            GetNkFromNsk: {
                path: "/protocol.Wallet/GetNkFromNsk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes))
            },
            GetIncomingViewingKey: {
                path: "/protocol.Wallet/GetIncomingViewingKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ViewingKeyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ViewingKeyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: IncomingViewingKeyMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => IncomingViewingKeyMessage.deserialize(new Uint8Array(bytes))
            },
            GetDiversifier: {
                path: "/protocol.Wallet/GetDiversifier",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DiversifierMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DiversifierMessage.deserialize(new Uint8Array(bytes))
            },
            GetNewShieldedAddress: {
                path: "/protocol.Wallet/GetNewShieldedAddress",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ShieldedAddressInfo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ShieldedAddressInfo.deserialize(new Uint8Array(bytes))
            },
            GetZenPaymentAddress: {
                path: "/protocol.Wallet/GetZenPaymentAddress",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IncomingViewingKeyDiversifierMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IncomingViewingKeyDiversifierMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PaymentAddressMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PaymentAddressMessage.deserialize(new Uint8Array(bytes))
            },
            GetRcm: {
                path: "/protocol.Wallet/GetRcm",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes))
            },
            IsSpend: {
                path: "/protocol.Wallet/IsSpend",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NoteParameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NoteParameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SpendResult) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SpendResult.deserialize(new Uint8Array(bytes))
            },
            CreateShieldedTransactionWithoutSpendAuthSig: {
                path: "/protocol.Wallet/CreateShieldedTransactionWithoutSpendAuthSig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PrivateParametersWithoutAsk) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PrivateParametersWithoutAsk.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            GetShieldTransactionHash: {
                path: "/protocol.Wallet/GetShieldTransactionHash",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.Transaction) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.Transaction.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes))
            },
            CreateSpendAuthSig: {
                path: "/protocol.Wallet/CreateSpendAuthSig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SpendAuthSigParameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SpendAuthSigParameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes))
            },
            CreateShieldNullifier: {
                path: "/protocol.Wallet/CreateShieldNullifier",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NfParameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NfParameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes))
            },
            CreateShieldedContractParameters: {
                path: "/protocol.Wallet/CreateShieldedContractParameters",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PrivateShieldedTRC20Parameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PrivateShieldedTRC20Parameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ShieldedTRC20Parameters) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ShieldedTRC20Parameters.deserialize(new Uint8Array(bytes))
            },
            CreateShieldedContractParametersWithoutAsk: {
                path: "/protocol.Wallet/CreateShieldedContractParametersWithoutAsk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PrivateShieldedTRC20ParametersWithoutAsk) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PrivateShieldedTRC20ParametersWithoutAsk.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ShieldedTRC20Parameters) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ShieldedTRC20Parameters.deserialize(new Uint8Array(bytes))
            },
            ScanShieldedTRC20NotesByIvk: {
                path: "/protocol.Wallet/ScanShieldedTRC20NotesByIvk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IvkDecryptTRC20Parameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IvkDecryptTRC20Parameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DecryptNotesTRC20) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DecryptNotesTRC20.deserialize(new Uint8Array(bytes))
            },
            ScanShieldedTRC20NotesByOvk: {
                path: "/protocol.Wallet/ScanShieldedTRC20NotesByOvk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: OvkDecryptTRC20Parameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => OvkDecryptTRC20Parameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DecryptNotesTRC20) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DecryptNotesTRC20.deserialize(new Uint8Array(bytes))
            },
            IsShieldedTRC20ContractNoteSpent: {
                path: "/protocol.Wallet/IsShieldedTRC20ContractNoteSpent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NfTRC20Parameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NfTRC20Parameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NullifierResult) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NullifierResult.deserialize(new Uint8Array(bytes))
            },
            GetTriggerInputForShieldedTRC20Contract: {
                path: "/protocol.Wallet/GetTriggerInputForShieldedTRC20Contract",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ShieldedTRC20TriggerContractParameters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ShieldedTRC20TriggerContractParameters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes))
            },
            CreateCommonTransaction: {
                path: "/protocol.Wallet/CreateCommonTransaction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.protocol.Transaction) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.protocol.Transaction.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionExtention.deserialize(new Uint8Array(bytes))
            },
            GetTransactionInfoByBlockNum: {
                path: "/protocol.Wallet/GetTransactionInfoByBlockNum",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionInfoList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionInfoList.deserialize(new Uint8Array(bytes))
            },
            GetBurnTrx: {
                path: "/protocol.Wallet/GetBurnTrx",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes))
            },
            GetTransactionFromPending: {
                path: "/protocol.Wallet/GetTransactionFromPending",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BytesMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BytesMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.Transaction) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.Transaction.deserialize(new Uint8Array(bytes))
            },
            GetTransactionListFromPending: {
                path: "/protocol.Wallet/GetTransactionListFromPending",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionIdList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionIdList.deserialize(new Uint8Array(bytes))
            },
            GetPendingSize: {
                path: "/protocol.Wallet/GetPendingSize",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes))
            },
            GetBlock: {
                path: "/protocol.Wallet/GetBlock",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BlockReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BlockReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockExtention.deserialize(new Uint8Array(bytes))
            },
            GetBandwidthPrices: {
                path: "/protocol.Wallet/GetBandwidthPrices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PricesResponseMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PricesResponseMessage.deserialize(new Uint8Array(bytes))
            },
            GetEnergyPrices: {
                path: "/protocol.Wallet/GetEnergyPrices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PricesResponseMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PricesResponseMessage.deserialize(new Uint8Array(bytes))
            },
            GetMemoFee: {
                path: "/protocol.Wallet/GetMemoFee",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PricesResponseMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PricesResponseMessage.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetAccount(call: grpc_1.ServerUnaryCall<dependency_1.protocol.Account, dependency_1.protocol.Account>, callback: grpc_1.sendUnaryData<dependency_1.protocol.Account>): void;
        abstract GetAccountById(call: grpc_1.ServerUnaryCall<dependency_1.protocol.Account, dependency_1.protocol.Account>, callback: grpc_1.sendUnaryData<dependency_1.protocol.Account>): void;
        abstract GetAccountBalance(call: grpc_1.ServerUnaryCall<dependency_5.protocol.AccountBalanceRequest, dependency_5.protocol.AccountBalanceResponse>, callback: grpc_1.sendUnaryData<dependency_5.protocol.AccountBalanceResponse>): void;
        abstract GetBlockBalanceTrace(call: grpc_1.ServerUnaryCall<dependency_5.protocol.BlockBalanceTrace.BlockIdentifier, dependency_5.protocol.BlockBalanceTrace>, callback: grpc_1.sendUnaryData<dependency_5.protocol.BlockBalanceTrace>): void;
        abstract CreateTransaction2(call: grpc_1.ServerUnaryCall<dependency_5.protocol.TransferContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract BroadcastTransaction(call: grpc_1.ServerUnaryCall<dependency_1.protocol.Transaction, Return>, callback: grpc_1.sendUnaryData<Return>): void;
        abstract SetAccountId(call: grpc_1.ServerUnaryCall<dependency_2.protocol.SetAccountIdContract, dependency_1.protocol.Transaction>, callback: grpc_1.sendUnaryData<dependency_1.protocol.Transaction>): void;
        abstract UpdateAccount2(call: grpc_1.ServerUnaryCall<dependency_2.protocol.AccountUpdateContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract UpdateSetting(call: grpc_1.ServerUnaryCall<dependency_10.protocol.UpdateSettingContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract UpdateEnergyLimit(call: grpc_1.ServerUnaryCall<dependency_10.protocol.UpdateEnergyLimitContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract VoteWitnessAccount2(call: grpc_1.ServerUnaryCall<dependency_4.protocol.VoteWitnessContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract CreateAssetIssue2(call: grpc_1.ServerUnaryCall<dependency_3.protocol.AssetIssueContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract UpdateWitness2(call: grpc_1.ServerUnaryCall<dependency_4.protocol.WitnessUpdateContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract CreateAccount2(call: grpc_1.ServerUnaryCall<dependency_2.protocol.AccountCreateContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract CreateWitness2(call: grpc_1.ServerUnaryCall<dependency_4.protocol.WitnessCreateContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract TransferAsset2(call: grpc_1.ServerUnaryCall<dependency_3.protocol.TransferAssetContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract ParticipateAssetIssue2(call: grpc_1.ServerUnaryCall<dependency_3.protocol.ParticipateAssetIssueContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract FreezeBalance2(call: grpc_1.ServerUnaryCall<dependency_5.protocol.FreezeBalanceContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract FreezeBalanceV2(call: grpc_1.ServerUnaryCall<dependency_5.protocol.FreezeBalanceV2Contract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract UnfreezeBalance2(call: grpc_1.ServerUnaryCall<dependency_5.protocol.UnfreezeBalanceContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract UnfreezeBalanceV2(call: grpc_1.ServerUnaryCall<dependency_5.protocol.UnfreezeBalanceV2Contract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract UnfreezeAsset2(call: grpc_1.ServerUnaryCall<dependency_3.protocol.UnfreezeAssetContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract WithdrawBalance2(call: grpc_1.ServerUnaryCall<dependency_5.protocol.WithdrawBalanceContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract WithdrawExpireUnfreeze(call: grpc_1.ServerUnaryCall<dependency_5.protocol.WithdrawExpireUnfreezeContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract DelegateResource(call: grpc_1.ServerUnaryCall<dependency_5.protocol.DelegateResourceContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract UnDelegateResource(call: grpc_1.ServerUnaryCall<dependency_5.protocol.UnDelegateResourceContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract CancelAllUnfreezeV2(call: grpc_1.ServerUnaryCall<dependency_5.protocol.CancelAllUnfreezeV2Contract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract UpdateAsset2(call: grpc_1.ServerUnaryCall<dependency_3.protocol.UpdateAssetContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract ProposalCreate(call: grpc_1.ServerUnaryCall<dependency_6.protocol.ProposalCreateContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract ProposalApprove(call: grpc_1.ServerUnaryCall<dependency_6.protocol.ProposalApproveContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract ProposalDelete(call: grpc_1.ServerUnaryCall<dependency_6.protocol.ProposalDeleteContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract BuyStorage(call: grpc_1.ServerUnaryCall<dependency_7.protocol.BuyStorageContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract BuyStorageBytes(call: grpc_1.ServerUnaryCall<dependency_7.protocol.BuyStorageBytesContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract SellStorage(call: grpc_1.ServerUnaryCall<dependency_7.protocol.SellStorageContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract ExchangeCreate(call: grpc_1.ServerUnaryCall<dependency_8.protocol.ExchangeCreateContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract ExchangeInject(call: grpc_1.ServerUnaryCall<dependency_8.protocol.ExchangeInjectContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract ExchangeWithdraw(call: grpc_1.ServerUnaryCall<dependency_8.protocol.ExchangeWithdrawContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract ExchangeTransaction(call: grpc_1.ServerUnaryCall<dependency_8.protocol.ExchangeTransactionContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract MarketSellAsset(call: grpc_1.ServerUnaryCall<dependency_9.protocol.MarketSellAssetContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract MarketCancelOrder(call: grpc_1.ServerUnaryCall<dependency_9.protocol.MarketCancelOrderContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract GetMarketOrderById(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_1.protocol.MarketOrder>, callback: grpc_1.sendUnaryData<dependency_1.protocol.MarketOrder>): void;
        abstract GetMarketOrderByAccount(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_1.protocol.MarketOrderList>, callback: grpc_1.sendUnaryData<dependency_1.protocol.MarketOrderList>): void;
        abstract GetMarketPriceByPair(call: grpc_1.ServerUnaryCall<dependency_1.protocol.MarketOrderPair, dependency_1.protocol.MarketPriceList>, callback: grpc_1.sendUnaryData<dependency_1.protocol.MarketPriceList>): void;
        abstract GetMarketOrderListByPair(call: grpc_1.ServerUnaryCall<dependency_1.protocol.MarketOrderPair, dependency_1.protocol.MarketOrderList>, callback: grpc_1.sendUnaryData<dependency_1.protocol.MarketOrderList>): void;
        abstract GetMarketPairList(call: grpc_1.ServerUnaryCall<EmptyMessage, dependency_1.protocol.MarketOrderPairList>, callback: grpc_1.sendUnaryData<dependency_1.protocol.MarketOrderPairList>): void;
        abstract ListNodes(call: grpc_1.ServerUnaryCall<EmptyMessage, NodeList>, callback: grpc_1.sendUnaryData<NodeList>): void;
        abstract GetAssetIssueByAccount(call: grpc_1.ServerUnaryCall<dependency_1.protocol.Account, AssetIssueList>, callback: grpc_1.sendUnaryData<AssetIssueList>): void;
        abstract GetAccountNet(call: grpc_1.ServerUnaryCall<dependency_1.protocol.Account, AccountNetMessage>, callback: grpc_1.sendUnaryData<AccountNetMessage>): void;
        abstract GetAccountResource(call: grpc_1.ServerUnaryCall<dependency_1.protocol.Account, AccountResourceMessage>, callback: grpc_1.sendUnaryData<AccountResourceMessage>): void;
        abstract GetAssetIssueByName(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_3.protocol.AssetIssueContract>, callback: grpc_1.sendUnaryData<dependency_3.protocol.AssetIssueContract>): void;
        abstract GetAssetIssueListByName(call: grpc_1.ServerUnaryCall<BytesMessage, AssetIssueList>, callback: grpc_1.sendUnaryData<AssetIssueList>): void;
        abstract GetAssetIssueById(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_3.protocol.AssetIssueContract>, callback: grpc_1.sendUnaryData<dependency_3.protocol.AssetIssueContract>): void;
        abstract GetNowBlock2(call: grpc_1.ServerUnaryCall<EmptyMessage, BlockExtention>, callback: grpc_1.sendUnaryData<BlockExtention>): void;
        abstract GetBlockByNum2(call: grpc_1.ServerUnaryCall<NumberMessage, BlockExtention>, callback: grpc_1.sendUnaryData<BlockExtention>): void;
        abstract GetTransactionCountByBlockNum(call: grpc_1.ServerUnaryCall<NumberMessage, NumberMessage>, callback: grpc_1.sendUnaryData<NumberMessage>): void;
        abstract GetBlockById(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_1.protocol.Block>, callback: grpc_1.sendUnaryData<dependency_1.protocol.Block>): void;
        abstract GetBlockByLimitNext2(call: grpc_1.ServerUnaryCall<BlockLimit, BlockListExtention>, callback: grpc_1.sendUnaryData<BlockListExtention>): void;
        abstract GetBlockByLatestNum2(call: grpc_1.ServerUnaryCall<NumberMessage, BlockListExtention>, callback: grpc_1.sendUnaryData<BlockListExtention>): void;
        abstract GetTransactionById(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_1.protocol.Transaction>, callback: grpc_1.sendUnaryData<dependency_1.protocol.Transaction>): void;
        abstract DeployContract(call: grpc_1.ServerUnaryCall<dependency_10.protocol.CreateSmartContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract GetContract(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_10.protocol.SmartContract>, callback: grpc_1.sendUnaryData<dependency_10.protocol.SmartContract>): void;
        abstract GetContractInfo(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_10.protocol.SmartContractDataWrapper>, callback: grpc_1.sendUnaryData<dependency_10.protocol.SmartContractDataWrapper>): void;
        abstract TriggerContract(call: grpc_1.ServerUnaryCall<dependency_10.protocol.TriggerSmartContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract TriggerConstantContract(call: grpc_1.ServerUnaryCall<dependency_10.protocol.TriggerSmartContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract EstimateEnergy(call: grpc_1.ServerUnaryCall<dependency_10.protocol.TriggerSmartContract, EstimateEnergyMessage>, callback: grpc_1.sendUnaryData<EstimateEnergyMessage>): void;
        abstract ClearContractABI(call: grpc_1.ServerUnaryCall<dependency_10.protocol.ClearABIContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract ListWitnesses(call: grpc_1.ServerUnaryCall<EmptyMessage, WitnessList>, callback: grpc_1.sendUnaryData<WitnessList>): void;
        abstract GetDelegatedResource(call: grpc_1.ServerUnaryCall<DelegatedResourceMessage, DelegatedResourceList>, callback: grpc_1.sendUnaryData<DelegatedResourceList>): void;
        abstract GetDelegatedResourceV2(call: grpc_1.ServerUnaryCall<DelegatedResourceMessage, DelegatedResourceList>, callback: grpc_1.sendUnaryData<DelegatedResourceList>): void;
        abstract GetDelegatedResourceAccountIndex(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_1.protocol.DelegatedResourceAccountIndex>, callback: grpc_1.sendUnaryData<dependency_1.protocol.DelegatedResourceAccountIndex>): void;
        abstract GetDelegatedResourceAccountIndexV2(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_1.protocol.DelegatedResourceAccountIndex>, callback: grpc_1.sendUnaryData<dependency_1.protocol.DelegatedResourceAccountIndex>): void;
        abstract GetCanDelegatedMaxSize(call: grpc_1.ServerUnaryCall<CanDelegatedMaxSizeRequestMessage, CanDelegatedMaxSizeResponseMessage>, callback: grpc_1.sendUnaryData<CanDelegatedMaxSizeResponseMessage>): void;
        abstract GetAvailableUnfreezeCount(call: grpc_1.ServerUnaryCall<GetAvailableUnfreezeCountRequestMessage, GetAvailableUnfreezeCountResponseMessage>, callback: grpc_1.sendUnaryData<GetAvailableUnfreezeCountResponseMessage>): void;
        abstract GetCanWithdrawUnfreezeAmount(call: grpc_1.ServerUnaryCall<CanWithdrawUnfreezeAmountRequestMessage, CanWithdrawUnfreezeAmountResponseMessage>, callback: grpc_1.sendUnaryData<CanWithdrawUnfreezeAmountResponseMessage>): void;
        abstract ListProposals(call: grpc_1.ServerUnaryCall<EmptyMessage, ProposalList>, callback: grpc_1.sendUnaryData<ProposalList>): void;
        abstract GetPaginatedProposalList(call: grpc_1.ServerUnaryCall<PaginatedMessage, ProposalList>, callback: grpc_1.sendUnaryData<ProposalList>): void;
        abstract GetProposalById(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_1.protocol.Proposal>, callback: grpc_1.sendUnaryData<dependency_1.protocol.Proposal>): void;
        abstract ListExchanges(call: grpc_1.ServerUnaryCall<EmptyMessage, ExchangeList>, callback: grpc_1.sendUnaryData<ExchangeList>): void;
        abstract GetPaginatedExchangeList(call: grpc_1.ServerUnaryCall<PaginatedMessage, ExchangeList>, callback: grpc_1.sendUnaryData<ExchangeList>): void;
        abstract GetExchangeById(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_1.protocol.Exchange>, callback: grpc_1.sendUnaryData<dependency_1.protocol.Exchange>): void;
        abstract GetChainParameters(call: grpc_1.ServerUnaryCall<EmptyMessage, dependency_1.protocol.ChainParameters>, callback: grpc_1.sendUnaryData<dependency_1.protocol.ChainParameters>): void;
        abstract GetAssetIssueList(call: grpc_1.ServerUnaryCall<EmptyMessage, AssetIssueList>, callback: grpc_1.sendUnaryData<AssetIssueList>): void;
        abstract GetPaginatedAssetIssueList(call: grpc_1.ServerUnaryCall<PaginatedMessage, AssetIssueList>, callback: grpc_1.sendUnaryData<AssetIssueList>): void;
        abstract TotalTransaction(call: grpc_1.ServerUnaryCall<EmptyMessage, NumberMessage>, callback: grpc_1.sendUnaryData<NumberMessage>): void;
        abstract GetNextMaintenanceTime(call: grpc_1.ServerUnaryCall<EmptyMessage, NumberMessage>, callback: grpc_1.sendUnaryData<NumberMessage>): void;
        abstract GetTransactionInfoById(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_1.protocol.TransactionInfo>, callback: grpc_1.sendUnaryData<dependency_1.protocol.TransactionInfo>): void;
        abstract AccountPermissionUpdate(call: grpc_1.ServerUnaryCall<dependency_2.protocol.AccountPermissionUpdateContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract GetTransactionSignWeight(call: grpc_1.ServerUnaryCall<dependency_1.protocol.Transaction, TransactionSignWeight>, callback: grpc_1.sendUnaryData<TransactionSignWeight>): void;
        abstract GetTransactionApprovedList(call: grpc_1.ServerUnaryCall<dependency_1.protocol.Transaction, TransactionApprovedList>, callback: grpc_1.sendUnaryData<TransactionApprovedList>): void;
        abstract GetNodeInfo(call: grpc_1.ServerUnaryCall<EmptyMessage, dependency_1.protocol.NodeInfo>, callback: grpc_1.sendUnaryData<dependency_1.protocol.NodeInfo>): void;
        abstract GetRewardInfo(call: grpc_1.ServerUnaryCall<BytesMessage, NumberMessage>, callback: grpc_1.sendUnaryData<NumberMessage>): void;
        abstract GetBrokerageInfo(call: grpc_1.ServerUnaryCall<BytesMessage, NumberMessage>, callback: grpc_1.sendUnaryData<NumberMessage>): void;
        abstract UpdateBrokerage(call: grpc_1.ServerUnaryCall<dependency_7.protocol.UpdateBrokerageContract, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract CreateShieldedTransaction(call: grpc_1.ServerUnaryCall<PrivateParameters, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract GetMerkleTreeVoucherInfo(call: grpc_1.ServerUnaryCall<dependency_11.protocol.OutputPointInfo, dependency_11.protocol.IncrementalMerkleVoucherInfo>, callback: grpc_1.sendUnaryData<dependency_11.protocol.IncrementalMerkleVoucherInfo>): void;
        abstract ScanNoteByIvk(call: grpc_1.ServerUnaryCall<IvkDecryptParameters, DecryptNotes>, callback: grpc_1.sendUnaryData<DecryptNotes>): void;
        abstract ScanAndMarkNoteByIvk(call: grpc_1.ServerUnaryCall<IvkDecryptAndMarkParameters, DecryptNotesMarked>, callback: grpc_1.sendUnaryData<DecryptNotesMarked>): void;
        abstract ScanNoteByOvk(call: grpc_1.ServerUnaryCall<OvkDecryptParameters, DecryptNotes>, callback: grpc_1.sendUnaryData<DecryptNotes>): void;
        abstract GetSpendingKey(call: grpc_1.ServerUnaryCall<EmptyMessage, BytesMessage>, callback: grpc_1.sendUnaryData<BytesMessage>): void;
        abstract GetExpandedSpendingKey(call: grpc_1.ServerUnaryCall<BytesMessage, ExpandedSpendingKeyMessage>, callback: grpc_1.sendUnaryData<ExpandedSpendingKeyMessage>): void;
        abstract GetAkFromAsk(call: grpc_1.ServerUnaryCall<BytesMessage, BytesMessage>, callback: grpc_1.sendUnaryData<BytesMessage>): void;
        abstract GetNkFromNsk(call: grpc_1.ServerUnaryCall<BytesMessage, BytesMessage>, callback: grpc_1.sendUnaryData<BytesMessage>): void;
        abstract GetIncomingViewingKey(call: grpc_1.ServerUnaryCall<ViewingKeyMessage, IncomingViewingKeyMessage>, callback: grpc_1.sendUnaryData<IncomingViewingKeyMessage>): void;
        abstract GetDiversifier(call: grpc_1.ServerUnaryCall<EmptyMessage, DiversifierMessage>, callback: grpc_1.sendUnaryData<DiversifierMessage>): void;
        abstract GetNewShieldedAddress(call: grpc_1.ServerUnaryCall<EmptyMessage, ShieldedAddressInfo>, callback: grpc_1.sendUnaryData<ShieldedAddressInfo>): void;
        abstract GetZenPaymentAddress(call: grpc_1.ServerUnaryCall<IncomingViewingKeyDiversifierMessage, PaymentAddressMessage>, callback: grpc_1.sendUnaryData<PaymentAddressMessage>): void;
        abstract GetRcm(call: grpc_1.ServerUnaryCall<EmptyMessage, BytesMessage>, callback: grpc_1.sendUnaryData<BytesMessage>): void;
        abstract IsSpend(call: grpc_1.ServerUnaryCall<NoteParameters, SpendResult>, callback: grpc_1.sendUnaryData<SpendResult>): void;
        abstract CreateShieldedTransactionWithoutSpendAuthSig(call: grpc_1.ServerUnaryCall<PrivateParametersWithoutAsk, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract GetShieldTransactionHash(call: grpc_1.ServerUnaryCall<dependency_1.protocol.Transaction, BytesMessage>, callback: grpc_1.sendUnaryData<BytesMessage>): void;
        abstract CreateSpendAuthSig(call: grpc_1.ServerUnaryCall<SpendAuthSigParameters, BytesMessage>, callback: grpc_1.sendUnaryData<BytesMessage>): void;
        abstract CreateShieldNullifier(call: grpc_1.ServerUnaryCall<NfParameters, BytesMessage>, callback: grpc_1.sendUnaryData<BytesMessage>): void;
        abstract CreateShieldedContractParameters(call: grpc_1.ServerUnaryCall<PrivateShieldedTRC20Parameters, ShieldedTRC20Parameters>, callback: grpc_1.sendUnaryData<ShieldedTRC20Parameters>): void;
        abstract CreateShieldedContractParametersWithoutAsk(call: grpc_1.ServerUnaryCall<PrivateShieldedTRC20ParametersWithoutAsk, ShieldedTRC20Parameters>, callback: grpc_1.sendUnaryData<ShieldedTRC20Parameters>): void;
        abstract ScanShieldedTRC20NotesByIvk(call: grpc_1.ServerUnaryCall<IvkDecryptTRC20Parameters, DecryptNotesTRC20>, callback: grpc_1.sendUnaryData<DecryptNotesTRC20>): void;
        abstract ScanShieldedTRC20NotesByOvk(call: grpc_1.ServerUnaryCall<OvkDecryptTRC20Parameters, DecryptNotesTRC20>, callback: grpc_1.sendUnaryData<DecryptNotesTRC20>): void;
        abstract IsShieldedTRC20ContractNoteSpent(call: grpc_1.ServerUnaryCall<NfTRC20Parameters, NullifierResult>, callback: grpc_1.sendUnaryData<NullifierResult>): void;
        abstract GetTriggerInputForShieldedTRC20Contract(call: grpc_1.ServerUnaryCall<ShieldedTRC20TriggerContractParameters, BytesMessage>, callback: grpc_1.sendUnaryData<BytesMessage>): void;
        abstract CreateCommonTransaction(call: grpc_1.ServerUnaryCall<dependency_1.protocol.Transaction, TransactionExtention>, callback: grpc_1.sendUnaryData<TransactionExtention>): void;
        abstract GetTransactionInfoByBlockNum(call: grpc_1.ServerUnaryCall<NumberMessage, TransactionInfoList>, callback: grpc_1.sendUnaryData<TransactionInfoList>): void;
        abstract GetBurnTrx(call: grpc_1.ServerUnaryCall<EmptyMessage, NumberMessage>, callback: grpc_1.sendUnaryData<NumberMessage>): void;
        abstract GetTransactionFromPending(call: grpc_1.ServerUnaryCall<BytesMessage, dependency_1.protocol.Transaction>, callback: grpc_1.sendUnaryData<dependency_1.protocol.Transaction>): void;
        abstract GetTransactionListFromPending(call: grpc_1.ServerUnaryCall<EmptyMessage, TransactionIdList>, callback: grpc_1.sendUnaryData<TransactionIdList>): void;
        abstract GetPendingSize(call: grpc_1.ServerUnaryCall<EmptyMessage, NumberMessage>, callback: grpc_1.sendUnaryData<NumberMessage>): void;
        abstract GetBlock(call: grpc_1.ServerUnaryCall<BlockReq, BlockExtention>, callback: grpc_1.sendUnaryData<BlockExtention>): void;
        abstract GetBandwidthPrices(call: grpc_1.ServerUnaryCall<EmptyMessage, PricesResponseMessage>, callback: grpc_1.sendUnaryData<PricesResponseMessage>): void;
        abstract GetEnergyPrices(call: grpc_1.ServerUnaryCall<EmptyMessage, PricesResponseMessage>, callback: grpc_1.sendUnaryData<PricesResponseMessage>): void;
        abstract GetMemoFee(call: grpc_1.ServerUnaryCall<EmptyMessage, PricesResponseMessage>, callback: grpc_1.sendUnaryData<PricesResponseMessage>): void;
    }
    export class WalletClient extends grpc_1.makeGenericClientConstructor(UnimplementedWalletService.definition, "Wallet", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetAccount: GrpcUnaryServiceInterface<dependency_1.protocol.Account, dependency_1.protocol.Account> = (message: dependency_1.protocol.Account, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Account>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Account>, callback?: grpc_1.requestCallback<dependency_1.protocol.Account>): grpc_1.ClientUnaryCall => {
            return super.GetAccount(message, metadata, options, callback);
        };
        GetAccountById: GrpcUnaryServiceInterface<dependency_1.protocol.Account, dependency_1.protocol.Account> = (message: dependency_1.protocol.Account, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Account>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Account>, callback?: grpc_1.requestCallback<dependency_1.protocol.Account>): grpc_1.ClientUnaryCall => {
            return super.GetAccountById(message, metadata, options, callback);
        };
        GetAccountBalance: GrpcUnaryServiceInterface<dependency_5.protocol.AccountBalanceRequest, dependency_5.protocol.AccountBalanceResponse> = (message: dependency_5.protocol.AccountBalanceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_5.protocol.AccountBalanceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_5.protocol.AccountBalanceResponse>, callback?: grpc_1.requestCallback<dependency_5.protocol.AccountBalanceResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAccountBalance(message, metadata, options, callback);
        };
        GetBlockBalanceTrace: GrpcUnaryServiceInterface<dependency_5.protocol.BlockBalanceTrace.BlockIdentifier, dependency_5.protocol.BlockBalanceTrace> = (message: dependency_5.protocol.BlockBalanceTrace.BlockIdentifier, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_5.protocol.BlockBalanceTrace>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_5.protocol.BlockBalanceTrace>, callback?: grpc_1.requestCallback<dependency_5.protocol.BlockBalanceTrace>): grpc_1.ClientUnaryCall => {
            return super.GetBlockBalanceTrace(message, metadata, options, callback);
        };
        CreateTransaction2: GrpcUnaryServiceInterface<dependency_5.protocol.TransferContract, TransactionExtention> = (message: dependency_5.protocol.TransferContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.CreateTransaction2(message, metadata, options, callback);
        };
        BroadcastTransaction: GrpcUnaryServiceInterface<dependency_1.protocol.Transaction, Return> = (message: dependency_1.protocol.Transaction, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Return>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Return>, callback?: grpc_1.requestCallback<Return>): grpc_1.ClientUnaryCall => {
            return super.BroadcastTransaction(message, metadata, options, callback);
        };
        SetAccountId: GrpcUnaryServiceInterface<dependency_2.protocol.SetAccountIdContract, dependency_1.protocol.Transaction> = (message: dependency_2.protocol.SetAccountIdContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Transaction>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Transaction>, callback?: grpc_1.requestCallback<dependency_1.protocol.Transaction>): grpc_1.ClientUnaryCall => {
            return super.SetAccountId(message, metadata, options, callback);
        };
        UpdateAccount2: GrpcUnaryServiceInterface<dependency_2.protocol.AccountUpdateContract, TransactionExtention> = (message: dependency_2.protocol.AccountUpdateContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.UpdateAccount2(message, metadata, options, callback);
        };
        UpdateSetting: GrpcUnaryServiceInterface<dependency_10.protocol.UpdateSettingContract, TransactionExtention> = (message: dependency_10.protocol.UpdateSettingContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.UpdateSetting(message, metadata, options, callback);
        };
        UpdateEnergyLimit: GrpcUnaryServiceInterface<dependency_10.protocol.UpdateEnergyLimitContract, TransactionExtention> = (message: dependency_10.protocol.UpdateEnergyLimitContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.UpdateEnergyLimit(message, metadata, options, callback);
        };
        VoteWitnessAccount2: GrpcUnaryServiceInterface<dependency_4.protocol.VoteWitnessContract, TransactionExtention> = (message: dependency_4.protocol.VoteWitnessContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.VoteWitnessAccount2(message, metadata, options, callback);
        };
        CreateAssetIssue2: GrpcUnaryServiceInterface<dependency_3.protocol.AssetIssueContract, TransactionExtention> = (message: dependency_3.protocol.AssetIssueContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.CreateAssetIssue2(message, metadata, options, callback);
        };
        UpdateWitness2: GrpcUnaryServiceInterface<dependency_4.protocol.WitnessUpdateContract, TransactionExtention> = (message: dependency_4.protocol.WitnessUpdateContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.UpdateWitness2(message, metadata, options, callback);
        };
        CreateAccount2: GrpcUnaryServiceInterface<dependency_2.protocol.AccountCreateContract, TransactionExtention> = (message: dependency_2.protocol.AccountCreateContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.CreateAccount2(message, metadata, options, callback);
        };
        CreateWitness2: GrpcUnaryServiceInterface<dependency_4.protocol.WitnessCreateContract, TransactionExtention> = (message: dependency_4.protocol.WitnessCreateContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.CreateWitness2(message, metadata, options, callback);
        };
        TransferAsset2: GrpcUnaryServiceInterface<dependency_3.protocol.TransferAssetContract, TransactionExtention> = (message: dependency_3.protocol.TransferAssetContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.TransferAsset2(message, metadata, options, callback);
        };
        ParticipateAssetIssue2: GrpcUnaryServiceInterface<dependency_3.protocol.ParticipateAssetIssueContract, TransactionExtention> = (message: dependency_3.protocol.ParticipateAssetIssueContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.ParticipateAssetIssue2(message, metadata, options, callback);
        };
        FreezeBalance2: GrpcUnaryServiceInterface<dependency_5.protocol.FreezeBalanceContract, TransactionExtention> = (message: dependency_5.protocol.FreezeBalanceContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.FreezeBalance2(message, metadata, options, callback);
        };
        FreezeBalanceV2: GrpcUnaryServiceInterface<dependency_5.protocol.FreezeBalanceV2Contract, TransactionExtention> = (message: dependency_5.protocol.FreezeBalanceV2Contract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.FreezeBalanceV2(message, metadata, options, callback);
        };
        UnfreezeBalance2: GrpcUnaryServiceInterface<dependency_5.protocol.UnfreezeBalanceContract, TransactionExtention> = (message: dependency_5.protocol.UnfreezeBalanceContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.UnfreezeBalance2(message, metadata, options, callback);
        };
        UnfreezeBalanceV2: GrpcUnaryServiceInterface<dependency_5.protocol.UnfreezeBalanceV2Contract, TransactionExtention> = (message: dependency_5.protocol.UnfreezeBalanceV2Contract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.UnfreezeBalanceV2(message, metadata, options, callback);
        };
        UnfreezeAsset2: GrpcUnaryServiceInterface<dependency_3.protocol.UnfreezeAssetContract, TransactionExtention> = (message: dependency_3.protocol.UnfreezeAssetContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.UnfreezeAsset2(message, metadata, options, callback);
        };
        WithdrawBalance2: GrpcUnaryServiceInterface<dependency_5.protocol.WithdrawBalanceContract, TransactionExtention> = (message: dependency_5.protocol.WithdrawBalanceContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.WithdrawBalance2(message, metadata, options, callback);
        };
        WithdrawExpireUnfreeze: GrpcUnaryServiceInterface<dependency_5.protocol.WithdrawExpireUnfreezeContract, TransactionExtention> = (message: dependency_5.protocol.WithdrawExpireUnfreezeContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.WithdrawExpireUnfreeze(message, metadata, options, callback);
        };
        DelegateResource: GrpcUnaryServiceInterface<dependency_5.protocol.DelegateResourceContract, TransactionExtention> = (message: dependency_5.protocol.DelegateResourceContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.DelegateResource(message, metadata, options, callback);
        };
        UnDelegateResource: GrpcUnaryServiceInterface<dependency_5.protocol.UnDelegateResourceContract, TransactionExtention> = (message: dependency_5.protocol.UnDelegateResourceContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.UnDelegateResource(message, metadata, options, callback);
        };
        CancelAllUnfreezeV2: GrpcUnaryServiceInterface<dependency_5.protocol.CancelAllUnfreezeV2Contract, TransactionExtention> = (message: dependency_5.protocol.CancelAllUnfreezeV2Contract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.CancelAllUnfreezeV2(message, metadata, options, callback);
        };
        UpdateAsset2: GrpcUnaryServiceInterface<dependency_3.protocol.UpdateAssetContract, TransactionExtention> = (message: dependency_3.protocol.UpdateAssetContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.UpdateAsset2(message, metadata, options, callback);
        };
        ProposalCreate: GrpcUnaryServiceInterface<dependency_6.protocol.ProposalCreateContract, TransactionExtention> = (message: dependency_6.protocol.ProposalCreateContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.ProposalCreate(message, metadata, options, callback);
        };
        ProposalApprove: GrpcUnaryServiceInterface<dependency_6.protocol.ProposalApproveContract, TransactionExtention> = (message: dependency_6.protocol.ProposalApproveContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.ProposalApprove(message, metadata, options, callback);
        };
        ProposalDelete: GrpcUnaryServiceInterface<dependency_6.protocol.ProposalDeleteContract, TransactionExtention> = (message: dependency_6.protocol.ProposalDeleteContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.ProposalDelete(message, metadata, options, callback);
        };
        BuyStorage: GrpcUnaryServiceInterface<dependency_7.protocol.BuyStorageContract, TransactionExtention> = (message: dependency_7.protocol.BuyStorageContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.BuyStorage(message, metadata, options, callback);
        };
        BuyStorageBytes: GrpcUnaryServiceInterface<dependency_7.protocol.BuyStorageBytesContract, TransactionExtention> = (message: dependency_7.protocol.BuyStorageBytesContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.BuyStorageBytes(message, metadata, options, callback);
        };
        SellStorage: GrpcUnaryServiceInterface<dependency_7.protocol.SellStorageContract, TransactionExtention> = (message: dependency_7.protocol.SellStorageContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.SellStorage(message, metadata, options, callback);
        };
        ExchangeCreate: GrpcUnaryServiceInterface<dependency_8.protocol.ExchangeCreateContract, TransactionExtention> = (message: dependency_8.protocol.ExchangeCreateContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.ExchangeCreate(message, metadata, options, callback);
        };
        ExchangeInject: GrpcUnaryServiceInterface<dependency_8.protocol.ExchangeInjectContract, TransactionExtention> = (message: dependency_8.protocol.ExchangeInjectContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.ExchangeInject(message, metadata, options, callback);
        };
        ExchangeWithdraw: GrpcUnaryServiceInterface<dependency_8.protocol.ExchangeWithdrawContract, TransactionExtention> = (message: dependency_8.protocol.ExchangeWithdrawContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.ExchangeWithdraw(message, metadata, options, callback);
        };
        ExchangeTransaction: GrpcUnaryServiceInterface<dependency_8.protocol.ExchangeTransactionContract, TransactionExtention> = (message: dependency_8.protocol.ExchangeTransactionContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.ExchangeTransaction(message, metadata, options, callback);
        };
        MarketSellAsset: GrpcUnaryServiceInterface<dependency_9.protocol.MarketSellAssetContract, TransactionExtention> = (message: dependency_9.protocol.MarketSellAssetContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.MarketSellAsset(message, metadata, options, callback);
        };
        MarketCancelOrder: GrpcUnaryServiceInterface<dependency_9.protocol.MarketCancelOrderContract, TransactionExtention> = (message: dependency_9.protocol.MarketCancelOrderContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.MarketCancelOrder(message, metadata, options, callback);
        };
        GetMarketOrderById: GrpcUnaryServiceInterface<BytesMessage, dependency_1.protocol.MarketOrder> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MarketOrder>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MarketOrder>, callback?: grpc_1.requestCallback<dependency_1.protocol.MarketOrder>): grpc_1.ClientUnaryCall => {
            return super.GetMarketOrderById(message, metadata, options, callback);
        };
        GetMarketOrderByAccount: GrpcUnaryServiceInterface<BytesMessage, dependency_1.protocol.MarketOrderList> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MarketOrderList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MarketOrderList>, callback?: grpc_1.requestCallback<dependency_1.protocol.MarketOrderList>): grpc_1.ClientUnaryCall => {
            return super.GetMarketOrderByAccount(message, metadata, options, callback);
        };
        GetMarketPriceByPair: GrpcUnaryServiceInterface<dependency_1.protocol.MarketOrderPair, dependency_1.protocol.MarketPriceList> = (message: dependency_1.protocol.MarketOrderPair, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MarketPriceList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MarketPriceList>, callback?: grpc_1.requestCallback<dependency_1.protocol.MarketPriceList>): grpc_1.ClientUnaryCall => {
            return super.GetMarketPriceByPair(message, metadata, options, callback);
        };
        GetMarketOrderListByPair: GrpcUnaryServiceInterface<dependency_1.protocol.MarketOrderPair, dependency_1.protocol.MarketOrderList> = (message: dependency_1.protocol.MarketOrderPair, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MarketOrderList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MarketOrderList>, callback?: grpc_1.requestCallback<dependency_1.protocol.MarketOrderList>): grpc_1.ClientUnaryCall => {
            return super.GetMarketOrderListByPair(message, metadata, options, callback);
        };
        GetMarketPairList: GrpcUnaryServiceInterface<EmptyMessage, dependency_1.protocol.MarketOrderPairList> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MarketOrderPairList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MarketOrderPairList>, callback?: grpc_1.requestCallback<dependency_1.protocol.MarketOrderPairList>): grpc_1.ClientUnaryCall => {
            return super.GetMarketPairList(message, metadata, options, callback);
        };
        ListNodes: GrpcUnaryServiceInterface<EmptyMessage, NodeList> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NodeList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NodeList>, callback?: grpc_1.requestCallback<NodeList>): grpc_1.ClientUnaryCall => {
            return super.ListNodes(message, metadata, options, callback);
        };
        GetAssetIssueByAccount: GrpcUnaryServiceInterface<dependency_1.protocol.Account, AssetIssueList> = (message: dependency_1.protocol.Account, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AssetIssueList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AssetIssueList>, callback?: grpc_1.requestCallback<AssetIssueList>): grpc_1.ClientUnaryCall => {
            return super.GetAssetIssueByAccount(message, metadata, options, callback);
        };
        GetAccountNet: GrpcUnaryServiceInterface<dependency_1.protocol.Account, AccountNetMessage> = (message: dependency_1.protocol.Account, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AccountNetMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AccountNetMessage>, callback?: grpc_1.requestCallback<AccountNetMessage>): grpc_1.ClientUnaryCall => {
            return super.GetAccountNet(message, metadata, options, callback);
        };
        GetAccountResource: GrpcUnaryServiceInterface<dependency_1.protocol.Account, AccountResourceMessage> = (message: dependency_1.protocol.Account, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AccountResourceMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AccountResourceMessage>, callback?: grpc_1.requestCallback<AccountResourceMessage>): grpc_1.ClientUnaryCall => {
            return super.GetAccountResource(message, metadata, options, callback);
        };
        GetAssetIssueByName: GrpcUnaryServiceInterface<BytesMessage, dependency_3.protocol.AssetIssueContract> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.protocol.AssetIssueContract>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.protocol.AssetIssueContract>, callback?: grpc_1.requestCallback<dependency_3.protocol.AssetIssueContract>): grpc_1.ClientUnaryCall => {
            return super.GetAssetIssueByName(message, metadata, options, callback);
        };
        GetAssetIssueListByName: GrpcUnaryServiceInterface<BytesMessage, AssetIssueList> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AssetIssueList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AssetIssueList>, callback?: grpc_1.requestCallback<AssetIssueList>): grpc_1.ClientUnaryCall => {
            return super.GetAssetIssueListByName(message, metadata, options, callback);
        };
        GetAssetIssueById: GrpcUnaryServiceInterface<BytesMessage, dependency_3.protocol.AssetIssueContract> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.protocol.AssetIssueContract>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.protocol.AssetIssueContract>, callback?: grpc_1.requestCallback<dependency_3.protocol.AssetIssueContract>): grpc_1.ClientUnaryCall => {
            return super.GetAssetIssueById(message, metadata, options, callback);
        };
        GetNowBlock2: GrpcUnaryServiceInterface<EmptyMessage, BlockExtention> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockExtention>, callback?: grpc_1.requestCallback<BlockExtention>): grpc_1.ClientUnaryCall => {
            return super.GetNowBlock2(message, metadata, options, callback);
        };
        GetBlockByNum2: GrpcUnaryServiceInterface<NumberMessage, BlockExtention> = (message: NumberMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockExtention>, callback?: grpc_1.requestCallback<BlockExtention>): grpc_1.ClientUnaryCall => {
            return super.GetBlockByNum2(message, metadata, options, callback);
        };
        GetTransactionCountByBlockNum: GrpcUnaryServiceInterface<NumberMessage, NumberMessage> = (message: NumberMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, callback?: grpc_1.requestCallback<NumberMessage>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionCountByBlockNum(message, metadata, options, callback);
        };
        GetBlockById: GrpcUnaryServiceInterface<BytesMessage, dependency_1.protocol.Block> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Block>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Block>, callback?: grpc_1.requestCallback<dependency_1.protocol.Block>): grpc_1.ClientUnaryCall => {
            return super.GetBlockById(message, metadata, options, callback);
        };
        GetBlockByLimitNext2: GrpcUnaryServiceInterface<BlockLimit, BlockListExtention> = (message: BlockLimit, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockListExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockListExtention>, callback?: grpc_1.requestCallback<BlockListExtention>): grpc_1.ClientUnaryCall => {
            return super.GetBlockByLimitNext2(message, metadata, options, callback);
        };
        GetBlockByLatestNum2: GrpcUnaryServiceInterface<NumberMessage, BlockListExtention> = (message: NumberMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockListExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockListExtention>, callback?: grpc_1.requestCallback<BlockListExtention>): grpc_1.ClientUnaryCall => {
            return super.GetBlockByLatestNum2(message, metadata, options, callback);
        };
        GetTransactionById: GrpcUnaryServiceInterface<BytesMessage, dependency_1.protocol.Transaction> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Transaction>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Transaction>, callback?: grpc_1.requestCallback<dependency_1.protocol.Transaction>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionById(message, metadata, options, callback);
        };
        DeployContract: GrpcUnaryServiceInterface<dependency_10.protocol.CreateSmartContract, TransactionExtention> = (message: dependency_10.protocol.CreateSmartContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.DeployContract(message, metadata, options, callback);
        };
        GetContract: GrpcUnaryServiceInterface<BytesMessage, dependency_10.protocol.SmartContract> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_10.protocol.SmartContract>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_10.protocol.SmartContract>, callback?: grpc_1.requestCallback<dependency_10.protocol.SmartContract>): grpc_1.ClientUnaryCall => {
            return super.GetContract(message, metadata, options, callback);
        };
        GetContractInfo: GrpcUnaryServiceInterface<BytesMessage, dependency_10.protocol.SmartContractDataWrapper> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_10.protocol.SmartContractDataWrapper>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_10.protocol.SmartContractDataWrapper>, callback?: grpc_1.requestCallback<dependency_10.protocol.SmartContractDataWrapper>): grpc_1.ClientUnaryCall => {
            return super.GetContractInfo(message, metadata, options, callback);
        };
        TriggerContract: GrpcUnaryServiceInterface<dependency_10.protocol.TriggerSmartContract, TransactionExtention> = (message: dependency_10.protocol.TriggerSmartContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.TriggerContract(message, metadata, options, callback);
        };
        TriggerConstantContract: GrpcUnaryServiceInterface<dependency_10.protocol.TriggerSmartContract, TransactionExtention> = (message: dependency_10.protocol.TriggerSmartContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.TriggerConstantContract(message, metadata, options, callback);
        };
        EstimateEnergy: GrpcUnaryServiceInterface<dependency_10.protocol.TriggerSmartContract, EstimateEnergyMessage> = (message: dependency_10.protocol.TriggerSmartContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EstimateEnergyMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EstimateEnergyMessage>, callback?: grpc_1.requestCallback<EstimateEnergyMessage>): grpc_1.ClientUnaryCall => {
            return super.EstimateEnergy(message, metadata, options, callback);
        };
        ClearContractABI: GrpcUnaryServiceInterface<dependency_10.protocol.ClearABIContract, TransactionExtention> = (message: dependency_10.protocol.ClearABIContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.ClearContractABI(message, metadata, options, callback);
        };
        ListWitnesses: GrpcUnaryServiceInterface<EmptyMessage, WitnessList> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WitnessList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WitnessList>, callback?: grpc_1.requestCallback<WitnessList>): grpc_1.ClientUnaryCall => {
            return super.ListWitnesses(message, metadata, options, callback);
        };
        GetDelegatedResource: GrpcUnaryServiceInterface<DelegatedResourceMessage, DelegatedResourceList> = (message: DelegatedResourceMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DelegatedResourceList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DelegatedResourceList>, callback?: grpc_1.requestCallback<DelegatedResourceList>): grpc_1.ClientUnaryCall => {
            return super.GetDelegatedResource(message, metadata, options, callback);
        };
        GetDelegatedResourceV2: GrpcUnaryServiceInterface<DelegatedResourceMessage, DelegatedResourceList> = (message: DelegatedResourceMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DelegatedResourceList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DelegatedResourceList>, callback?: grpc_1.requestCallback<DelegatedResourceList>): grpc_1.ClientUnaryCall => {
            return super.GetDelegatedResourceV2(message, metadata, options, callback);
        };
        GetDelegatedResourceAccountIndex: GrpcUnaryServiceInterface<BytesMessage, dependency_1.protocol.DelegatedResourceAccountIndex> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.DelegatedResourceAccountIndex>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.DelegatedResourceAccountIndex>, callback?: grpc_1.requestCallback<dependency_1.protocol.DelegatedResourceAccountIndex>): grpc_1.ClientUnaryCall => {
            return super.GetDelegatedResourceAccountIndex(message, metadata, options, callback);
        };
        GetDelegatedResourceAccountIndexV2: GrpcUnaryServiceInterface<BytesMessage, dependency_1.protocol.DelegatedResourceAccountIndex> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.DelegatedResourceAccountIndex>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.DelegatedResourceAccountIndex>, callback?: grpc_1.requestCallback<dependency_1.protocol.DelegatedResourceAccountIndex>): grpc_1.ClientUnaryCall => {
            return super.GetDelegatedResourceAccountIndexV2(message, metadata, options, callback);
        };
        GetCanDelegatedMaxSize: GrpcUnaryServiceInterface<CanDelegatedMaxSizeRequestMessage, CanDelegatedMaxSizeResponseMessage> = (message: CanDelegatedMaxSizeRequestMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CanDelegatedMaxSizeResponseMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CanDelegatedMaxSizeResponseMessage>, callback?: grpc_1.requestCallback<CanDelegatedMaxSizeResponseMessage>): grpc_1.ClientUnaryCall => {
            return super.GetCanDelegatedMaxSize(message, metadata, options, callback);
        };
        GetAvailableUnfreezeCount: GrpcUnaryServiceInterface<GetAvailableUnfreezeCountRequestMessage, GetAvailableUnfreezeCountResponseMessage> = (message: GetAvailableUnfreezeCountRequestMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAvailableUnfreezeCountResponseMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAvailableUnfreezeCountResponseMessage>, callback?: grpc_1.requestCallback<GetAvailableUnfreezeCountResponseMessage>): grpc_1.ClientUnaryCall => {
            return super.GetAvailableUnfreezeCount(message, metadata, options, callback);
        };
        GetCanWithdrawUnfreezeAmount: GrpcUnaryServiceInterface<CanWithdrawUnfreezeAmountRequestMessage, CanWithdrawUnfreezeAmountResponseMessage> = (message: CanWithdrawUnfreezeAmountRequestMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CanWithdrawUnfreezeAmountResponseMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CanWithdrawUnfreezeAmountResponseMessage>, callback?: grpc_1.requestCallback<CanWithdrawUnfreezeAmountResponseMessage>): grpc_1.ClientUnaryCall => {
            return super.GetCanWithdrawUnfreezeAmount(message, metadata, options, callback);
        };
        ListProposals: GrpcUnaryServiceInterface<EmptyMessage, ProposalList> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProposalList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProposalList>, callback?: grpc_1.requestCallback<ProposalList>): grpc_1.ClientUnaryCall => {
            return super.ListProposals(message, metadata, options, callback);
        };
        GetPaginatedProposalList: GrpcUnaryServiceInterface<PaginatedMessage, ProposalList> = (message: PaginatedMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProposalList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProposalList>, callback?: grpc_1.requestCallback<ProposalList>): grpc_1.ClientUnaryCall => {
            return super.GetPaginatedProposalList(message, metadata, options, callback);
        };
        GetProposalById: GrpcUnaryServiceInterface<BytesMessage, dependency_1.protocol.Proposal> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Proposal>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Proposal>, callback?: grpc_1.requestCallback<dependency_1.protocol.Proposal>): grpc_1.ClientUnaryCall => {
            return super.GetProposalById(message, metadata, options, callback);
        };
        ListExchanges: GrpcUnaryServiceInterface<EmptyMessage, ExchangeList> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExchangeList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExchangeList>, callback?: grpc_1.requestCallback<ExchangeList>): grpc_1.ClientUnaryCall => {
            return super.ListExchanges(message, metadata, options, callback);
        };
        GetPaginatedExchangeList: GrpcUnaryServiceInterface<PaginatedMessage, ExchangeList> = (message: PaginatedMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExchangeList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExchangeList>, callback?: grpc_1.requestCallback<ExchangeList>): grpc_1.ClientUnaryCall => {
            return super.GetPaginatedExchangeList(message, metadata, options, callback);
        };
        GetExchangeById: GrpcUnaryServiceInterface<BytesMessage, dependency_1.protocol.Exchange> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Exchange>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Exchange>, callback?: grpc_1.requestCallback<dependency_1.protocol.Exchange>): grpc_1.ClientUnaryCall => {
            return super.GetExchangeById(message, metadata, options, callback);
        };
        GetChainParameters: GrpcUnaryServiceInterface<EmptyMessage, dependency_1.protocol.ChainParameters> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.ChainParameters>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.ChainParameters>, callback?: grpc_1.requestCallback<dependency_1.protocol.ChainParameters>): grpc_1.ClientUnaryCall => {
            return super.GetChainParameters(message, metadata, options, callback);
        };
        GetAssetIssueList: GrpcUnaryServiceInterface<EmptyMessage, AssetIssueList> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AssetIssueList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AssetIssueList>, callback?: grpc_1.requestCallback<AssetIssueList>): grpc_1.ClientUnaryCall => {
            return super.GetAssetIssueList(message, metadata, options, callback);
        };
        GetPaginatedAssetIssueList: GrpcUnaryServiceInterface<PaginatedMessage, AssetIssueList> = (message: PaginatedMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AssetIssueList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AssetIssueList>, callback?: grpc_1.requestCallback<AssetIssueList>): grpc_1.ClientUnaryCall => {
            return super.GetPaginatedAssetIssueList(message, metadata, options, callback);
        };
        TotalTransaction: GrpcUnaryServiceInterface<EmptyMessage, NumberMessage> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, callback?: grpc_1.requestCallback<NumberMessage>): grpc_1.ClientUnaryCall => {
            return super.TotalTransaction(message, metadata, options, callback);
        };
        GetNextMaintenanceTime: GrpcUnaryServiceInterface<EmptyMessage, NumberMessage> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, callback?: grpc_1.requestCallback<NumberMessage>): grpc_1.ClientUnaryCall => {
            return super.GetNextMaintenanceTime(message, metadata, options, callback);
        };
        GetTransactionInfoById: GrpcUnaryServiceInterface<BytesMessage, dependency_1.protocol.TransactionInfo> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.TransactionInfo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.TransactionInfo>, callback?: grpc_1.requestCallback<dependency_1.protocol.TransactionInfo>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionInfoById(message, metadata, options, callback);
        };
        AccountPermissionUpdate: GrpcUnaryServiceInterface<dependency_2.protocol.AccountPermissionUpdateContract, TransactionExtention> = (message: dependency_2.protocol.AccountPermissionUpdateContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.AccountPermissionUpdate(message, metadata, options, callback);
        };
        GetTransactionSignWeight: GrpcUnaryServiceInterface<dependency_1.protocol.Transaction, TransactionSignWeight> = (message: dependency_1.protocol.Transaction, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionSignWeight>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionSignWeight>, callback?: grpc_1.requestCallback<TransactionSignWeight>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionSignWeight(message, metadata, options, callback);
        };
        GetTransactionApprovedList: GrpcUnaryServiceInterface<dependency_1.protocol.Transaction, TransactionApprovedList> = (message: dependency_1.protocol.Transaction, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionApprovedList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionApprovedList>, callback?: grpc_1.requestCallback<TransactionApprovedList>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionApprovedList(message, metadata, options, callback);
        };
        GetNodeInfo: GrpcUnaryServiceInterface<EmptyMessage, dependency_1.protocol.NodeInfo> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.NodeInfo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.NodeInfo>, callback?: grpc_1.requestCallback<dependency_1.protocol.NodeInfo>): grpc_1.ClientUnaryCall => {
            return super.GetNodeInfo(message, metadata, options, callback);
        };
        GetRewardInfo: GrpcUnaryServiceInterface<BytesMessage, NumberMessage> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, callback?: grpc_1.requestCallback<NumberMessage>): grpc_1.ClientUnaryCall => {
            return super.GetRewardInfo(message, metadata, options, callback);
        };
        GetBrokerageInfo: GrpcUnaryServiceInterface<BytesMessage, NumberMessage> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, callback?: grpc_1.requestCallback<NumberMessage>): grpc_1.ClientUnaryCall => {
            return super.GetBrokerageInfo(message, metadata, options, callback);
        };
        UpdateBrokerage: GrpcUnaryServiceInterface<dependency_7.protocol.UpdateBrokerageContract, TransactionExtention> = (message: dependency_7.protocol.UpdateBrokerageContract, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.UpdateBrokerage(message, metadata, options, callback);
        };
        CreateShieldedTransaction: GrpcUnaryServiceInterface<PrivateParameters, TransactionExtention> = (message: PrivateParameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.CreateShieldedTransaction(message, metadata, options, callback);
        };
        GetMerkleTreeVoucherInfo: GrpcUnaryServiceInterface<dependency_11.protocol.OutputPointInfo, dependency_11.protocol.IncrementalMerkleVoucherInfo> = (message: dependency_11.protocol.OutputPointInfo, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_11.protocol.IncrementalMerkleVoucherInfo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_11.protocol.IncrementalMerkleVoucherInfo>, callback?: grpc_1.requestCallback<dependency_11.protocol.IncrementalMerkleVoucherInfo>): grpc_1.ClientUnaryCall => {
            return super.GetMerkleTreeVoucherInfo(message, metadata, options, callback);
        };
        ScanNoteByIvk: GrpcUnaryServiceInterface<IvkDecryptParameters, DecryptNotes> = (message: IvkDecryptParameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DecryptNotes>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DecryptNotes>, callback?: grpc_1.requestCallback<DecryptNotes>): grpc_1.ClientUnaryCall => {
            return super.ScanNoteByIvk(message, metadata, options, callback);
        };
        ScanAndMarkNoteByIvk: GrpcUnaryServiceInterface<IvkDecryptAndMarkParameters, DecryptNotesMarked> = (message: IvkDecryptAndMarkParameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DecryptNotesMarked>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DecryptNotesMarked>, callback?: grpc_1.requestCallback<DecryptNotesMarked>): grpc_1.ClientUnaryCall => {
            return super.ScanAndMarkNoteByIvk(message, metadata, options, callback);
        };
        ScanNoteByOvk: GrpcUnaryServiceInterface<OvkDecryptParameters, DecryptNotes> = (message: OvkDecryptParameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DecryptNotes>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DecryptNotes>, callback?: grpc_1.requestCallback<DecryptNotes>): grpc_1.ClientUnaryCall => {
            return super.ScanNoteByOvk(message, metadata, options, callback);
        };
        GetSpendingKey: GrpcUnaryServiceInterface<EmptyMessage, BytesMessage> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, callback?: grpc_1.requestCallback<BytesMessage>): grpc_1.ClientUnaryCall => {
            return super.GetSpendingKey(message, metadata, options, callback);
        };
        GetExpandedSpendingKey: GrpcUnaryServiceInterface<BytesMessage, ExpandedSpendingKeyMessage> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExpandedSpendingKeyMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExpandedSpendingKeyMessage>, callback?: grpc_1.requestCallback<ExpandedSpendingKeyMessage>): grpc_1.ClientUnaryCall => {
            return super.GetExpandedSpendingKey(message, metadata, options, callback);
        };
        GetAkFromAsk: GrpcUnaryServiceInterface<BytesMessage, BytesMessage> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, callback?: grpc_1.requestCallback<BytesMessage>): grpc_1.ClientUnaryCall => {
            return super.GetAkFromAsk(message, metadata, options, callback);
        };
        GetNkFromNsk: GrpcUnaryServiceInterface<BytesMessage, BytesMessage> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, callback?: grpc_1.requestCallback<BytesMessage>): grpc_1.ClientUnaryCall => {
            return super.GetNkFromNsk(message, metadata, options, callback);
        };
        GetIncomingViewingKey: GrpcUnaryServiceInterface<ViewingKeyMessage, IncomingViewingKeyMessage> = (message: ViewingKeyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<IncomingViewingKeyMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<IncomingViewingKeyMessage>, callback?: grpc_1.requestCallback<IncomingViewingKeyMessage>): grpc_1.ClientUnaryCall => {
            return super.GetIncomingViewingKey(message, metadata, options, callback);
        };
        GetDiversifier: GrpcUnaryServiceInterface<EmptyMessage, DiversifierMessage> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DiversifierMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DiversifierMessage>, callback?: grpc_1.requestCallback<DiversifierMessage>): grpc_1.ClientUnaryCall => {
            return super.GetDiversifier(message, metadata, options, callback);
        };
        GetNewShieldedAddress: GrpcUnaryServiceInterface<EmptyMessage, ShieldedAddressInfo> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ShieldedAddressInfo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ShieldedAddressInfo>, callback?: grpc_1.requestCallback<ShieldedAddressInfo>): grpc_1.ClientUnaryCall => {
            return super.GetNewShieldedAddress(message, metadata, options, callback);
        };
        GetZenPaymentAddress: GrpcUnaryServiceInterface<IncomingViewingKeyDiversifierMessage, PaymentAddressMessage> = (message: IncomingViewingKeyDiversifierMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PaymentAddressMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PaymentAddressMessage>, callback?: grpc_1.requestCallback<PaymentAddressMessage>): grpc_1.ClientUnaryCall => {
            return super.GetZenPaymentAddress(message, metadata, options, callback);
        };
        GetRcm: GrpcUnaryServiceInterface<EmptyMessage, BytesMessage> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, callback?: grpc_1.requestCallback<BytesMessage>): grpc_1.ClientUnaryCall => {
            return super.GetRcm(message, metadata, options, callback);
        };
        IsSpend: GrpcUnaryServiceInterface<NoteParameters, SpendResult> = (message: NoteParameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SpendResult>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SpendResult>, callback?: grpc_1.requestCallback<SpendResult>): grpc_1.ClientUnaryCall => {
            return super.IsSpend(message, metadata, options, callback);
        };
        CreateShieldedTransactionWithoutSpendAuthSig: GrpcUnaryServiceInterface<PrivateParametersWithoutAsk, TransactionExtention> = (message: PrivateParametersWithoutAsk, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.CreateShieldedTransactionWithoutSpendAuthSig(message, metadata, options, callback);
        };
        GetShieldTransactionHash: GrpcUnaryServiceInterface<dependency_1.protocol.Transaction, BytesMessage> = (message: dependency_1.protocol.Transaction, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, callback?: grpc_1.requestCallback<BytesMessage>): grpc_1.ClientUnaryCall => {
            return super.GetShieldTransactionHash(message, metadata, options, callback);
        };
        CreateSpendAuthSig: GrpcUnaryServiceInterface<SpendAuthSigParameters, BytesMessage> = (message: SpendAuthSigParameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, callback?: grpc_1.requestCallback<BytesMessage>): grpc_1.ClientUnaryCall => {
            return super.CreateSpendAuthSig(message, metadata, options, callback);
        };
        CreateShieldNullifier: GrpcUnaryServiceInterface<NfParameters, BytesMessage> = (message: NfParameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, callback?: grpc_1.requestCallback<BytesMessage>): grpc_1.ClientUnaryCall => {
            return super.CreateShieldNullifier(message, metadata, options, callback);
        };
        CreateShieldedContractParameters: GrpcUnaryServiceInterface<PrivateShieldedTRC20Parameters, ShieldedTRC20Parameters> = (message: PrivateShieldedTRC20Parameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ShieldedTRC20Parameters>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ShieldedTRC20Parameters>, callback?: grpc_1.requestCallback<ShieldedTRC20Parameters>): grpc_1.ClientUnaryCall => {
            return super.CreateShieldedContractParameters(message, metadata, options, callback);
        };
        CreateShieldedContractParametersWithoutAsk: GrpcUnaryServiceInterface<PrivateShieldedTRC20ParametersWithoutAsk, ShieldedTRC20Parameters> = (message: PrivateShieldedTRC20ParametersWithoutAsk, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ShieldedTRC20Parameters>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ShieldedTRC20Parameters>, callback?: grpc_1.requestCallback<ShieldedTRC20Parameters>): grpc_1.ClientUnaryCall => {
            return super.CreateShieldedContractParametersWithoutAsk(message, metadata, options, callback);
        };
        ScanShieldedTRC20NotesByIvk: GrpcUnaryServiceInterface<IvkDecryptTRC20Parameters, DecryptNotesTRC20> = (message: IvkDecryptTRC20Parameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DecryptNotesTRC20>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DecryptNotesTRC20>, callback?: grpc_1.requestCallback<DecryptNotesTRC20>): grpc_1.ClientUnaryCall => {
            return super.ScanShieldedTRC20NotesByIvk(message, metadata, options, callback);
        };
        ScanShieldedTRC20NotesByOvk: GrpcUnaryServiceInterface<OvkDecryptTRC20Parameters, DecryptNotesTRC20> = (message: OvkDecryptTRC20Parameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DecryptNotesTRC20>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DecryptNotesTRC20>, callback?: grpc_1.requestCallback<DecryptNotesTRC20>): grpc_1.ClientUnaryCall => {
            return super.ScanShieldedTRC20NotesByOvk(message, metadata, options, callback);
        };
        IsShieldedTRC20ContractNoteSpent: GrpcUnaryServiceInterface<NfTRC20Parameters, NullifierResult> = (message: NfTRC20Parameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NullifierResult>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NullifierResult>, callback?: grpc_1.requestCallback<NullifierResult>): grpc_1.ClientUnaryCall => {
            return super.IsShieldedTRC20ContractNoteSpent(message, metadata, options, callback);
        };
        GetTriggerInputForShieldedTRC20Contract: GrpcUnaryServiceInterface<ShieldedTRC20TriggerContractParameters, BytesMessage> = (message: ShieldedTRC20TriggerContractParameters, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BytesMessage>, callback?: grpc_1.requestCallback<BytesMessage>): grpc_1.ClientUnaryCall => {
            return super.GetTriggerInputForShieldedTRC20Contract(message, metadata, options, callback);
        };
        CreateCommonTransaction: GrpcUnaryServiceInterface<dependency_1.protocol.Transaction, TransactionExtention> = (message: dependency_1.protocol.Transaction, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionExtention>, callback?: grpc_1.requestCallback<TransactionExtention>): grpc_1.ClientUnaryCall => {
            return super.CreateCommonTransaction(message, metadata, options, callback);
        };
        GetTransactionInfoByBlockNum: GrpcUnaryServiceInterface<NumberMessage, TransactionInfoList> = (message: NumberMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionInfoList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionInfoList>, callback?: grpc_1.requestCallback<TransactionInfoList>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionInfoByBlockNum(message, metadata, options, callback);
        };
        GetBurnTrx: GrpcUnaryServiceInterface<EmptyMessage, NumberMessage> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, callback?: grpc_1.requestCallback<NumberMessage>): grpc_1.ClientUnaryCall => {
            return super.GetBurnTrx(message, metadata, options, callback);
        };
        GetTransactionFromPending: GrpcUnaryServiceInterface<BytesMessage, dependency_1.protocol.Transaction> = (message: BytesMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Transaction>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Transaction>, callback?: grpc_1.requestCallback<dependency_1.protocol.Transaction>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionFromPending(message, metadata, options, callback);
        };
        GetTransactionListFromPending: GrpcUnaryServiceInterface<EmptyMessage, TransactionIdList> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionIdList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionIdList>, callback?: grpc_1.requestCallback<TransactionIdList>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionListFromPending(message, metadata, options, callback);
        };
        GetPendingSize: GrpcUnaryServiceInterface<EmptyMessage, NumberMessage> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NumberMessage>, callback?: grpc_1.requestCallback<NumberMessage>): grpc_1.ClientUnaryCall => {
            return super.GetPendingSize(message, metadata, options, callback);
        };
        GetBlock: GrpcUnaryServiceInterface<BlockReq, BlockExtention> = (message: BlockReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockExtention>, callback?: grpc_1.requestCallback<BlockExtention>): grpc_1.ClientUnaryCall => {
            return super.GetBlock(message, metadata, options, callback);
        };
        GetBandwidthPrices: GrpcUnaryServiceInterface<EmptyMessage, PricesResponseMessage> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PricesResponseMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PricesResponseMessage>, callback?: grpc_1.requestCallback<PricesResponseMessage>): grpc_1.ClientUnaryCall => {
            return super.GetBandwidthPrices(message, metadata, options, callback);
        };
        GetEnergyPrices: GrpcUnaryServiceInterface<EmptyMessage, PricesResponseMessage> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PricesResponseMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PricesResponseMessage>, callback?: grpc_1.requestCallback<PricesResponseMessage>): grpc_1.ClientUnaryCall => {
            return super.GetEnergyPrices(message, metadata, options, callback);
        };
        GetMemoFee: GrpcUnaryServiceInterface<EmptyMessage, PricesResponseMessage> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PricesResponseMessage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PricesResponseMessage>, callback?: grpc_1.requestCallback<PricesResponseMessage>): grpc_1.ClientUnaryCall => {
            return super.GetMemoFee(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedWalletExtensionService {
        static definition = {
            GetTransactionsFromThis2: {
                path: "/protocol.WalletExtension/GetTransactionsFromThis2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AccountPaginated) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AccountPaginated.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionListExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionListExtention.deserialize(new Uint8Array(bytes))
            },
            GetTransactionsToThis2: {
                path: "/protocol.WalletExtension/GetTransactionsToThis2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AccountPaginated) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AccountPaginated.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionListExtention) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionListExtention.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetTransactionsFromThis2(call: grpc_1.ServerUnaryCall<AccountPaginated, TransactionListExtention>, callback: grpc_1.sendUnaryData<TransactionListExtention>): void;
        abstract GetTransactionsToThis2(call: grpc_1.ServerUnaryCall<AccountPaginated, TransactionListExtention>, callback: grpc_1.sendUnaryData<TransactionListExtention>): void;
    }
    export class WalletExtensionClient extends grpc_1.makeGenericClientConstructor(UnimplementedWalletExtensionService.definition, "WalletExtension", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetTransactionsFromThis2: GrpcUnaryServiceInterface<AccountPaginated, TransactionListExtention> = (message: AccountPaginated, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionListExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionListExtention>, callback?: grpc_1.requestCallback<TransactionListExtention>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionsFromThis2(message, metadata, options, callback);
        };
        GetTransactionsToThis2: GrpcUnaryServiceInterface<AccountPaginated, TransactionListExtention> = (message: AccountPaginated, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransactionListExtention>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransactionListExtention>, callback?: grpc_1.requestCallback<TransactionListExtention>): grpc_1.ClientUnaryCall => {
            return super.GetTransactionsToThis2(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedDatabaseService {
        static definition = {
            getBlockReference: {
                path: "/protocol.Database/getBlockReference",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlockReference) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlockReference.deserialize(new Uint8Array(bytes))
            },
            GetDynamicProperties: {
                path: "/protocol.Database/GetDynamicProperties",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.DynamicProperties) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.DynamicProperties.deserialize(new Uint8Array(bytes))
            },
            GetNowBlock: {
                path: "/protocol.Database/GetNowBlock",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.Block) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.Block.deserialize(new Uint8Array(bytes))
            },
            GetBlockByNum: {
                path: "/protocol.Database/GetBlockByNum",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NumberMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NumberMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.Block) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.Block.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getBlockReference(call: grpc_1.ServerUnaryCall<EmptyMessage, BlockReference>, callback: grpc_1.sendUnaryData<BlockReference>): void;
        abstract GetDynamicProperties(call: grpc_1.ServerUnaryCall<EmptyMessage, dependency_1.protocol.DynamicProperties>, callback: grpc_1.sendUnaryData<dependency_1.protocol.DynamicProperties>): void;
        abstract GetNowBlock(call: grpc_1.ServerUnaryCall<EmptyMessage, dependency_1.protocol.Block>, callback: grpc_1.sendUnaryData<dependency_1.protocol.Block>): void;
        abstract GetBlockByNum(call: grpc_1.ServerUnaryCall<NumberMessage, dependency_1.protocol.Block>, callback: grpc_1.sendUnaryData<dependency_1.protocol.Block>): void;
    }
    export class DatabaseClient extends grpc_1.makeGenericClientConstructor(UnimplementedDatabaseService.definition, "Database", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getBlockReference: GrpcUnaryServiceInterface<EmptyMessage, BlockReference> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlockReference>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlockReference>, callback?: grpc_1.requestCallback<BlockReference>): grpc_1.ClientUnaryCall => {
            return super.getBlockReference(message, metadata, options, callback);
        };
        GetDynamicProperties: GrpcUnaryServiceInterface<EmptyMessage, dependency_1.protocol.DynamicProperties> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.DynamicProperties>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.DynamicProperties>, callback?: grpc_1.requestCallback<dependency_1.protocol.DynamicProperties>): grpc_1.ClientUnaryCall => {
            return super.GetDynamicProperties(message, metadata, options, callback);
        };
        GetNowBlock: GrpcUnaryServiceInterface<EmptyMessage, dependency_1.protocol.Block> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Block>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Block>, callback?: grpc_1.requestCallback<dependency_1.protocol.Block>): grpc_1.ClientUnaryCall => {
            return super.GetNowBlock(message, metadata, options, callback);
        };
        GetBlockByNum: GrpcUnaryServiceInterface<NumberMessage, dependency_1.protocol.Block> = (message: NumberMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Block>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.Block>, callback?: grpc_1.requestCallback<dependency_1.protocol.Block>): grpc_1.ClientUnaryCall => {
            return super.GetBlockByNum(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedMonitorService {
        static definition = {
            GetStatsInfo: {
                path: "/protocol.Monitor/GetStatsInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmptyMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmptyMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.protocol.MetricsInfo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.protocol.MetricsInfo.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetStatsInfo(call: grpc_1.ServerUnaryCall<EmptyMessage, dependency_1.protocol.MetricsInfo>, callback: grpc_1.sendUnaryData<dependency_1.protocol.MetricsInfo>): void;
    }
    export class MonitorClient extends grpc_1.makeGenericClientConstructor(UnimplementedMonitorService.definition, "Monitor", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetStatsInfo: GrpcUnaryServiceInterface<EmptyMessage, dependency_1.protocol.MetricsInfo> = (message: EmptyMessage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MetricsInfo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.protocol.MetricsInfo>, callback?: grpc_1.requestCallback<dependency_1.protocol.MetricsInfo>): grpc_1.ClientUnaryCall => {
            return super.GetStatsInfo(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedNetworkService {
        static definition = {};
        [method: string]: grpc_1.UntypedHandleCall;
    }
    export class NetworkClient extends grpc_1.makeGenericClientConstructor(UnimplementedNetworkService.definition, "Network", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
    }
}
