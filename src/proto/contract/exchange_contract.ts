/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: src/proto/contract/exchange_contract.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace protocol {
    export class ExchangeCreateContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            first_token_id?: Uint8Array;
            first_token_balance?: number;
            second_token_id?: Uint8Array;
            second_token_balance?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("first_token_id" in data && data.first_token_id != undefined) {
                    this.first_token_id = data.first_token_id;
                }
                if ("first_token_balance" in data && data.first_token_balance != undefined) {
                    this.first_token_balance = data.first_token_balance;
                }
                if ("second_token_id" in data && data.second_token_id != undefined) {
                    this.second_token_id = data.second_token_id;
                }
                if ("second_token_balance" in data && data.second_token_balance != undefined) {
                    this.second_token_balance = data.second_token_balance;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get first_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set first_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get first_token_balance() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set first_token_balance(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get second_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set second_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get second_token_balance() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set second_token_balance(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            first_token_id?: Uint8Array;
            first_token_balance?: number;
            second_token_id?: Uint8Array;
            second_token_balance?: number;
        }): ExchangeCreateContract {
            const message = new ExchangeCreateContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.first_token_id != null) {
                message.first_token_id = data.first_token_id;
            }
            if (data.first_token_balance != null) {
                message.first_token_balance = data.first_token_balance;
            }
            if (data.second_token_id != null) {
                message.second_token_id = data.second_token_id;
            }
            if (data.second_token_balance != null) {
                message.second_token_balance = data.second_token_balance;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                first_token_id?: Uint8Array;
                first_token_balance?: number;
                second_token_id?: Uint8Array;
                second_token_balance?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.first_token_id != null) {
                data.first_token_id = this.first_token_id;
            }
            if (this.first_token_balance != null) {
                data.first_token_balance = this.first_token_balance;
            }
            if (this.second_token_id != null) {
                data.second_token_id = this.second_token_id;
            }
            if (this.second_token_balance != null) {
                data.second_token_balance = this.second_token_balance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.first_token_id.length)
                writer.writeBytes(2, this.first_token_id);
            if (this.first_token_balance != 0)
                writer.writeInt64(3, this.first_token_balance);
            if (this.second_token_id.length)
                writer.writeBytes(4, this.second_token_id);
            if (this.second_token_balance != 0)
                writer.writeInt64(5, this.second_token_balance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeCreateContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeCreateContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.first_token_id = reader.readBytes();
                        break;
                    case 3:
                        message.first_token_balance = reader.readInt64();
                        break;
                    case 4:
                        message.second_token_id = reader.readBytes();
                        break;
                    case 5:
                        message.second_token_balance = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeCreateContract {
            return ExchangeCreateContract.deserialize(bytes);
        }
    }
    export class ExchangeInjectContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            exchange_id?: number;
            token_id?: Uint8Array;
            quant?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("exchange_id" in data && data.exchange_id != undefined) {
                    this.exchange_id = data.exchange_id;
                }
                if ("token_id" in data && data.token_id != undefined) {
                    this.token_id = data.token_id;
                }
                if ("quant" in data && data.quant != undefined) {
                    this.quant = data.quant;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get exchange_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set exchange_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get token_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get quant() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set quant(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            exchange_id?: number;
            token_id?: Uint8Array;
            quant?: number;
        }): ExchangeInjectContract {
            const message = new ExchangeInjectContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.exchange_id != null) {
                message.exchange_id = data.exchange_id;
            }
            if (data.token_id != null) {
                message.token_id = data.token_id;
            }
            if (data.quant != null) {
                message.quant = data.quant;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                exchange_id?: number;
                token_id?: Uint8Array;
                quant?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.exchange_id != null) {
                data.exchange_id = this.exchange_id;
            }
            if (this.token_id != null) {
                data.token_id = this.token_id;
            }
            if (this.quant != null) {
                data.quant = this.quant;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.exchange_id != 0)
                writer.writeInt64(2, this.exchange_id);
            if (this.token_id.length)
                writer.writeBytes(3, this.token_id);
            if (this.quant != 0)
                writer.writeInt64(4, this.quant);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeInjectContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeInjectContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.exchange_id = reader.readInt64();
                        break;
                    case 3:
                        message.token_id = reader.readBytes();
                        break;
                    case 4:
                        message.quant = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeInjectContract {
            return ExchangeInjectContract.deserialize(bytes);
        }
    }
    export class ExchangeWithdrawContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            exchange_id?: number;
            token_id?: Uint8Array;
            quant?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("exchange_id" in data && data.exchange_id != undefined) {
                    this.exchange_id = data.exchange_id;
                }
                if ("token_id" in data && data.token_id != undefined) {
                    this.token_id = data.token_id;
                }
                if ("quant" in data && data.quant != undefined) {
                    this.quant = data.quant;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get exchange_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set exchange_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get token_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get quant() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set quant(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            exchange_id?: number;
            token_id?: Uint8Array;
            quant?: number;
        }): ExchangeWithdrawContract {
            const message = new ExchangeWithdrawContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.exchange_id != null) {
                message.exchange_id = data.exchange_id;
            }
            if (data.token_id != null) {
                message.token_id = data.token_id;
            }
            if (data.quant != null) {
                message.quant = data.quant;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                exchange_id?: number;
                token_id?: Uint8Array;
                quant?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.exchange_id != null) {
                data.exchange_id = this.exchange_id;
            }
            if (this.token_id != null) {
                data.token_id = this.token_id;
            }
            if (this.quant != null) {
                data.quant = this.quant;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.exchange_id != 0)
                writer.writeInt64(2, this.exchange_id);
            if (this.token_id.length)
                writer.writeBytes(3, this.token_id);
            if (this.quant != 0)
                writer.writeInt64(4, this.quant);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeWithdrawContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeWithdrawContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.exchange_id = reader.readInt64();
                        break;
                    case 3:
                        message.token_id = reader.readBytes();
                        break;
                    case 4:
                        message.quant = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeWithdrawContract {
            return ExchangeWithdrawContract.deserialize(bytes);
        }
    }
    export class ExchangeTransactionContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            exchange_id?: number;
            token_id?: Uint8Array;
            quant?: number;
            expected?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("exchange_id" in data && data.exchange_id != undefined) {
                    this.exchange_id = data.exchange_id;
                }
                if ("token_id" in data && data.token_id != undefined) {
                    this.token_id = data.token_id;
                }
                if ("quant" in data && data.quant != undefined) {
                    this.quant = data.quant;
                }
                if ("expected" in data && data.expected != undefined) {
                    this.expected = data.expected;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get exchange_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set exchange_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get token_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get quant() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set quant(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get expected() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set expected(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            exchange_id?: number;
            token_id?: Uint8Array;
            quant?: number;
            expected?: number;
        }): ExchangeTransactionContract {
            const message = new ExchangeTransactionContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.exchange_id != null) {
                message.exchange_id = data.exchange_id;
            }
            if (data.token_id != null) {
                message.token_id = data.token_id;
            }
            if (data.quant != null) {
                message.quant = data.quant;
            }
            if (data.expected != null) {
                message.expected = data.expected;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                exchange_id?: number;
                token_id?: Uint8Array;
                quant?: number;
                expected?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.exchange_id != null) {
                data.exchange_id = this.exchange_id;
            }
            if (this.token_id != null) {
                data.token_id = this.token_id;
            }
            if (this.quant != null) {
                data.quant = this.quant;
            }
            if (this.expected != null) {
                data.expected = this.expected;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.exchange_id != 0)
                writer.writeInt64(2, this.exchange_id);
            if (this.token_id.length)
                writer.writeBytes(3, this.token_id);
            if (this.quant != 0)
                writer.writeInt64(4, this.quant);
            if (this.expected != 0)
                writer.writeInt64(5, this.expected);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeTransactionContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeTransactionContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.exchange_id = reader.readInt64();
                        break;
                    case 3:
                        message.token_id = reader.readBytes();
                        break;
                    case 4:
                        message.quant = reader.readInt64();
                        break;
                    case 5:
                        message.expected = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeTransactionContract {
            return ExchangeTransactionContract.deserialize(bytes);
        }
    }
}
