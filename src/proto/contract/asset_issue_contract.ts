/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: src/proto/contract/asset_issue_contract.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace protocol {
    export class AssetIssueContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            owner_address?: Uint8Array;
            name?: Uint8Array;
            abbr?: Uint8Array;
            total_supply?: number;
            frozen_supply?: AssetIssueContract.FrozenSupply[];
            trx_num?: number;
            precision?: number;
            num?: number;
            start_time?: number;
            end_time?: number;
            order?: number;
            vote_score?: number;
            description?: Uint8Array;
            url?: Uint8Array;
            free_asset_net_limit?: number;
            public_free_asset_net_limit?: number;
            public_free_asset_net_usage?: number;
            public_latest_free_net_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("abbr" in data && data.abbr != undefined) {
                    this.abbr = data.abbr;
                }
                if ("total_supply" in data && data.total_supply != undefined) {
                    this.total_supply = data.total_supply;
                }
                if ("frozen_supply" in data && data.frozen_supply != undefined) {
                    this.frozen_supply = data.frozen_supply;
                }
                if ("trx_num" in data && data.trx_num != undefined) {
                    this.trx_num = data.trx_num;
                }
                if ("precision" in data && data.precision != undefined) {
                    this.precision = data.precision;
                }
                if ("num" in data && data.num != undefined) {
                    this.num = data.num;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
                if ("vote_score" in data && data.vote_score != undefined) {
                    this.vote_score = data.vote_score;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("free_asset_net_limit" in data && data.free_asset_net_limit != undefined) {
                    this.free_asset_net_limit = data.free_asset_net_limit;
                }
                if ("public_free_asset_net_limit" in data && data.public_free_asset_net_limit != undefined) {
                    this.public_free_asset_net_limit = data.public_free_asset_net_limit;
                }
                if ("public_free_asset_net_usage" in data && data.public_free_asset_net_usage != undefined) {
                    this.public_free_asset_net_usage = data.public_free_asset_net_usage;
                }
                if ("public_latest_free_net_time" in data && data.public_latest_free_net_time != undefined) {
                    this.public_latest_free_net_time = data.public_latest_free_net_time;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 41, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 41, value);
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set name(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get abbr() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set abbr(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get total_supply() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set total_supply(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get frozen_supply() {
            return pb_1.Message.getRepeatedWrapperField(this, AssetIssueContract.FrozenSupply, 5) as AssetIssueContract.FrozenSupply[];
        }
        set frozen_supply(value: AssetIssueContract.FrozenSupply[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get trx_num() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set trx_num(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get precision() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set precision(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get num() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set num(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get order() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set order(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get vote_score() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set vote_score(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 20, new Uint8Array(0)) as Uint8Array;
        }
        set description(value: Uint8Array) {
            pb_1.Message.setField(this, 20, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 21, new Uint8Array(0)) as Uint8Array;
        }
        set url(value: Uint8Array) {
            pb_1.Message.setField(this, 21, value);
        }
        get free_asset_net_limit() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set free_asset_net_limit(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get public_free_asset_net_limit() {
            return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
        }
        set public_free_asset_net_limit(value: number) {
            pb_1.Message.setField(this, 23, value);
        }
        get public_free_asset_net_usage() {
            return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
        }
        set public_free_asset_net_usage(value: number) {
            pb_1.Message.setField(this, 24, value);
        }
        get public_latest_free_net_time() {
            return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
        }
        set public_latest_free_net_time(value: number) {
            pb_1.Message.setField(this, 25, value);
        }
        static fromObject(data: {
            id?: string;
            owner_address?: Uint8Array;
            name?: Uint8Array;
            abbr?: Uint8Array;
            total_supply?: number;
            frozen_supply?: ReturnType<typeof AssetIssueContract.FrozenSupply.prototype.toObject>[];
            trx_num?: number;
            precision?: number;
            num?: number;
            start_time?: number;
            end_time?: number;
            order?: number;
            vote_score?: number;
            description?: Uint8Array;
            url?: Uint8Array;
            free_asset_net_limit?: number;
            public_free_asset_net_limit?: number;
            public_free_asset_net_usage?: number;
            public_latest_free_net_time?: number;
        }): AssetIssueContract {
            const message = new AssetIssueContract({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.abbr != null) {
                message.abbr = data.abbr;
            }
            if (data.total_supply != null) {
                message.total_supply = data.total_supply;
            }
            if (data.frozen_supply != null) {
                message.frozen_supply = data.frozen_supply.map(item => AssetIssueContract.FrozenSupply.fromObject(item));
            }
            if (data.trx_num != null) {
                message.trx_num = data.trx_num;
            }
            if (data.precision != null) {
                message.precision = data.precision;
            }
            if (data.num != null) {
                message.num = data.num;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            if (data.order != null) {
                message.order = data.order;
            }
            if (data.vote_score != null) {
                message.vote_score = data.vote_score;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.free_asset_net_limit != null) {
                message.free_asset_net_limit = data.free_asset_net_limit;
            }
            if (data.public_free_asset_net_limit != null) {
                message.public_free_asset_net_limit = data.public_free_asset_net_limit;
            }
            if (data.public_free_asset_net_usage != null) {
                message.public_free_asset_net_usage = data.public_free_asset_net_usage;
            }
            if (data.public_latest_free_net_time != null) {
                message.public_latest_free_net_time = data.public_latest_free_net_time;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                owner_address?: Uint8Array;
                name?: Uint8Array;
                abbr?: Uint8Array;
                total_supply?: number;
                frozen_supply?: ReturnType<typeof AssetIssueContract.FrozenSupply.prototype.toObject>[];
                trx_num?: number;
                precision?: number;
                num?: number;
                start_time?: number;
                end_time?: number;
                order?: number;
                vote_score?: number;
                description?: Uint8Array;
                url?: Uint8Array;
                free_asset_net_limit?: number;
                public_free_asset_net_limit?: number;
                public_free_asset_net_usage?: number;
                public_latest_free_net_time?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.abbr != null) {
                data.abbr = this.abbr;
            }
            if (this.total_supply != null) {
                data.total_supply = this.total_supply;
            }
            if (this.frozen_supply != null) {
                data.frozen_supply = this.frozen_supply.map((item: AssetIssueContract.FrozenSupply) => item.toObject());
            }
            if (this.trx_num != null) {
                data.trx_num = this.trx_num;
            }
            if (this.precision != null) {
                data.precision = this.precision;
            }
            if (this.num != null) {
                data.num = this.num;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            if (this.order != null) {
                data.order = this.order;
            }
            if (this.vote_score != null) {
                data.vote_score = this.vote_score;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.free_asset_net_limit != null) {
                data.free_asset_net_limit = this.free_asset_net_limit;
            }
            if (this.public_free_asset_net_limit != null) {
                data.public_free_asset_net_limit = this.public_free_asset_net_limit;
            }
            if (this.public_free_asset_net_usage != null) {
                data.public_free_asset_net_usage = this.public_free_asset_net_usage;
            }
            if (this.public_latest_free_net_time != null) {
                data.public_latest_free_net_time = this.public_latest_free_net_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(41, this.id);
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.name.length)
                writer.writeBytes(2, this.name);
            if (this.abbr.length)
                writer.writeBytes(3, this.abbr);
            if (this.total_supply != 0)
                writer.writeInt64(4, this.total_supply);
            if (this.frozen_supply.length)
                writer.writeRepeatedMessage(5, this.frozen_supply, (item: AssetIssueContract.FrozenSupply) => item.serialize(writer));
            if (this.trx_num != 0)
                writer.writeInt32(6, this.trx_num);
            if (this.precision != 0)
                writer.writeInt32(7, this.precision);
            if (this.num != 0)
                writer.writeInt32(8, this.num);
            if (this.start_time != 0)
                writer.writeInt64(9, this.start_time);
            if (this.end_time != 0)
                writer.writeInt64(10, this.end_time);
            if (this.order != 0)
                writer.writeInt64(11, this.order);
            if (this.vote_score != 0)
                writer.writeInt32(16, this.vote_score);
            if (this.description.length)
                writer.writeBytes(20, this.description);
            if (this.url.length)
                writer.writeBytes(21, this.url);
            if (this.free_asset_net_limit != 0)
                writer.writeInt64(22, this.free_asset_net_limit);
            if (this.public_free_asset_net_limit != 0)
                writer.writeInt64(23, this.public_free_asset_net_limit);
            if (this.public_free_asset_net_usage != 0)
                writer.writeInt64(24, this.public_free_asset_net_usage);
            if (this.public_latest_free_net_time != 0)
                writer.writeInt64(25, this.public_latest_free_net_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssetIssueContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssetIssueContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 41:
                        message.id = reader.readString();
                        break;
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.name = reader.readBytes();
                        break;
                    case 3:
                        message.abbr = reader.readBytes();
                        break;
                    case 4:
                        message.total_supply = reader.readInt64();
                        break;
                    case 5:
                        reader.readMessage(message.frozen_supply, () => pb_1.Message.addToRepeatedWrapperField(message, 5, AssetIssueContract.FrozenSupply.deserialize(reader), AssetIssueContract.FrozenSupply));
                        break;
                    case 6:
                        message.trx_num = reader.readInt32();
                        break;
                    case 7:
                        message.precision = reader.readInt32();
                        break;
                    case 8:
                        message.num = reader.readInt32();
                        break;
                    case 9:
                        message.start_time = reader.readInt64();
                        break;
                    case 10:
                        message.end_time = reader.readInt64();
                        break;
                    case 11:
                        message.order = reader.readInt64();
                        break;
                    case 16:
                        message.vote_score = reader.readInt32();
                        break;
                    case 20:
                        message.description = reader.readBytes();
                        break;
                    case 21:
                        message.url = reader.readBytes();
                        break;
                    case 22:
                        message.free_asset_net_limit = reader.readInt64();
                        break;
                    case 23:
                        message.public_free_asset_net_limit = reader.readInt64();
                        break;
                    case 24:
                        message.public_free_asset_net_usage = reader.readInt64();
                        break;
                    case 25:
                        message.public_latest_free_net_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssetIssueContract {
            return AssetIssueContract.deserialize(bytes);
        }
    }
    export namespace AssetIssueContract {
        export class FrozenSupply extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                frozen_amount?: number;
                frozen_days?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("frozen_amount" in data && data.frozen_amount != undefined) {
                        this.frozen_amount = data.frozen_amount;
                    }
                    if ("frozen_days" in data && data.frozen_days != undefined) {
                        this.frozen_days = data.frozen_days;
                    }
                }
            }
            get frozen_amount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set frozen_amount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get frozen_days() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set frozen_days(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                frozen_amount?: number;
                frozen_days?: number;
            }): FrozenSupply {
                const message = new FrozenSupply({});
                if (data.frozen_amount != null) {
                    message.frozen_amount = data.frozen_amount;
                }
                if (data.frozen_days != null) {
                    message.frozen_days = data.frozen_days;
                }
                return message;
            }
            toObject() {
                const data: {
                    frozen_amount?: number;
                    frozen_days?: number;
                } = {};
                if (this.frozen_amount != null) {
                    data.frozen_amount = this.frozen_amount;
                }
                if (this.frozen_days != null) {
                    data.frozen_days = this.frozen_days;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.frozen_amount != 0)
                    writer.writeInt64(1, this.frozen_amount);
                if (this.frozen_days != 0)
                    writer.writeInt64(2, this.frozen_days);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FrozenSupply {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FrozenSupply();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.frozen_amount = reader.readInt64();
                            break;
                        case 2:
                            message.frozen_days = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FrozenSupply {
                return FrozenSupply.deserialize(bytes);
            }
        }
    }
    export class TransferAssetContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            asset_name?: Uint8Array;
            owner_address?: Uint8Array;
            to_address?: Uint8Array;
            amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("asset_name" in data && data.asset_name != undefined) {
                    this.asset_name = data.asset_name;
                }
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("to_address" in data && data.to_address != undefined) {
                    this.to_address = data.to_address;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get asset_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set asset_name(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get to_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set to_address(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            asset_name?: Uint8Array;
            owner_address?: Uint8Array;
            to_address?: Uint8Array;
            amount?: number;
        }): TransferAssetContract {
            const message = new TransferAssetContract({});
            if (data.asset_name != null) {
                message.asset_name = data.asset_name;
            }
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.to_address != null) {
                message.to_address = data.to_address;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                asset_name?: Uint8Array;
                owner_address?: Uint8Array;
                to_address?: Uint8Array;
                amount?: number;
            } = {};
            if (this.asset_name != null) {
                data.asset_name = this.asset_name;
            }
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.to_address != null) {
                data.to_address = this.to_address;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.asset_name.length)
                writer.writeBytes(1, this.asset_name);
            if (this.owner_address.length)
                writer.writeBytes(2, this.owner_address);
            if (this.to_address.length)
                writer.writeBytes(3, this.to_address);
            if (this.amount != 0)
                writer.writeInt64(4, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferAssetContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferAssetContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.asset_name = reader.readBytes();
                        break;
                    case 2:
                        message.owner_address = reader.readBytes();
                        break;
                    case 3:
                        message.to_address = reader.readBytes();
                        break;
                    case 4:
                        message.amount = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferAssetContract {
            return TransferAssetContract.deserialize(bytes);
        }
    }
    export class UnfreezeAssetContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
        }): UnfreezeAssetContract {
            const message = new UnfreezeAssetContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnfreezeAssetContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnfreezeAssetContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnfreezeAssetContract {
            return UnfreezeAssetContract.deserialize(bytes);
        }
    }
    export class UpdateAssetContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            description?: Uint8Array;
            url?: Uint8Array;
            new_limit?: number;
            new_public_limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("new_limit" in data && data.new_limit != undefined) {
                    this.new_limit = data.new_limit;
                }
                if ("new_public_limit" in data && data.new_public_limit != undefined) {
                    this.new_public_limit = data.new_public_limit;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set description(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set url(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get new_limit() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set new_limit(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get new_public_limit() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set new_public_limit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            description?: Uint8Array;
            url?: Uint8Array;
            new_limit?: number;
            new_public_limit?: number;
        }): UpdateAssetContract {
            const message = new UpdateAssetContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.new_limit != null) {
                message.new_limit = data.new_limit;
            }
            if (data.new_public_limit != null) {
                message.new_public_limit = data.new_public_limit;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                description?: Uint8Array;
                url?: Uint8Array;
                new_limit?: number;
                new_public_limit?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.new_limit != null) {
                data.new_limit = this.new_limit;
            }
            if (this.new_public_limit != null) {
                data.new_public_limit = this.new_public_limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.description.length)
                writer.writeBytes(2, this.description);
            if (this.url.length)
                writer.writeBytes(3, this.url);
            if (this.new_limit != 0)
                writer.writeInt64(4, this.new_limit);
            if (this.new_public_limit != 0)
                writer.writeInt64(5, this.new_public_limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAssetContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAssetContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.description = reader.readBytes();
                        break;
                    case 3:
                        message.url = reader.readBytes();
                        break;
                    case 4:
                        message.new_limit = reader.readInt64();
                        break;
                    case 5:
                        message.new_public_limit = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAssetContract {
            return UpdateAssetContract.deserialize(bytes);
        }
    }
    export class ParticipateAssetIssueContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            to_address?: Uint8Array;
            asset_name?: Uint8Array;
            amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("to_address" in data && data.to_address != undefined) {
                    this.to_address = data.to_address;
                }
                if ("asset_name" in data && data.asset_name != undefined) {
                    this.asset_name = data.asset_name;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get to_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set to_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get asset_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set asset_name(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            to_address?: Uint8Array;
            asset_name?: Uint8Array;
            amount?: number;
        }): ParticipateAssetIssueContract {
            const message = new ParticipateAssetIssueContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.to_address != null) {
                message.to_address = data.to_address;
            }
            if (data.asset_name != null) {
                message.asset_name = data.asset_name;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                to_address?: Uint8Array;
                asset_name?: Uint8Array;
                amount?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.to_address != null) {
                data.to_address = this.to_address;
            }
            if (this.asset_name != null) {
                data.asset_name = this.asset_name;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.to_address.length)
                writer.writeBytes(2, this.to_address);
            if (this.asset_name.length)
                writer.writeBytes(3, this.asset_name);
            if (this.amount != 0)
                writer.writeInt64(4, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParticipateAssetIssueContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParticipateAssetIssueContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.to_address = reader.readBytes();
                        break;
                    case 3:
                        message.asset_name = reader.readBytes();
                        break;
                    case 4:
                        message.amount = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ParticipateAssetIssueContract {
            return ParticipateAssetIssueContract.deserialize(bytes);
        }
    }
}
