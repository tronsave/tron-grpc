/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: src/proto/contract/market_contract.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace protocol {
    export class MarketSellAssetContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            sell_token_id?: Uint8Array;
            sell_token_quantity?: number;
            buy_token_id?: Uint8Array;
            buy_token_quantity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("sell_token_id" in data && data.sell_token_id != undefined) {
                    this.sell_token_id = data.sell_token_id;
                }
                if ("sell_token_quantity" in data && data.sell_token_quantity != undefined) {
                    this.sell_token_quantity = data.sell_token_quantity;
                }
                if ("buy_token_id" in data && data.buy_token_id != undefined) {
                    this.buy_token_id = data.buy_token_id;
                }
                if ("buy_token_quantity" in data && data.buy_token_quantity != undefined) {
                    this.buy_token_quantity = data.buy_token_quantity;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get sell_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set sell_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get sell_token_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set sell_token_quantity(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get buy_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set buy_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get buy_token_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set buy_token_quantity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            sell_token_id?: Uint8Array;
            sell_token_quantity?: number;
            buy_token_id?: Uint8Array;
            buy_token_quantity?: number;
        }): MarketSellAssetContract {
            const message = new MarketSellAssetContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.sell_token_id != null) {
                message.sell_token_id = data.sell_token_id;
            }
            if (data.sell_token_quantity != null) {
                message.sell_token_quantity = data.sell_token_quantity;
            }
            if (data.buy_token_id != null) {
                message.buy_token_id = data.buy_token_id;
            }
            if (data.buy_token_quantity != null) {
                message.buy_token_quantity = data.buy_token_quantity;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                sell_token_id?: Uint8Array;
                sell_token_quantity?: number;
                buy_token_id?: Uint8Array;
                buy_token_quantity?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.sell_token_id != null) {
                data.sell_token_id = this.sell_token_id;
            }
            if (this.sell_token_quantity != null) {
                data.sell_token_quantity = this.sell_token_quantity;
            }
            if (this.buy_token_id != null) {
                data.buy_token_id = this.buy_token_id;
            }
            if (this.buy_token_quantity != null) {
                data.buy_token_quantity = this.buy_token_quantity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.sell_token_id.length)
                writer.writeBytes(2, this.sell_token_id);
            if (this.sell_token_quantity != 0)
                writer.writeInt64(3, this.sell_token_quantity);
            if (this.buy_token_id.length)
                writer.writeBytes(4, this.buy_token_id);
            if (this.buy_token_quantity != 0)
                writer.writeInt64(5, this.buy_token_quantity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketSellAssetContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketSellAssetContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.sell_token_id = reader.readBytes();
                        break;
                    case 3:
                        message.sell_token_quantity = reader.readInt64();
                        break;
                    case 4:
                        message.buy_token_id = reader.readBytes();
                        break;
                    case 5:
                        message.buy_token_quantity = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketSellAssetContract {
            return MarketSellAssetContract.deserialize(bytes);
        }
    }
    export class MarketCancelOrderContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            order_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("order_id" in data && data.order_id != undefined) {
                    this.order_id = data.order_id;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get order_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set order_id(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            order_id?: Uint8Array;
        }): MarketCancelOrderContract {
            const message = new MarketCancelOrderContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.order_id != null) {
                message.order_id = data.order_id;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                order_id?: Uint8Array;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.order_id != null) {
                data.order_id = this.order_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.order_id.length)
                writer.writeBytes(2, this.order_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketCancelOrderContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketCancelOrderContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.order_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketCancelOrderContract {
            return MarketCancelOrderContract.deserialize(bytes);
        }
    }
}
