/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: src/proto/contract/proposal_contract.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace protocol {
    export class ProposalApproveContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            proposal_id?: number;
            is_add_approval?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("is_add_approval" in data && data.is_add_approval != undefined) {
                    this.is_add_approval = data.is_add_approval;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_add_approval() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_add_approval(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            proposal_id?: number;
            is_add_approval?: boolean;
        }): ProposalApproveContract {
            const message = new ProposalApproveContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.is_add_approval != null) {
                message.is_add_approval = data.is_add_approval;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                proposal_id?: number;
                is_add_approval?: boolean;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.is_add_approval != null) {
                data.is_add_approval = this.is_add_approval;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.proposal_id != 0)
                writer.writeInt64(2, this.proposal_id);
            if (this.is_add_approval != false)
                writer.writeBool(3, this.is_add_approval);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProposalApproveContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProposalApproveContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.proposal_id = reader.readInt64();
                        break;
                    case 3:
                        message.is_add_approval = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProposalApproveContract {
            return ProposalApproveContract.deserialize(bytes);
        }
    }
    export class ProposalCreateContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            parameters?: Map<number, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("parameters" in data && data.parameters != undefined) {
                    this.parameters = data.parameters;
                }
            }
            if (!this.parameters)
                this.parameters = new Map();
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get parameters() {
            return pb_1.Message.getField(this, 2) as any as Map<number, number>;
        }
        set parameters(value: Map<number, number>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            parameters?: {
                [key: number]: number;
            };
        }): ProposalCreateContract {
            const message = new ProposalCreateContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (typeof data.parameters == "object") {
                message.parameters = new Map(Object.entries(data.parameters).map(([key, value]) => [Number(key), value]));
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                parameters?: {
                    [key: number]: number;
                };
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.parameters != null) {
                data.parameters = (Object.fromEntries)(this.parameters);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            for (const [key, value] of this.parameters) {
                writer.writeMessage(2, this.parameters, () => {
                    writer.writeInt64(1, key);
                    writer.writeInt64(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProposalCreateContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProposalCreateContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.parameters as any, reader, reader.readInt64, reader.readInt64));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProposalCreateContract {
            return ProposalCreateContract.deserialize(bytes);
        }
    }
    export class ProposalDeleteContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            proposal_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            proposal_id?: number;
        }): ProposalDeleteContract {
            const message = new ProposalDeleteContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                proposal_id?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.proposal_id != 0)
                writer.writeInt64(2, this.proposal_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProposalDeleteContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProposalDeleteContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.proposal_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProposalDeleteContract {
            return ProposalDeleteContract.deserialize(bytes);
        }
    }
}
