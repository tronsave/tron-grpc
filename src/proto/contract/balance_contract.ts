/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: src/proto/contract/balance_contract.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
export namespace protocol {
    export class FreezeBalanceContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            frozen_balance?: number;
            frozen_duration?: number;
            resource?: dependency_1.protocol.ResourceCode;
            receiver_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("frozen_balance" in data && data.frozen_balance != undefined) {
                    this.frozen_balance = data.frozen_balance;
                }
                if ("frozen_duration" in data && data.frozen_duration != undefined) {
                    this.frozen_duration = data.frozen_duration;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("receiver_address" in data && data.receiver_address != undefined) {
                    this.receiver_address = data.receiver_address;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get frozen_balance() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set frozen_balance(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get frozen_duration() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set frozen_duration(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 10, dependency_1.protocol.ResourceCode.BANDWIDTH) as dependency_1.protocol.ResourceCode;
        }
        set resource(value: dependency_1.protocol.ResourceCode) {
            pb_1.Message.setField(this, 10, value);
        }
        get receiver_address() {
            return pb_1.Message.getFieldWithDefault(this, 15, new Uint8Array(0)) as Uint8Array;
        }
        set receiver_address(value: Uint8Array) {
            pb_1.Message.setField(this, 15, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            frozen_balance?: number;
            frozen_duration?: number;
            resource?: dependency_1.protocol.ResourceCode;
            receiver_address?: Uint8Array;
        }): FreezeBalanceContract {
            const message = new FreezeBalanceContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.frozen_balance != null) {
                message.frozen_balance = data.frozen_balance;
            }
            if (data.frozen_duration != null) {
                message.frozen_duration = data.frozen_duration;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.receiver_address != null) {
                message.receiver_address = data.receiver_address;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                frozen_balance?: number;
                frozen_duration?: number;
                resource?: dependency_1.protocol.ResourceCode;
                receiver_address?: Uint8Array;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.frozen_balance != null) {
                data.frozen_balance = this.frozen_balance;
            }
            if (this.frozen_duration != null) {
                data.frozen_duration = this.frozen_duration;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.receiver_address != null) {
                data.receiver_address = this.receiver_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.frozen_balance != 0)
                writer.writeInt64(2, this.frozen_balance);
            if (this.frozen_duration != 0)
                writer.writeInt64(3, this.frozen_duration);
            if (this.resource != dependency_1.protocol.ResourceCode.BANDWIDTH)
                writer.writeEnum(10, this.resource);
            if (this.receiver_address.length)
                writer.writeBytes(15, this.receiver_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FreezeBalanceContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FreezeBalanceContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.frozen_balance = reader.readInt64();
                        break;
                    case 3:
                        message.frozen_duration = reader.readInt64();
                        break;
                    case 10:
                        message.resource = reader.readEnum();
                        break;
                    case 15:
                        message.receiver_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FreezeBalanceContract {
            return FreezeBalanceContract.deserialize(bytes);
        }
    }
    export class UnfreezeBalanceContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            resource?: dependency_1.protocol.ResourceCode;
            receiver_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("receiver_address" in data && data.receiver_address != undefined) {
                    this.receiver_address = data.receiver_address;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 10, dependency_1.protocol.ResourceCode.BANDWIDTH) as dependency_1.protocol.ResourceCode;
        }
        set resource(value: dependency_1.protocol.ResourceCode) {
            pb_1.Message.setField(this, 10, value);
        }
        get receiver_address() {
            return pb_1.Message.getFieldWithDefault(this, 15, new Uint8Array(0)) as Uint8Array;
        }
        set receiver_address(value: Uint8Array) {
            pb_1.Message.setField(this, 15, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            resource?: dependency_1.protocol.ResourceCode;
            receiver_address?: Uint8Array;
        }): UnfreezeBalanceContract {
            const message = new UnfreezeBalanceContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.receiver_address != null) {
                message.receiver_address = data.receiver_address;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                resource?: dependency_1.protocol.ResourceCode;
                receiver_address?: Uint8Array;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.receiver_address != null) {
                data.receiver_address = this.receiver_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.resource != dependency_1.protocol.ResourceCode.BANDWIDTH)
                writer.writeEnum(10, this.resource);
            if (this.receiver_address.length)
                writer.writeBytes(15, this.receiver_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnfreezeBalanceContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnfreezeBalanceContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 10:
                        message.resource = reader.readEnum();
                        break;
                    case 15:
                        message.receiver_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnfreezeBalanceContract {
            return UnfreezeBalanceContract.deserialize(bytes);
        }
    }
    export class WithdrawBalanceContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
        }): WithdrawBalanceContract {
            const message = new WithdrawBalanceContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawBalanceContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WithdrawBalanceContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawBalanceContract {
            return WithdrawBalanceContract.deserialize(bytes);
        }
    }
    export class TransferContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            to_address?: Uint8Array;
            amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("to_address" in data && data.to_address != undefined) {
                    this.to_address = data.to_address;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get to_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set to_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            to_address?: Uint8Array;
            amount?: number;
        }): TransferContract {
            const message = new TransferContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.to_address != null) {
                message.to_address = data.to_address;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                to_address?: Uint8Array;
                amount?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.to_address != null) {
                data.to_address = this.to_address;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.to_address.length)
                writer.writeBytes(2, this.to_address);
            if (this.amount != 0)
                writer.writeInt64(3, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.to_address = reader.readBytes();
                        break;
                    case 3:
                        message.amount = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferContract {
            return TransferContract.deserialize(bytes);
        }
    }
    export class TransactionBalanceTrace extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transaction_identifier?: Uint8Array;
            operation?: TransactionBalanceTrace.Operation[];
            type?: string;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transaction_identifier" in data && data.transaction_identifier != undefined) {
                    this.transaction_identifier = data.transaction_identifier;
                }
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get transaction_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set transaction_identifier(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionBalanceTrace.Operation, 2) as TransactionBalanceTrace.Operation[];
        }
        set operation(value: TransactionBalanceTrace.Operation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            transaction_identifier?: Uint8Array;
            operation?: ReturnType<typeof TransactionBalanceTrace.Operation.prototype.toObject>[];
            type?: string;
            status?: string;
        }): TransactionBalanceTrace {
            const message = new TransactionBalanceTrace({});
            if (data.transaction_identifier != null) {
                message.transaction_identifier = data.transaction_identifier;
            }
            if (data.operation != null) {
                message.operation = data.operation.map(item => TransactionBalanceTrace.Operation.fromObject(item));
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                transaction_identifier?: Uint8Array;
                operation?: ReturnType<typeof TransactionBalanceTrace.Operation.prototype.toObject>[];
                type?: string;
                status?: string;
            } = {};
            if (this.transaction_identifier != null) {
                data.transaction_identifier = this.transaction_identifier;
            }
            if (this.operation != null) {
                data.operation = this.operation.map((item: TransactionBalanceTrace.Operation) => item.toObject());
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transaction_identifier.length)
                writer.writeBytes(1, this.transaction_identifier);
            if (this.operation.length)
                writer.writeRepeatedMessage(2, this.operation, (item: TransactionBalanceTrace.Operation) => item.serialize(writer));
            if (this.type.length)
                writer.writeString(3, this.type);
            if (this.status.length)
                writer.writeString(4, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionBalanceTrace {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionBalanceTrace();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.transaction_identifier = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.operation, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TransactionBalanceTrace.Operation.deserialize(reader), TransactionBalanceTrace.Operation));
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionBalanceTrace {
            return TransactionBalanceTrace.deserialize(bytes);
        }
    }
    export namespace TransactionBalanceTrace {
        export class Operation extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                operation_identifier?: number;
                address?: Uint8Array;
                amount?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("operation_identifier" in data && data.operation_identifier != undefined) {
                        this.operation_identifier = data.operation_identifier;
                    }
                    if ("address" in data && data.address != undefined) {
                        this.address = data.address;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                }
            }
            get operation_identifier() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set operation_identifier(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get address() {
                return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
            }
            set address(value: Uint8Array) {
                pb_1.Message.setField(this, 2, value);
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                operation_identifier?: number;
                address?: Uint8Array;
                amount?: number;
            }): Operation {
                const message = new Operation({});
                if (data.operation_identifier != null) {
                    message.operation_identifier = data.operation_identifier;
                }
                if (data.address != null) {
                    message.address = data.address;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    operation_identifier?: number;
                    address?: Uint8Array;
                    amount?: number;
                } = {};
                if (this.operation_identifier != null) {
                    data.operation_identifier = this.operation_identifier;
                }
                if (this.address != null) {
                    data.address = this.address;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.operation_identifier != 0)
                    writer.writeInt64(1, this.operation_identifier);
                if (this.address.length)
                    writer.writeBytes(2, this.address);
                if (this.amount != 0)
                    writer.writeInt64(3, this.amount);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Operation {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Operation();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.operation_identifier = reader.readInt64();
                            break;
                        case 2:
                            message.address = reader.readBytes();
                            break;
                        case 3:
                            message.amount = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Operation {
                return Operation.deserialize(bytes);
            }
        }
    }
    export class BlockBalanceTrace extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_identifier?: BlockBalanceTrace.BlockIdentifier;
            timestamp?: number;
            transaction_balance_trace?: TransactionBalanceTrace[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_identifier" in data && data.block_identifier != undefined) {
                    this.block_identifier = data.block_identifier;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("transaction_balance_trace" in data && data.transaction_balance_trace != undefined) {
                    this.transaction_balance_trace = data.transaction_balance_trace;
                }
            }
        }
        get block_identifier() {
            return pb_1.Message.getWrapperField(this, BlockBalanceTrace.BlockIdentifier, 1) as BlockBalanceTrace.BlockIdentifier;
        }
        set block_identifier(value: BlockBalanceTrace.BlockIdentifier) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get transaction_balance_trace() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionBalanceTrace, 3) as TransactionBalanceTrace[];
        }
        set transaction_balance_trace(value: TransactionBalanceTrace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            block_identifier?: ReturnType<typeof BlockBalanceTrace.BlockIdentifier.prototype.toObject>;
            timestamp?: number;
            transaction_balance_trace?: ReturnType<typeof TransactionBalanceTrace.prototype.toObject>[];
        }): BlockBalanceTrace {
            const message = new BlockBalanceTrace({});
            if (data.block_identifier != null) {
                message.block_identifier = BlockBalanceTrace.BlockIdentifier.fromObject(data.block_identifier);
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.transaction_balance_trace != null) {
                message.transaction_balance_trace = data.transaction_balance_trace.map(item => TransactionBalanceTrace.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                block_identifier?: ReturnType<typeof BlockBalanceTrace.BlockIdentifier.prototype.toObject>;
                timestamp?: number;
                transaction_balance_trace?: ReturnType<typeof TransactionBalanceTrace.prototype.toObject>[];
            } = {};
            if (this.block_identifier != null) {
                data.block_identifier = this.block_identifier.toObject();
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.transaction_balance_trace != null) {
                data.transaction_balance_trace = this.transaction_balance_trace.map((item: TransactionBalanceTrace) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block_identifier)
                writer.writeMessage(1, this.block_identifier, () => this.block_identifier.serialize(writer));
            if (this.timestamp != 0)
                writer.writeInt64(2, this.timestamp);
            if (this.transaction_balance_trace.length)
                writer.writeRepeatedMessage(3, this.transaction_balance_trace, (item: TransactionBalanceTrace) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockBalanceTrace {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockBalanceTrace();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block_identifier, () => message.block_identifier = BlockBalanceTrace.BlockIdentifier.deserialize(reader));
                        break;
                    case 2:
                        message.timestamp = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.transaction_balance_trace, () => pb_1.Message.addToRepeatedWrapperField(message, 3, TransactionBalanceTrace.deserialize(reader), TransactionBalanceTrace));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockBalanceTrace {
            return BlockBalanceTrace.deserialize(bytes);
        }
    }
    export namespace BlockBalanceTrace {
        export class BlockIdentifier extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                hash?: Uint8Array;
                number?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("hash" in data && data.hash != undefined) {
                        this.hash = data.hash;
                    }
                    if ("number" in data && data.number != undefined) {
                        this.number = data.number;
                    }
                }
            }
            get hash() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set hash(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get number() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set number(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                hash?: Uint8Array;
                number?: number;
            }): BlockIdentifier {
                const message = new BlockIdentifier({});
                if (data.hash != null) {
                    message.hash = data.hash;
                }
                if (data.number != null) {
                    message.number = data.number;
                }
                return message;
            }
            toObject() {
                const data: {
                    hash?: Uint8Array;
                    number?: number;
                } = {};
                if (this.hash != null) {
                    data.hash = this.hash;
                }
                if (this.number != null) {
                    data.number = this.number;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.hash.length)
                    writer.writeBytes(1, this.hash);
                if (this.number != 0)
                    writer.writeInt64(2, this.number);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockIdentifier {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockIdentifier();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.hash = reader.readBytes();
                            break;
                        case 2:
                            message.number = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BlockIdentifier {
                return BlockIdentifier.deserialize(bytes);
            }
        }
    }
    export class AccountTrace extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balance?: number;
            placeholder?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("placeholder" in data && data.placeholder != undefined) {
                    this.placeholder = data.placeholder;
                }
            }
        }
        get balance() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set balance(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get placeholder() {
            return pb_1.Message.getFieldWithDefault(this, 99, 0) as number;
        }
        set placeholder(value: number) {
            pb_1.Message.setField(this, 99, value);
        }
        static fromObject(data: {
            balance?: number;
            placeholder?: number;
        }): AccountTrace {
            const message = new AccountTrace({});
            if (data.balance != null) {
                message.balance = data.balance;
            }
            if (data.placeholder != null) {
                message.placeholder = data.placeholder;
            }
            return message;
        }
        toObject() {
            const data: {
                balance?: number;
                placeholder?: number;
            } = {};
            if (this.balance != null) {
                data.balance = this.balance;
            }
            if (this.placeholder != null) {
                data.placeholder = this.placeholder;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.balance != 0)
                writer.writeInt64(1, this.balance);
            if (this.placeholder != 0)
                writer.writeInt64(99, this.placeholder);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountTrace {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountTrace();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.balance = reader.readInt64();
                        break;
                    case 99:
                        message.placeholder = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountTrace {
            return AccountTrace.deserialize(bytes);
        }
    }
    export class AccountIdentifier extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: Uint8Array;
        }): AccountIdentifier {
            const message = new AccountIdentifier({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: Uint8Array;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeBytes(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountIdentifier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountIdentifier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountIdentifier {
            return AccountIdentifier.deserialize(bytes);
        }
    }
    export class AccountBalanceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_identifier?: AccountIdentifier;
            block_identifier?: BlockBalanceTrace.BlockIdentifier;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_identifier" in data && data.account_identifier != undefined) {
                    this.account_identifier = data.account_identifier;
                }
                if ("block_identifier" in data && data.block_identifier != undefined) {
                    this.block_identifier = data.block_identifier;
                }
            }
        }
        get account_identifier() {
            return pb_1.Message.getWrapperField(this, AccountIdentifier, 1) as AccountIdentifier;
        }
        set account_identifier(value: AccountIdentifier) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_account_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get block_identifier() {
            return pb_1.Message.getWrapperField(this, BlockBalanceTrace.BlockIdentifier, 2) as BlockBalanceTrace.BlockIdentifier;
        }
        set block_identifier(value: BlockBalanceTrace.BlockIdentifier) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            account_identifier?: ReturnType<typeof AccountIdentifier.prototype.toObject>;
            block_identifier?: ReturnType<typeof BlockBalanceTrace.BlockIdentifier.prototype.toObject>;
        }): AccountBalanceRequest {
            const message = new AccountBalanceRequest({});
            if (data.account_identifier != null) {
                message.account_identifier = AccountIdentifier.fromObject(data.account_identifier);
            }
            if (data.block_identifier != null) {
                message.block_identifier = BlockBalanceTrace.BlockIdentifier.fromObject(data.block_identifier);
            }
            return message;
        }
        toObject() {
            const data: {
                account_identifier?: ReturnType<typeof AccountIdentifier.prototype.toObject>;
                block_identifier?: ReturnType<typeof BlockBalanceTrace.BlockIdentifier.prototype.toObject>;
            } = {};
            if (this.account_identifier != null) {
                data.account_identifier = this.account_identifier.toObject();
            }
            if (this.block_identifier != null) {
                data.block_identifier = this.block_identifier.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_account_identifier)
                writer.writeMessage(1, this.account_identifier, () => this.account_identifier.serialize(writer));
            if (this.has_block_identifier)
                writer.writeMessage(2, this.block_identifier, () => this.block_identifier.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountBalanceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountBalanceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account_identifier, () => message.account_identifier = AccountIdentifier.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.block_identifier, () => message.block_identifier = BlockBalanceTrace.BlockIdentifier.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountBalanceRequest {
            return AccountBalanceRequest.deserialize(bytes);
        }
    }
    export class AccountBalanceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balance?: number;
            block_identifier?: BlockBalanceTrace.BlockIdentifier;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("block_identifier" in data && data.block_identifier != undefined) {
                    this.block_identifier = data.block_identifier;
                }
            }
        }
        get balance() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set balance(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_identifier() {
            return pb_1.Message.getWrapperField(this, BlockBalanceTrace.BlockIdentifier, 2) as BlockBalanceTrace.BlockIdentifier;
        }
        set block_identifier(value: BlockBalanceTrace.BlockIdentifier) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            balance?: number;
            block_identifier?: ReturnType<typeof BlockBalanceTrace.BlockIdentifier.prototype.toObject>;
        }): AccountBalanceResponse {
            const message = new AccountBalanceResponse({});
            if (data.balance != null) {
                message.balance = data.balance;
            }
            if (data.block_identifier != null) {
                message.block_identifier = BlockBalanceTrace.BlockIdentifier.fromObject(data.block_identifier);
            }
            return message;
        }
        toObject() {
            const data: {
                balance?: number;
                block_identifier?: ReturnType<typeof BlockBalanceTrace.BlockIdentifier.prototype.toObject>;
            } = {};
            if (this.balance != null) {
                data.balance = this.balance;
            }
            if (this.block_identifier != null) {
                data.block_identifier = this.block_identifier.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.balance != 0)
                writer.writeInt64(1, this.balance);
            if (this.has_block_identifier)
                writer.writeMessage(2, this.block_identifier, () => this.block_identifier.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountBalanceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountBalanceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.balance = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.block_identifier, () => message.block_identifier = BlockBalanceTrace.BlockIdentifier.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountBalanceResponse {
            return AccountBalanceResponse.deserialize(bytes);
        }
    }
    export class FreezeBalanceV2Contract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            frozen_balance?: number;
            resource?: dependency_1.protocol.ResourceCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("frozen_balance" in data && data.frozen_balance != undefined) {
                    this.frozen_balance = data.frozen_balance;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get frozen_balance() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set frozen_balance(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.protocol.ResourceCode.BANDWIDTH) as dependency_1.protocol.ResourceCode;
        }
        set resource(value: dependency_1.protocol.ResourceCode) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            frozen_balance?: number;
            resource?: dependency_1.protocol.ResourceCode;
        }): FreezeBalanceV2Contract {
            const message = new FreezeBalanceV2Contract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.frozen_balance != null) {
                message.frozen_balance = data.frozen_balance;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                frozen_balance?: number;
                resource?: dependency_1.protocol.ResourceCode;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.frozen_balance != null) {
                data.frozen_balance = this.frozen_balance;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.frozen_balance != 0)
                writer.writeInt64(2, this.frozen_balance);
            if (this.resource != dependency_1.protocol.ResourceCode.BANDWIDTH)
                writer.writeEnum(3, this.resource);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FreezeBalanceV2Contract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FreezeBalanceV2Contract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.frozen_balance = reader.readInt64();
                        break;
                    case 3:
                        message.resource = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FreezeBalanceV2Contract {
            return FreezeBalanceV2Contract.deserialize(bytes);
        }
    }
    export class UnfreezeBalanceV2Contract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            unfreeze_balance?: number;
            resource?: dependency_1.protocol.ResourceCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("unfreeze_balance" in data && data.unfreeze_balance != undefined) {
                    this.unfreeze_balance = data.unfreeze_balance;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get unfreeze_balance() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set unfreeze_balance(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.protocol.ResourceCode.BANDWIDTH) as dependency_1.protocol.ResourceCode;
        }
        set resource(value: dependency_1.protocol.ResourceCode) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            unfreeze_balance?: number;
            resource?: dependency_1.protocol.ResourceCode;
        }): UnfreezeBalanceV2Contract {
            const message = new UnfreezeBalanceV2Contract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.unfreeze_balance != null) {
                message.unfreeze_balance = data.unfreeze_balance;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                unfreeze_balance?: number;
                resource?: dependency_1.protocol.ResourceCode;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.unfreeze_balance != null) {
                data.unfreeze_balance = this.unfreeze_balance;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.unfreeze_balance != 0)
                writer.writeInt64(2, this.unfreeze_balance);
            if (this.resource != dependency_1.protocol.ResourceCode.BANDWIDTH)
                writer.writeEnum(3, this.resource);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnfreezeBalanceV2Contract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnfreezeBalanceV2Contract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.unfreeze_balance = reader.readInt64();
                        break;
                    case 3:
                        message.resource = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnfreezeBalanceV2Contract {
            return UnfreezeBalanceV2Contract.deserialize(bytes);
        }
    }
    export class WithdrawExpireUnfreezeContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
        }): WithdrawExpireUnfreezeContract {
            const message = new WithdrawExpireUnfreezeContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawExpireUnfreezeContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WithdrawExpireUnfreezeContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithdrawExpireUnfreezeContract {
            return WithdrawExpireUnfreezeContract.deserialize(bytes);
        }
    }
    export class DelegateResourceContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            resource?: dependency_1.protocol.ResourceCode;
            balance?: number;
            receiver_address?: Uint8Array;
            lock?: boolean;
            lock_period?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("receiver_address" in data && data.receiver_address != undefined) {
                    this.receiver_address = data.receiver_address;
                }
                if ("lock" in data && data.lock != undefined) {
                    this.lock = data.lock;
                }
                if ("lock_period" in data && data.lock_period != undefined) {
                    this.lock_period = data.lock_period;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.protocol.ResourceCode.BANDWIDTH) as dependency_1.protocol.ResourceCode;
        }
        set resource(value: dependency_1.protocol.ResourceCode) {
            pb_1.Message.setField(this, 2, value);
        }
        get balance() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set balance(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get receiver_address() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set receiver_address(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get lock() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set lock(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get lock_period() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set lock_period(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            resource?: dependency_1.protocol.ResourceCode;
            balance?: number;
            receiver_address?: Uint8Array;
            lock?: boolean;
            lock_period?: number;
        }): DelegateResourceContract {
            const message = new DelegateResourceContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.balance != null) {
                message.balance = data.balance;
            }
            if (data.receiver_address != null) {
                message.receiver_address = data.receiver_address;
            }
            if (data.lock != null) {
                message.lock = data.lock;
            }
            if (data.lock_period != null) {
                message.lock_period = data.lock_period;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                resource?: dependency_1.protocol.ResourceCode;
                balance?: number;
                receiver_address?: Uint8Array;
                lock?: boolean;
                lock_period?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.balance != null) {
                data.balance = this.balance;
            }
            if (this.receiver_address != null) {
                data.receiver_address = this.receiver_address;
            }
            if (this.lock != null) {
                data.lock = this.lock;
            }
            if (this.lock_period != null) {
                data.lock_period = this.lock_period;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.resource != dependency_1.protocol.ResourceCode.BANDWIDTH)
                writer.writeEnum(2, this.resource);
            if (this.balance != 0)
                writer.writeInt64(3, this.balance);
            if (this.receiver_address.length)
                writer.writeBytes(4, this.receiver_address);
            if (this.lock != false)
                writer.writeBool(5, this.lock);
            if (this.lock_period != 0)
                writer.writeInt64(6, this.lock_period);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelegateResourceContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelegateResourceContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.resource = reader.readEnum();
                        break;
                    case 3:
                        message.balance = reader.readInt64();
                        break;
                    case 4:
                        message.receiver_address = reader.readBytes();
                        break;
                    case 5:
                        message.lock = reader.readBool();
                        break;
                    case 6:
                        message.lock_period = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelegateResourceContract {
            return DelegateResourceContract.deserialize(bytes);
        }
    }
    export class UnDelegateResourceContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            resource?: dependency_1.protocol.ResourceCode;
            balance?: number;
            receiver_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("receiver_address" in data && data.receiver_address != undefined) {
                    this.receiver_address = data.receiver_address;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.protocol.ResourceCode.BANDWIDTH) as dependency_1.protocol.ResourceCode;
        }
        set resource(value: dependency_1.protocol.ResourceCode) {
            pb_1.Message.setField(this, 2, value);
        }
        get balance() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set balance(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get receiver_address() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set receiver_address(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            resource?: dependency_1.protocol.ResourceCode;
            balance?: number;
            receiver_address?: Uint8Array;
        }): UnDelegateResourceContract {
            const message = new UnDelegateResourceContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.balance != null) {
                message.balance = data.balance;
            }
            if (data.receiver_address != null) {
                message.receiver_address = data.receiver_address;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                resource?: dependency_1.protocol.ResourceCode;
                balance?: number;
                receiver_address?: Uint8Array;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.balance != null) {
                data.balance = this.balance;
            }
            if (this.receiver_address != null) {
                data.receiver_address = this.receiver_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.resource != dependency_1.protocol.ResourceCode.BANDWIDTH)
                writer.writeEnum(2, this.resource);
            if (this.balance != 0)
                writer.writeInt64(3, this.balance);
            if (this.receiver_address.length)
                writer.writeBytes(4, this.receiver_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnDelegateResourceContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnDelegateResourceContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.resource = reader.readEnum();
                        break;
                    case 3:
                        message.balance = reader.readInt64();
                        break;
                    case 4:
                        message.receiver_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnDelegateResourceContract {
            return UnDelegateResourceContract.deserialize(bytes);
        }
    }
    export class CancelAllUnfreezeV2Contract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
        }): CancelAllUnfreezeV2Contract {
            const message = new CancelAllUnfreezeV2Contract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelAllUnfreezeV2Contract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelAllUnfreezeV2Contract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CancelAllUnfreezeV2Contract {
            return CancelAllUnfreezeV2Contract.deserialize(bytes);
        }
    }
}
