/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: src/proto/contract/storage_contract.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace protocol {
    export class BuyStorageBytesContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            bytes?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("bytes" in data && data.bytes != undefined) {
                    this.bytes = data.bytes;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get bytes() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set bytes(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            bytes?: number;
        }): BuyStorageBytesContract {
            const message = new BuyStorageBytesContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.bytes != null) {
                message.bytes = data.bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                bytes?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.bytes != null) {
                data.bytes = this.bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.bytes != 0)
                writer.writeInt64(2, this.bytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BuyStorageBytesContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BuyStorageBytesContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.bytes = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BuyStorageBytesContract {
            return BuyStorageBytesContract.deserialize(bytes);
        }
    }
    export class BuyStorageContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            quant?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("quant" in data && data.quant != undefined) {
                    this.quant = data.quant;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get quant() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set quant(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            quant?: number;
        }): BuyStorageContract {
            const message = new BuyStorageContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.quant != null) {
                message.quant = data.quant;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                quant?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.quant != null) {
                data.quant = this.quant;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.quant != 0)
                writer.writeInt64(2, this.quant);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BuyStorageContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BuyStorageContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.quant = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BuyStorageContract {
            return BuyStorageContract.deserialize(bytes);
        }
    }
    export class SellStorageContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            storage_bytes?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("storage_bytes" in data && data.storage_bytes != undefined) {
                    this.storage_bytes = data.storage_bytes;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get storage_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set storage_bytes(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            storage_bytes?: number;
        }): SellStorageContract {
            const message = new SellStorageContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.storage_bytes != null) {
                message.storage_bytes = data.storage_bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                storage_bytes?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.storage_bytes != null) {
                data.storage_bytes = this.storage_bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.storage_bytes != 0)
                writer.writeInt64(2, this.storage_bytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SellStorageContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SellStorageContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.storage_bytes = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SellStorageContract {
            return SellStorageContract.deserialize(bytes);
        }
    }
    export class UpdateBrokerageContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            brokerage?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("brokerage" in data && data.brokerage != undefined) {
                    this.brokerage = data.brokerage;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get brokerage() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set brokerage(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            brokerage?: number;
        }): UpdateBrokerageContract {
            const message = new UpdateBrokerageContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.brokerage != null) {
                message.brokerage = data.brokerage;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                brokerage?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.brokerage != null) {
                data.brokerage = this.brokerage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.brokerage != 0)
                writer.writeInt32(2, this.brokerage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateBrokerageContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateBrokerageContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.brokerage = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateBrokerageContract {
            return UpdateBrokerageContract.deserialize(bytes);
        }
    }
}
