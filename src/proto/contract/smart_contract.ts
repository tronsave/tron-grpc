/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: src/proto/contract/smart_contract.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace protocol {
    export class SmartContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            origin_address?: Uint8Array;
            contract_address?: Uint8Array;
            abi?: SmartContract.ABI;
            bytecode?: Uint8Array;
            call_value?: number;
            consume_user_resource_percent?: number;
            name?: string;
            origin_energy_limit?: number;
            code_hash?: Uint8Array;
            trx_hash?: Uint8Array;
            version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("origin_address" in data && data.origin_address != undefined) {
                    this.origin_address = data.origin_address;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("abi" in data && data.abi != undefined) {
                    this.abi = data.abi;
                }
                if ("bytecode" in data && data.bytecode != undefined) {
                    this.bytecode = data.bytecode;
                }
                if ("call_value" in data && data.call_value != undefined) {
                    this.call_value = data.call_value;
                }
                if ("consume_user_resource_percent" in data && data.consume_user_resource_percent != undefined) {
                    this.consume_user_resource_percent = data.consume_user_resource_percent;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("origin_energy_limit" in data && data.origin_energy_limit != undefined) {
                    this.origin_energy_limit = data.origin_energy_limit;
                }
                if ("code_hash" in data && data.code_hash != undefined) {
                    this.code_hash = data.code_hash;
                }
                if ("trx_hash" in data && data.trx_hash != undefined) {
                    this.trx_hash = data.trx_hash;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get origin_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set origin_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set contract_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get abi() {
            return pb_1.Message.getWrapperField(this, SmartContract.ABI, 3) as SmartContract.ABI;
        }
        set abi(value: SmartContract.ABI) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_abi() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get bytecode() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set bytecode(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get call_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set call_value(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get consume_user_resource_percent() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set consume_user_resource_percent(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get origin_energy_limit() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set origin_energy_limit(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get code_hash() {
            return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
        }
        set code_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 9, value);
        }
        get trx_hash() {
            return pb_1.Message.getFieldWithDefault(this, 10, new Uint8Array(0)) as Uint8Array;
        }
        set trx_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 10, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            origin_address?: Uint8Array;
            contract_address?: Uint8Array;
            abi?: ReturnType<typeof SmartContract.ABI.prototype.toObject>;
            bytecode?: Uint8Array;
            call_value?: number;
            consume_user_resource_percent?: number;
            name?: string;
            origin_energy_limit?: number;
            code_hash?: Uint8Array;
            trx_hash?: Uint8Array;
            version?: number;
        }): SmartContract {
            const message = new SmartContract({});
            if (data.origin_address != null) {
                message.origin_address = data.origin_address;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.abi != null) {
                message.abi = SmartContract.ABI.fromObject(data.abi);
            }
            if (data.bytecode != null) {
                message.bytecode = data.bytecode;
            }
            if (data.call_value != null) {
                message.call_value = data.call_value;
            }
            if (data.consume_user_resource_percent != null) {
                message.consume_user_resource_percent = data.consume_user_resource_percent;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.origin_energy_limit != null) {
                message.origin_energy_limit = data.origin_energy_limit;
            }
            if (data.code_hash != null) {
                message.code_hash = data.code_hash;
            }
            if (data.trx_hash != null) {
                message.trx_hash = data.trx_hash;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            return message;
        }
        toObject() {
            const data: {
                origin_address?: Uint8Array;
                contract_address?: Uint8Array;
                abi?: ReturnType<typeof SmartContract.ABI.prototype.toObject>;
                bytecode?: Uint8Array;
                call_value?: number;
                consume_user_resource_percent?: number;
                name?: string;
                origin_energy_limit?: number;
                code_hash?: Uint8Array;
                trx_hash?: Uint8Array;
                version?: number;
            } = {};
            if (this.origin_address != null) {
                data.origin_address = this.origin_address;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.abi != null) {
                data.abi = this.abi.toObject();
            }
            if (this.bytecode != null) {
                data.bytecode = this.bytecode;
            }
            if (this.call_value != null) {
                data.call_value = this.call_value;
            }
            if (this.consume_user_resource_percent != null) {
                data.consume_user_resource_percent = this.consume_user_resource_percent;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.origin_energy_limit != null) {
                data.origin_energy_limit = this.origin_energy_limit;
            }
            if (this.code_hash != null) {
                data.code_hash = this.code_hash;
            }
            if (this.trx_hash != null) {
                data.trx_hash = this.trx_hash;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.origin_address.length)
                writer.writeBytes(1, this.origin_address);
            if (this.contract_address.length)
                writer.writeBytes(2, this.contract_address);
            if (this.has_abi)
                writer.writeMessage(3, this.abi, () => this.abi.serialize(writer));
            if (this.bytecode.length)
                writer.writeBytes(4, this.bytecode);
            if (this.call_value != 0)
                writer.writeInt64(5, this.call_value);
            if (this.consume_user_resource_percent != 0)
                writer.writeInt64(6, this.consume_user_resource_percent);
            if (this.name.length)
                writer.writeString(7, this.name);
            if (this.origin_energy_limit != 0)
                writer.writeInt64(8, this.origin_energy_limit);
            if (this.code_hash.length)
                writer.writeBytes(9, this.code_hash);
            if (this.trx_hash.length)
                writer.writeBytes(10, this.trx_hash);
            if (this.version != 0)
                writer.writeInt32(11, this.version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.origin_address = reader.readBytes();
                        break;
                    case 2:
                        message.contract_address = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.abi, () => message.abi = SmartContract.ABI.deserialize(reader));
                        break;
                    case 4:
                        message.bytecode = reader.readBytes();
                        break;
                    case 5:
                        message.call_value = reader.readInt64();
                        break;
                    case 6:
                        message.consume_user_resource_percent = reader.readInt64();
                        break;
                    case 7:
                        message.name = reader.readString();
                        break;
                    case 8:
                        message.origin_energy_limit = reader.readInt64();
                        break;
                    case 9:
                        message.code_hash = reader.readBytes();
                        break;
                    case 10:
                        message.trx_hash = reader.readBytes();
                        break;
                    case 11:
                        message.version = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartContract {
            return SmartContract.deserialize(bytes);
        }
    }
    export namespace SmartContract {
        export class ABI extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                entrys?: SmartContract.ABI.Entry[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("entrys" in data && data.entrys != undefined) {
                        this.entrys = data.entrys;
                    }
                }
            }
            get entrys() {
                return pb_1.Message.getRepeatedWrapperField(this, SmartContract.ABI.Entry, 1) as SmartContract.ABI.Entry[];
            }
            set entrys(value: SmartContract.ABI.Entry[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data: {
                entrys?: ReturnType<typeof SmartContract.ABI.Entry.prototype.toObject>[];
            }): ABI {
                const message = new ABI({});
                if (data.entrys != null) {
                    message.entrys = data.entrys.map(item => SmartContract.ABI.Entry.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    entrys?: ReturnType<typeof SmartContract.ABI.Entry.prototype.toObject>[];
                } = {};
                if (this.entrys != null) {
                    data.entrys = this.entrys.map((item: SmartContract.ABI.Entry) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.entrys.length)
                    writer.writeRepeatedMessage(1, this.entrys, (item: SmartContract.ABI.Entry) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ABI {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ABI();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.entrys, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SmartContract.ABI.Entry.deserialize(reader), SmartContract.ABI.Entry));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ABI {
                return ABI.deserialize(bytes);
            }
        }
        export namespace ABI {
            export class Entry extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    anonymous?: boolean;
                    constant?: boolean;
                    name?: string;
                    inputs?: SmartContract.ABI.Entry.Param[];
                    outputs?: SmartContract.ABI.Entry.Param[];
                    type?: SmartContract.ABI.Entry.EntryType;
                    payable?: boolean;
                    stateMutability?: SmartContract.ABI.Entry.StateMutabilityType;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("anonymous" in data && data.anonymous != undefined) {
                            this.anonymous = data.anonymous;
                        }
                        if ("constant" in data && data.constant != undefined) {
                            this.constant = data.constant;
                        }
                        if ("name" in data && data.name != undefined) {
                            this.name = data.name;
                        }
                        if ("inputs" in data && data.inputs != undefined) {
                            this.inputs = data.inputs;
                        }
                        if ("outputs" in data && data.outputs != undefined) {
                            this.outputs = data.outputs;
                        }
                        if ("type" in data && data.type != undefined) {
                            this.type = data.type;
                        }
                        if ("payable" in data && data.payable != undefined) {
                            this.payable = data.payable;
                        }
                        if ("stateMutability" in data && data.stateMutability != undefined) {
                            this.stateMutability = data.stateMutability;
                        }
                    }
                }
                get anonymous() {
                    return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
                }
                set anonymous(value: boolean) {
                    pb_1.Message.setField(this, 1, value);
                }
                get constant() {
                    return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
                }
                set constant(value: boolean) {
                    pb_1.Message.setField(this, 2, value);
                }
                get name() {
                    return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
                }
                set name(value: string) {
                    pb_1.Message.setField(this, 3, value);
                }
                get inputs() {
                    return pb_1.Message.getRepeatedWrapperField(this, SmartContract.ABI.Entry.Param, 4) as SmartContract.ABI.Entry.Param[];
                }
                set inputs(value: SmartContract.ABI.Entry.Param[]) {
                    pb_1.Message.setRepeatedWrapperField(this, 4, value);
                }
                get outputs() {
                    return pb_1.Message.getRepeatedWrapperField(this, SmartContract.ABI.Entry.Param, 5) as SmartContract.ABI.Entry.Param[];
                }
                set outputs(value: SmartContract.ABI.Entry.Param[]) {
                    pb_1.Message.setRepeatedWrapperField(this, 5, value);
                }
                get type() {
                    return pb_1.Message.getFieldWithDefault(this, 6, SmartContract.ABI.Entry.EntryType.UnknownEntryType) as SmartContract.ABI.Entry.EntryType;
                }
                set type(value: SmartContract.ABI.Entry.EntryType) {
                    pb_1.Message.setField(this, 6, value);
                }
                get payable() {
                    return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
                }
                set payable(value: boolean) {
                    pb_1.Message.setField(this, 7, value);
                }
                get stateMutability() {
                    return pb_1.Message.getFieldWithDefault(this, 8, SmartContract.ABI.Entry.StateMutabilityType.UnknownMutabilityType) as SmartContract.ABI.Entry.StateMutabilityType;
                }
                set stateMutability(value: SmartContract.ABI.Entry.StateMutabilityType) {
                    pb_1.Message.setField(this, 8, value);
                }
                static fromObject(data: {
                    anonymous?: boolean;
                    constant?: boolean;
                    name?: string;
                    inputs?: ReturnType<typeof SmartContract.ABI.Entry.Param.prototype.toObject>[];
                    outputs?: ReturnType<typeof SmartContract.ABI.Entry.Param.prototype.toObject>[];
                    type?: SmartContract.ABI.Entry.EntryType;
                    payable?: boolean;
                    stateMutability?: SmartContract.ABI.Entry.StateMutabilityType;
                }): Entry {
                    const message = new Entry({});
                    if (data.anonymous != null) {
                        message.anonymous = data.anonymous;
                    }
                    if (data.constant != null) {
                        message.constant = data.constant;
                    }
                    if (data.name != null) {
                        message.name = data.name;
                    }
                    if (data.inputs != null) {
                        message.inputs = data.inputs.map(item => SmartContract.ABI.Entry.Param.fromObject(item));
                    }
                    if (data.outputs != null) {
                        message.outputs = data.outputs.map(item => SmartContract.ABI.Entry.Param.fromObject(item));
                    }
                    if (data.type != null) {
                        message.type = data.type;
                    }
                    if (data.payable != null) {
                        message.payable = data.payable;
                    }
                    if (data.stateMutability != null) {
                        message.stateMutability = data.stateMutability;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        anonymous?: boolean;
                        constant?: boolean;
                        name?: string;
                        inputs?: ReturnType<typeof SmartContract.ABI.Entry.Param.prototype.toObject>[];
                        outputs?: ReturnType<typeof SmartContract.ABI.Entry.Param.prototype.toObject>[];
                        type?: SmartContract.ABI.Entry.EntryType;
                        payable?: boolean;
                        stateMutability?: SmartContract.ABI.Entry.StateMutabilityType;
                    } = {};
                    if (this.anonymous != null) {
                        data.anonymous = this.anonymous;
                    }
                    if (this.constant != null) {
                        data.constant = this.constant;
                    }
                    if (this.name != null) {
                        data.name = this.name;
                    }
                    if (this.inputs != null) {
                        data.inputs = this.inputs.map((item: SmartContract.ABI.Entry.Param) => item.toObject());
                    }
                    if (this.outputs != null) {
                        data.outputs = this.outputs.map((item: SmartContract.ABI.Entry.Param) => item.toObject());
                    }
                    if (this.type != null) {
                        data.type = this.type;
                    }
                    if (this.payable != null) {
                        data.payable = this.payable;
                    }
                    if (this.stateMutability != null) {
                        data.stateMutability = this.stateMutability;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.anonymous != false)
                        writer.writeBool(1, this.anonymous);
                    if (this.constant != false)
                        writer.writeBool(2, this.constant);
                    if (this.name.length)
                        writer.writeString(3, this.name);
                    if (this.inputs.length)
                        writer.writeRepeatedMessage(4, this.inputs, (item: SmartContract.ABI.Entry.Param) => item.serialize(writer));
                    if (this.outputs.length)
                        writer.writeRepeatedMessage(5, this.outputs, (item: SmartContract.ABI.Entry.Param) => item.serialize(writer));
                    if (this.type != SmartContract.ABI.Entry.EntryType.UnknownEntryType)
                        writer.writeEnum(6, this.type);
                    if (this.payable != false)
                        writer.writeBool(7, this.payable);
                    if (this.stateMutability != SmartContract.ABI.Entry.StateMutabilityType.UnknownMutabilityType)
                        writer.writeEnum(8, this.stateMutability);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Entry {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Entry();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.anonymous = reader.readBool();
                                break;
                            case 2:
                                message.constant = reader.readBool();
                                break;
                            case 3:
                                message.name = reader.readString();
                                break;
                            case 4:
                                reader.readMessage(message.inputs, () => pb_1.Message.addToRepeatedWrapperField(message, 4, SmartContract.ABI.Entry.Param.deserialize(reader), SmartContract.ABI.Entry.Param));
                                break;
                            case 5:
                                reader.readMessage(message.outputs, () => pb_1.Message.addToRepeatedWrapperField(message, 5, SmartContract.ABI.Entry.Param.deserialize(reader), SmartContract.ABI.Entry.Param));
                                break;
                            case 6:
                                message.type = reader.readEnum();
                                break;
                            case 7:
                                message.payable = reader.readBool();
                                break;
                            case 8:
                                message.stateMutability = reader.readEnum();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Entry {
                    return Entry.deserialize(bytes);
                }
            }
            export namespace Entry {
                export enum EntryType {
                    UnknownEntryType = 0,
                    Constructor = 1,
                    Function = 2,
                    Event = 3,
                    Fallback = 4,
                    Receive = 5,
                    Error = 6
                }
                export enum StateMutabilityType {
                    UnknownMutabilityType = 0,
                    Pure = 1,
                    View = 2,
                    Nonpayable = 3,
                    Payable = 4
                }
                export class Param extends pb_1.Message {
                    #one_of_decls: number[][] = [];
                    constructor(data?: any[] | {
                        indexed?: boolean;
                        name?: string;
                        type?: string;
                    }) {
                        super();
                        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                        if (!Array.isArray(data) && typeof data == "object") {
                            if ("indexed" in data && data.indexed != undefined) {
                                this.indexed = data.indexed;
                            }
                            if ("name" in data && data.name != undefined) {
                                this.name = data.name;
                            }
                            if ("type" in data && data.type != undefined) {
                                this.type = data.type;
                            }
                        }
                    }
                    get indexed() {
                        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
                    }
                    set indexed(value: boolean) {
                        pb_1.Message.setField(this, 1, value);
                    }
                    get name() {
                        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
                    }
                    set name(value: string) {
                        pb_1.Message.setField(this, 2, value);
                    }
                    get type() {
                        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
                    }
                    set type(value: string) {
                        pb_1.Message.setField(this, 3, value);
                    }
                    static fromObject(data: {
                        indexed?: boolean;
                        name?: string;
                        type?: string;
                    }): Param {
                        const message = new Param({});
                        if (data.indexed != null) {
                            message.indexed = data.indexed;
                        }
                        if (data.name != null) {
                            message.name = data.name;
                        }
                        if (data.type != null) {
                            message.type = data.type;
                        }
                        return message;
                    }
                    toObject() {
                        const data: {
                            indexed?: boolean;
                            name?: string;
                            type?: string;
                        } = {};
                        if (this.indexed != null) {
                            data.indexed = this.indexed;
                        }
                        if (this.name != null) {
                            data.name = this.name;
                        }
                        if (this.type != null) {
                            data.type = this.type;
                        }
                        return data;
                    }
                    serialize(): Uint8Array;
                    serialize(w: pb_1.BinaryWriter): void;
                    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                        const writer = w || new pb_1.BinaryWriter();
                        if (this.indexed != false)
                            writer.writeBool(1, this.indexed);
                        if (this.name.length)
                            writer.writeString(2, this.name);
                        if (this.type.length)
                            writer.writeString(3, this.type);
                        if (!w)
                            return writer.getResultBuffer();
                    }
                    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Param {
                        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Param();
                        while (reader.nextField()) {
                            if (reader.isEndGroup())
                                break;
                            switch (reader.getFieldNumber()) {
                                case 1:
                                    message.indexed = reader.readBool();
                                    break;
                                case 2:
                                    message.name = reader.readString();
                                    break;
                                case 3:
                                    message.type = reader.readString();
                                    break;
                                default: reader.skipField();
                            }
                        }
                        return message;
                    }
                    serializeBinary(): Uint8Array {
                        return this.serialize();
                    }
                    static deserializeBinary(bytes: Uint8Array): Param {
                        return Param.deserialize(bytes);
                    }
                }
            }
        }
    }
    export class ContractState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            energy_usage?: number;
            energy_factor?: number;
            update_cycle?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("energy_usage" in data && data.energy_usage != undefined) {
                    this.energy_usage = data.energy_usage;
                }
                if ("energy_factor" in data && data.energy_factor != undefined) {
                    this.energy_factor = data.energy_factor;
                }
                if ("update_cycle" in data && data.update_cycle != undefined) {
                    this.update_cycle = data.update_cycle;
                }
            }
        }
        get energy_usage() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set energy_usage(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get energy_factor() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set energy_factor(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get update_cycle() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set update_cycle(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            energy_usage?: number;
            energy_factor?: number;
            update_cycle?: number;
        }): ContractState {
            const message = new ContractState({});
            if (data.energy_usage != null) {
                message.energy_usage = data.energy_usage;
            }
            if (data.energy_factor != null) {
                message.energy_factor = data.energy_factor;
            }
            if (data.update_cycle != null) {
                message.update_cycle = data.update_cycle;
            }
            return message;
        }
        toObject() {
            const data: {
                energy_usage?: number;
                energy_factor?: number;
                update_cycle?: number;
            } = {};
            if (this.energy_usage != null) {
                data.energy_usage = this.energy_usage;
            }
            if (this.energy_factor != null) {
                data.energy_factor = this.energy_factor;
            }
            if (this.update_cycle != null) {
                data.update_cycle = this.update_cycle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.energy_usage != 0)
                writer.writeInt64(1, this.energy_usage);
            if (this.energy_factor != 0)
                writer.writeInt64(2, this.energy_factor);
            if (this.update_cycle != 0)
                writer.writeInt64(3, this.update_cycle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.energy_usage = reader.readInt64();
                        break;
                    case 2:
                        message.energy_factor = reader.readInt64();
                        break;
                    case 3:
                        message.update_cycle = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractState {
            return ContractState.deserialize(bytes);
        }
    }
    export class CreateSmartContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            new_contract?: SmartContract;
            call_token_value?: number;
            token_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("new_contract" in data && data.new_contract != undefined) {
                    this.new_contract = data.new_contract;
                }
                if ("call_token_value" in data && data.call_token_value != undefined) {
                    this.call_token_value = data.call_token_value;
                }
                if ("token_id" in data && data.token_id != undefined) {
                    this.token_id = data.token_id;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_contract() {
            return pb_1.Message.getWrapperField(this, SmartContract, 2) as SmartContract;
        }
        set new_contract(value: SmartContract) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_new_contract() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get call_token_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set call_token_value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get token_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set token_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            new_contract?: ReturnType<typeof SmartContract.prototype.toObject>;
            call_token_value?: number;
            token_id?: number;
        }): CreateSmartContract {
            const message = new CreateSmartContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.new_contract != null) {
                message.new_contract = SmartContract.fromObject(data.new_contract);
            }
            if (data.call_token_value != null) {
                message.call_token_value = data.call_token_value;
            }
            if (data.token_id != null) {
                message.token_id = data.token_id;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                new_contract?: ReturnType<typeof SmartContract.prototype.toObject>;
                call_token_value?: number;
                token_id?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.new_contract != null) {
                data.new_contract = this.new_contract.toObject();
            }
            if (this.call_token_value != null) {
                data.call_token_value = this.call_token_value;
            }
            if (this.token_id != null) {
                data.token_id = this.token_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.has_new_contract)
                writer.writeMessage(2, this.new_contract, () => this.new_contract.serialize(writer));
            if (this.call_token_value != 0)
                writer.writeInt64(3, this.call_token_value);
            if (this.token_id != 0)
                writer.writeInt64(4, this.token_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSmartContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSmartContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.new_contract, () => message.new_contract = SmartContract.deserialize(reader));
                        break;
                    case 3:
                        message.call_token_value = reader.readInt64();
                        break;
                    case 4:
                        message.token_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSmartContract {
            return CreateSmartContract.deserialize(bytes);
        }
    }
    export class TriggerSmartContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            contract_address?: Uint8Array;
            call_value?: number;
            data?: Uint8Array;
            call_token_value?: number;
            token_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("call_value" in data && data.call_value != undefined) {
                    this.call_value = data.call_value;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("call_token_value" in data && data.call_token_value != undefined) {
                    this.call_token_value = data.call_token_value;
                }
                if ("token_id" in data && data.token_id != undefined) {
                    this.token_id = data.token_id;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set contract_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get call_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set call_value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get call_token_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set call_token_value(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get token_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set token_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            contract_address?: Uint8Array;
            call_value?: number;
            data?: Uint8Array;
            call_token_value?: number;
            token_id?: number;
        }): TriggerSmartContract {
            const message = new TriggerSmartContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.call_value != null) {
                message.call_value = data.call_value;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.call_token_value != null) {
                message.call_token_value = data.call_token_value;
            }
            if (data.token_id != null) {
                message.token_id = data.token_id;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                contract_address?: Uint8Array;
                call_value?: number;
                data?: Uint8Array;
                call_token_value?: number;
                token_id?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.call_value != null) {
                data.call_value = this.call_value;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.call_token_value != null) {
                data.call_token_value = this.call_token_value;
            }
            if (this.token_id != null) {
                data.token_id = this.token_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.contract_address.length)
                writer.writeBytes(2, this.contract_address);
            if (this.call_value != 0)
                writer.writeInt64(3, this.call_value);
            if (this.data.length)
                writer.writeBytes(4, this.data);
            if (this.call_token_value != 0)
                writer.writeInt64(5, this.call_token_value);
            if (this.token_id != 0)
                writer.writeInt64(6, this.token_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TriggerSmartContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TriggerSmartContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.contract_address = reader.readBytes();
                        break;
                    case 3:
                        message.call_value = reader.readInt64();
                        break;
                    case 4:
                        message.data = reader.readBytes();
                        break;
                    case 5:
                        message.call_token_value = reader.readInt64();
                        break;
                    case 6:
                        message.token_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TriggerSmartContract {
            return TriggerSmartContract.deserialize(bytes);
        }
    }
    export class ClearABIContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            contract_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set contract_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            contract_address?: Uint8Array;
        }): ClearABIContract {
            const message = new ClearABIContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                contract_address?: Uint8Array;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.contract_address.length)
                writer.writeBytes(2, this.contract_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearABIContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearABIContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.contract_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClearABIContract {
            return ClearABIContract.deserialize(bytes);
        }
    }
    export class UpdateSettingContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            contract_address?: Uint8Array;
            consume_user_resource_percent?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("consume_user_resource_percent" in data && data.consume_user_resource_percent != undefined) {
                    this.consume_user_resource_percent = data.consume_user_resource_percent;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set contract_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get consume_user_resource_percent() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set consume_user_resource_percent(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            contract_address?: Uint8Array;
            consume_user_resource_percent?: number;
        }): UpdateSettingContract {
            const message = new UpdateSettingContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.consume_user_resource_percent != null) {
                message.consume_user_resource_percent = data.consume_user_resource_percent;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                contract_address?: Uint8Array;
                consume_user_resource_percent?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.consume_user_resource_percent != null) {
                data.consume_user_resource_percent = this.consume_user_resource_percent;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.contract_address.length)
                writer.writeBytes(2, this.contract_address);
            if (this.consume_user_resource_percent != 0)
                writer.writeInt64(3, this.consume_user_resource_percent);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateSettingContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateSettingContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.contract_address = reader.readBytes();
                        break;
                    case 3:
                        message.consume_user_resource_percent = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateSettingContract {
            return UpdateSettingContract.deserialize(bytes);
        }
    }
    export class UpdateEnergyLimitContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            contract_address?: Uint8Array;
            origin_energy_limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("origin_energy_limit" in data && data.origin_energy_limit != undefined) {
                    this.origin_energy_limit = data.origin_energy_limit;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set contract_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get origin_energy_limit() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set origin_energy_limit(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            contract_address?: Uint8Array;
            origin_energy_limit?: number;
        }): UpdateEnergyLimitContract {
            const message = new UpdateEnergyLimitContract({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.origin_energy_limit != null) {
                message.origin_energy_limit = data.origin_energy_limit;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                contract_address?: Uint8Array;
                origin_energy_limit?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.origin_energy_limit != null) {
                data.origin_energy_limit = this.origin_energy_limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.contract_address.length)
                writer.writeBytes(2, this.contract_address);
            if (this.origin_energy_limit != 0)
                writer.writeInt64(3, this.origin_energy_limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEnergyLimitContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEnergyLimitContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        message.contract_address = reader.readBytes();
                        break;
                    case 3:
                        message.origin_energy_limit = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateEnergyLimitContract {
            return UpdateEnergyLimitContract.deserialize(bytes);
        }
    }
    export class SmartContractDataWrapper extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            smart_contract?: SmartContract;
            runtimecode?: Uint8Array;
            contract_state?: ContractState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("smart_contract" in data && data.smart_contract != undefined) {
                    this.smart_contract = data.smart_contract;
                }
                if ("runtimecode" in data && data.runtimecode != undefined) {
                    this.runtimecode = data.runtimecode;
                }
                if ("contract_state" in data && data.contract_state != undefined) {
                    this.contract_state = data.contract_state;
                }
            }
        }
        get smart_contract() {
            return pb_1.Message.getWrapperField(this, SmartContract, 1) as SmartContract;
        }
        set smart_contract(value: SmartContract) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_smart_contract() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get runtimecode() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set runtimecode(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get contract_state() {
            return pb_1.Message.getWrapperField(this, ContractState, 3) as ContractState;
        }
        set contract_state(value: ContractState) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_contract_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            smart_contract?: ReturnType<typeof SmartContract.prototype.toObject>;
            runtimecode?: Uint8Array;
            contract_state?: ReturnType<typeof ContractState.prototype.toObject>;
        }): SmartContractDataWrapper {
            const message = new SmartContractDataWrapper({});
            if (data.smart_contract != null) {
                message.smart_contract = SmartContract.fromObject(data.smart_contract);
            }
            if (data.runtimecode != null) {
                message.runtimecode = data.runtimecode;
            }
            if (data.contract_state != null) {
                message.contract_state = ContractState.fromObject(data.contract_state);
            }
            return message;
        }
        toObject() {
            const data: {
                smart_contract?: ReturnType<typeof SmartContract.prototype.toObject>;
                runtimecode?: Uint8Array;
                contract_state?: ReturnType<typeof ContractState.prototype.toObject>;
            } = {};
            if (this.smart_contract != null) {
                data.smart_contract = this.smart_contract.toObject();
            }
            if (this.runtimecode != null) {
                data.runtimecode = this.runtimecode;
            }
            if (this.contract_state != null) {
                data.contract_state = this.contract_state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_smart_contract)
                writer.writeMessage(1, this.smart_contract, () => this.smart_contract.serialize(writer));
            if (this.runtimecode.length)
                writer.writeBytes(2, this.runtimecode);
            if (this.has_contract_state)
                writer.writeMessage(3, this.contract_state, () => this.contract_state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartContractDataWrapper {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartContractDataWrapper();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.smart_contract, () => message.smart_contract = SmartContract.deserialize(reader));
                        break;
                    case 2:
                        message.runtimecode = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.contract_state, () => message.contract_state = ContractState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartContractDataWrapper {
            return SmartContractDataWrapper.deserialize(bytes);
        }
    }
}
