/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: src/proto/Tron.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Discover";
import * as dependency_2 from "./contract/common";
import * as pb_1 from "google-protobuf";
export namespace protocol {
    export enum AccountType {
        Normal = 0,
        AssetIssue = 1,
        Contract = 2
    }
    export enum ReasonCode {
        REQUESTED = 0,
        BAD_PROTOCOL = 2,
        TOO_MANY_PEERS = 4,
        DUPLICATE_PEER = 5,
        INCOMPATIBLE_PROTOCOL = 6,
        RANDOM_ELIMINATION = 7,
        PEER_QUITING = 8,
        UNEXPECTED_IDENTITY = 9,
        LOCAL_IDENTITY = 10,
        PING_TIMEOUT = 11,
        USER_REASON = 16,
        RESET = 17,
        SYNC_FAIL = 18,
        FETCH_FAIL = 19,
        BAD_TX = 20,
        BAD_BLOCK = 21,
        FORKED = 22,
        UNLINKABLE = 23,
        INCOMPATIBLE_VERSION = 24,
        INCOMPATIBLE_CHAIN = 25,
        TIME_OUT = 32,
        CONNECT_FAIL = 33,
        TOO_MANY_PEERS_WITH_SAME_IP = 34,
        LIGHT_NODE_SYNC_FAIL = 35,
        BELOW_THAN_ME = 36,
        NOT_WITNESS = 37,
        NO_SUCH_MESSAGE = 38,
        UNKNOWN = 255
    }
    export class AccountId extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: Uint8Array;
            address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set name(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: Uint8Array;
            address?: Uint8Array;
        }): AccountId {
            const message = new AccountId({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: Uint8Array;
                address?: Uint8Array;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeBytes(1, this.name);
            if (this.address.length)
                writer.writeBytes(2, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readBytes();
                        break;
                    case 2:
                        message.address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountId {
            return AccountId.deserialize(bytes);
        }
    }
    export class Vote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vote_address?: Uint8Array;
            vote_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vote_address" in data && data.vote_address != undefined) {
                    this.vote_address = data.vote_address;
                }
                if ("vote_count" in data && data.vote_count != undefined) {
                    this.vote_count = data.vote_count;
                }
            }
        }
        get vote_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set vote_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get vote_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set vote_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            vote_address?: Uint8Array;
            vote_count?: number;
        }): Vote {
            const message = new Vote({});
            if (data.vote_address != null) {
                message.vote_address = data.vote_address;
            }
            if (data.vote_count != null) {
                message.vote_count = data.vote_count;
            }
            return message;
        }
        toObject() {
            const data: {
                vote_address?: Uint8Array;
                vote_count?: number;
            } = {};
            if (this.vote_address != null) {
                data.vote_address = this.vote_address;
            }
            if (this.vote_count != null) {
                data.vote_count = this.vote_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vote_address.length)
                writer.writeBytes(1, this.vote_address);
            if (this.vote_count != 0)
                writer.writeInt64(2, this.vote_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vote_address = reader.readBytes();
                        break;
                    case 2:
                        message.vote_count = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Vote {
            return Vote.deserialize(bytes);
        }
    }
    export class Proposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal_id?: number;
            proposer_address?: Uint8Array;
            parameters?: Map<number, number>;
            expiration_time?: number;
            create_time?: number;
            approvals?: Uint8Array[];
            state?: Proposal.State;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("proposer_address" in data && data.proposer_address != undefined) {
                    this.proposer_address = data.proposer_address;
                }
                if ("parameters" in data && data.parameters != undefined) {
                    this.parameters = data.parameters;
                }
                if ("expiration_time" in data && data.expiration_time != undefined) {
                    this.expiration_time = data.expiration_time;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("approvals" in data && data.approvals != undefined) {
                    this.approvals = data.approvals;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
            }
            if (!this.parameters)
                this.parameters = new Map();
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get proposer_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set proposer_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get parameters() {
            return pb_1.Message.getField(this, 3) as any as Map<number, number>;
        }
        set parameters(value: Map<number, number>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get expiration_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set expiration_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get create_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set create_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get approvals() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as Uint8Array[];
        }
        set approvals(value: Uint8Array[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 7, Proposal.State.PENDING) as Proposal.State;
        }
        set state(value: Proposal.State) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            proposer_address?: Uint8Array;
            parameters?: {
                [key: number]: number;
            };
            expiration_time?: number;
            create_time?: number;
            approvals?: Uint8Array[];
            state?: Proposal.State;
        }): Proposal {
            const message = new Proposal({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.proposer_address != null) {
                message.proposer_address = data.proposer_address;
            }
            if (typeof data.parameters == "object") {
                message.parameters = new Map(Object.entries(data.parameters).map(([key, value]) => [Number(key), value]));
            }
            if (data.expiration_time != null) {
                message.expiration_time = data.expiration_time;
            }
            if (data.create_time != null) {
                message.create_time = data.create_time;
            }
            if (data.approvals != null) {
                message.approvals = data.approvals;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                proposer_address?: Uint8Array;
                parameters?: {
                    [key: number]: number;
                };
                expiration_time?: number;
                create_time?: number;
                approvals?: Uint8Array[];
                state?: Proposal.State;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.proposer_address != null) {
                data.proposer_address = this.proposer_address;
            }
            if (this.parameters != null) {
                data.parameters = (Object.fromEntries)(this.parameters);
            }
            if (this.expiration_time != null) {
                data.expiration_time = this.expiration_time;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time;
            }
            if (this.approvals != null) {
                data.approvals = this.approvals;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id != 0)
                writer.writeInt64(1, this.proposal_id);
            if (this.proposer_address.length)
                writer.writeBytes(2, this.proposer_address);
            for (const [key, value] of this.parameters) {
                writer.writeMessage(3, this.parameters, () => {
                    writer.writeInt64(1, key);
                    writer.writeInt64(2, value);
                });
            }
            if (this.expiration_time != 0)
                writer.writeInt64(4, this.expiration_time);
            if (this.create_time != 0)
                writer.writeInt64(5, this.create_time);
            if (this.approvals.length)
                writer.writeRepeatedBytes(6, this.approvals);
            if (this.state != Proposal.State.PENDING)
                writer.writeEnum(7, this.state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Proposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Proposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readInt64();
                        break;
                    case 2:
                        message.proposer_address = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.parameters as any, reader, reader.readInt64, reader.readInt64));
                        break;
                    case 4:
                        message.expiration_time = reader.readInt64();
                        break;
                    case 5:
                        message.create_time = reader.readInt64();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readBytes());
                        break;
                    case 7:
                        message.state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Proposal {
            return Proposal.deserialize(bytes);
        }
    }
    export namespace Proposal {
        export enum State {
            PENDING = 0,
            DISAPPROVED = 1,
            APPROVED = 2,
            CANCELED = 3
        }
    }
    export class Exchange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            exchange_id?: number;
            creator_address?: Uint8Array;
            create_time?: number;
            first_token_id?: Uint8Array;
            first_token_balance?: number;
            second_token_id?: Uint8Array;
            second_token_balance?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("exchange_id" in data && data.exchange_id != undefined) {
                    this.exchange_id = data.exchange_id;
                }
                if ("creator_address" in data && data.creator_address != undefined) {
                    this.creator_address = data.creator_address;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("first_token_id" in data && data.first_token_id != undefined) {
                    this.first_token_id = data.first_token_id;
                }
                if ("first_token_balance" in data && data.first_token_balance != undefined) {
                    this.first_token_balance = data.first_token_balance;
                }
                if ("second_token_id" in data && data.second_token_id != undefined) {
                    this.second_token_id = data.second_token_id;
                }
                if ("second_token_balance" in data && data.second_token_balance != undefined) {
                    this.second_token_balance = data.second_token_balance;
                }
            }
        }
        get exchange_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set exchange_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get creator_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set creator_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get create_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set create_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get first_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set first_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get first_token_balance() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set first_token_balance(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get second_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set second_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        get second_token_balance() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set second_token_balance(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            exchange_id?: number;
            creator_address?: Uint8Array;
            create_time?: number;
            first_token_id?: Uint8Array;
            first_token_balance?: number;
            second_token_id?: Uint8Array;
            second_token_balance?: number;
        }): Exchange {
            const message = new Exchange({});
            if (data.exchange_id != null) {
                message.exchange_id = data.exchange_id;
            }
            if (data.creator_address != null) {
                message.creator_address = data.creator_address;
            }
            if (data.create_time != null) {
                message.create_time = data.create_time;
            }
            if (data.first_token_id != null) {
                message.first_token_id = data.first_token_id;
            }
            if (data.first_token_balance != null) {
                message.first_token_balance = data.first_token_balance;
            }
            if (data.second_token_id != null) {
                message.second_token_id = data.second_token_id;
            }
            if (data.second_token_balance != null) {
                message.second_token_balance = data.second_token_balance;
            }
            return message;
        }
        toObject() {
            const data: {
                exchange_id?: number;
                creator_address?: Uint8Array;
                create_time?: number;
                first_token_id?: Uint8Array;
                first_token_balance?: number;
                second_token_id?: Uint8Array;
                second_token_balance?: number;
            } = {};
            if (this.exchange_id != null) {
                data.exchange_id = this.exchange_id;
            }
            if (this.creator_address != null) {
                data.creator_address = this.creator_address;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time;
            }
            if (this.first_token_id != null) {
                data.first_token_id = this.first_token_id;
            }
            if (this.first_token_balance != null) {
                data.first_token_balance = this.first_token_balance;
            }
            if (this.second_token_id != null) {
                data.second_token_id = this.second_token_id;
            }
            if (this.second_token_balance != null) {
                data.second_token_balance = this.second_token_balance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.exchange_id != 0)
                writer.writeInt64(1, this.exchange_id);
            if (this.creator_address.length)
                writer.writeBytes(2, this.creator_address);
            if (this.create_time != 0)
                writer.writeInt64(3, this.create_time);
            if (this.first_token_id.length)
                writer.writeBytes(6, this.first_token_id);
            if (this.first_token_balance != 0)
                writer.writeInt64(7, this.first_token_balance);
            if (this.second_token_id.length)
                writer.writeBytes(8, this.second_token_id);
            if (this.second_token_balance != 0)
                writer.writeInt64(9, this.second_token_balance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Exchange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Exchange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.exchange_id = reader.readInt64();
                        break;
                    case 2:
                        message.creator_address = reader.readBytes();
                        break;
                    case 3:
                        message.create_time = reader.readInt64();
                        break;
                    case 6:
                        message.first_token_id = reader.readBytes();
                        break;
                    case 7:
                        message.first_token_balance = reader.readInt64();
                        break;
                    case 8:
                        message.second_token_id = reader.readBytes();
                        break;
                    case 9:
                        message.second_token_balance = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Exchange {
            return Exchange.deserialize(bytes);
        }
    }
    export class MarketOrder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            order_id?: Uint8Array;
            owner_address?: Uint8Array;
            create_time?: number;
            sell_token_id?: Uint8Array;
            sell_token_quantity?: number;
            buy_token_id?: Uint8Array;
            buy_token_quantity?: number;
            sell_token_quantity_remain?: number;
            sell_token_quantity_return?: number;
            state?: MarketOrder.State;
            prev?: Uint8Array;
            next?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("order_id" in data && data.order_id != undefined) {
                    this.order_id = data.order_id;
                }
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("sell_token_id" in data && data.sell_token_id != undefined) {
                    this.sell_token_id = data.sell_token_id;
                }
                if ("sell_token_quantity" in data && data.sell_token_quantity != undefined) {
                    this.sell_token_quantity = data.sell_token_quantity;
                }
                if ("buy_token_id" in data && data.buy_token_id != undefined) {
                    this.buy_token_id = data.buy_token_id;
                }
                if ("buy_token_quantity" in data && data.buy_token_quantity != undefined) {
                    this.buy_token_quantity = data.buy_token_quantity;
                }
                if ("sell_token_quantity_remain" in data && data.sell_token_quantity_remain != undefined) {
                    this.sell_token_quantity_remain = data.sell_token_quantity_remain;
                }
                if ("sell_token_quantity_return" in data && data.sell_token_quantity_return != undefined) {
                    this.sell_token_quantity_return = data.sell_token_quantity_return;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("prev" in data && data.prev != undefined) {
                    this.prev = data.prev;
                }
                if ("next" in data && data.next != undefined) {
                    this.next = data.next;
                }
            }
        }
        get order_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set order_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get create_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set create_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get sell_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set sell_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get sell_token_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set sell_token_quantity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get buy_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set buy_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get buy_token_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set buy_token_quantity(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get sell_token_quantity_remain() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set sell_token_quantity_remain(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get sell_token_quantity_return() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set sell_token_quantity_return(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 11, MarketOrder.State.ACTIVE) as MarketOrder.State;
        }
        set state(value: MarketOrder.State) {
            pb_1.Message.setField(this, 11, value);
        }
        get prev() {
            return pb_1.Message.getFieldWithDefault(this, 12, new Uint8Array(0)) as Uint8Array;
        }
        set prev(value: Uint8Array) {
            pb_1.Message.setField(this, 12, value);
        }
        get next() {
            return pb_1.Message.getFieldWithDefault(this, 13, new Uint8Array(0)) as Uint8Array;
        }
        set next(value: Uint8Array) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            order_id?: Uint8Array;
            owner_address?: Uint8Array;
            create_time?: number;
            sell_token_id?: Uint8Array;
            sell_token_quantity?: number;
            buy_token_id?: Uint8Array;
            buy_token_quantity?: number;
            sell_token_quantity_remain?: number;
            sell_token_quantity_return?: number;
            state?: MarketOrder.State;
            prev?: Uint8Array;
            next?: Uint8Array;
        }): MarketOrder {
            const message = new MarketOrder({});
            if (data.order_id != null) {
                message.order_id = data.order_id;
            }
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.create_time != null) {
                message.create_time = data.create_time;
            }
            if (data.sell_token_id != null) {
                message.sell_token_id = data.sell_token_id;
            }
            if (data.sell_token_quantity != null) {
                message.sell_token_quantity = data.sell_token_quantity;
            }
            if (data.buy_token_id != null) {
                message.buy_token_id = data.buy_token_id;
            }
            if (data.buy_token_quantity != null) {
                message.buy_token_quantity = data.buy_token_quantity;
            }
            if (data.sell_token_quantity_remain != null) {
                message.sell_token_quantity_remain = data.sell_token_quantity_remain;
            }
            if (data.sell_token_quantity_return != null) {
                message.sell_token_quantity_return = data.sell_token_quantity_return;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.prev != null) {
                message.prev = data.prev;
            }
            if (data.next != null) {
                message.next = data.next;
            }
            return message;
        }
        toObject() {
            const data: {
                order_id?: Uint8Array;
                owner_address?: Uint8Array;
                create_time?: number;
                sell_token_id?: Uint8Array;
                sell_token_quantity?: number;
                buy_token_id?: Uint8Array;
                buy_token_quantity?: number;
                sell_token_quantity_remain?: number;
                sell_token_quantity_return?: number;
                state?: MarketOrder.State;
                prev?: Uint8Array;
                next?: Uint8Array;
            } = {};
            if (this.order_id != null) {
                data.order_id = this.order_id;
            }
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time;
            }
            if (this.sell_token_id != null) {
                data.sell_token_id = this.sell_token_id;
            }
            if (this.sell_token_quantity != null) {
                data.sell_token_quantity = this.sell_token_quantity;
            }
            if (this.buy_token_id != null) {
                data.buy_token_id = this.buy_token_id;
            }
            if (this.buy_token_quantity != null) {
                data.buy_token_quantity = this.buy_token_quantity;
            }
            if (this.sell_token_quantity_remain != null) {
                data.sell_token_quantity_remain = this.sell_token_quantity_remain;
            }
            if (this.sell_token_quantity_return != null) {
                data.sell_token_quantity_return = this.sell_token_quantity_return;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.prev != null) {
                data.prev = this.prev;
            }
            if (this.next != null) {
                data.next = this.next;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.order_id.length)
                writer.writeBytes(1, this.order_id);
            if (this.owner_address.length)
                writer.writeBytes(2, this.owner_address);
            if (this.create_time != 0)
                writer.writeInt64(3, this.create_time);
            if (this.sell_token_id.length)
                writer.writeBytes(4, this.sell_token_id);
            if (this.sell_token_quantity != 0)
                writer.writeInt64(5, this.sell_token_quantity);
            if (this.buy_token_id.length)
                writer.writeBytes(6, this.buy_token_id);
            if (this.buy_token_quantity != 0)
                writer.writeInt64(7, this.buy_token_quantity);
            if (this.sell_token_quantity_remain != 0)
                writer.writeInt64(9, this.sell_token_quantity_remain);
            if (this.sell_token_quantity_return != 0)
                writer.writeInt64(10, this.sell_token_quantity_return);
            if (this.state != MarketOrder.State.ACTIVE)
                writer.writeEnum(11, this.state);
            if (this.prev.length)
                writer.writeBytes(12, this.prev);
            if (this.next.length)
                writer.writeBytes(13, this.next);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketOrder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.order_id = reader.readBytes();
                        break;
                    case 2:
                        message.owner_address = reader.readBytes();
                        break;
                    case 3:
                        message.create_time = reader.readInt64();
                        break;
                    case 4:
                        message.sell_token_id = reader.readBytes();
                        break;
                    case 5:
                        message.sell_token_quantity = reader.readInt64();
                        break;
                    case 6:
                        message.buy_token_id = reader.readBytes();
                        break;
                    case 7:
                        message.buy_token_quantity = reader.readInt64();
                        break;
                    case 9:
                        message.sell_token_quantity_remain = reader.readInt64();
                        break;
                    case 10:
                        message.sell_token_quantity_return = reader.readInt64();
                        break;
                    case 11:
                        message.state = reader.readEnum();
                        break;
                    case 12:
                        message.prev = reader.readBytes();
                        break;
                    case 13:
                        message.next = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketOrder {
            return MarketOrder.deserialize(bytes);
        }
    }
    export namespace MarketOrder {
        export enum State {
            ACTIVE = 0,
            INACTIVE = 1,
            CANCELED = 2
        }
    }
    export class MarketOrderList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            orders?: MarketOrder[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("orders" in data && data.orders != undefined) {
                    this.orders = data.orders;
                }
            }
        }
        get orders() {
            return pb_1.Message.getRepeatedWrapperField(this, MarketOrder, 1) as MarketOrder[];
        }
        set orders(value: MarketOrder[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            orders?: ReturnType<typeof MarketOrder.prototype.toObject>[];
        }): MarketOrderList {
            const message = new MarketOrderList({});
            if (data.orders != null) {
                message.orders = data.orders.map(item => MarketOrder.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                orders?: ReturnType<typeof MarketOrder.prototype.toObject>[];
            } = {};
            if (this.orders != null) {
                data.orders = this.orders.map((item: MarketOrder) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.orders.length)
                writer.writeRepeatedMessage(1, this.orders, (item: MarketOrder) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketOrderList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketOrderList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.orders, () => pb_1.Message.addToRepeatedWrapperField(message, 1, MarketOrder.deserialize(reader), MarketOrder));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketOrderList {
            return MarketOrderList.deserialize(bytes);
        }
    }
    export class MarketOrderPairList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            orderPair?: MarketOrderPair[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("orderPair" in data && data.orderPair != undefined) {
                    this.orderPair = data.orderPair;
                }
            }
        }
        get orderPair() {
            return pb_1.Message.getRepeatedWrapperField(this, MarketOrderPair, 1) as MarketOrderPair[];
        }
        set orderPair(value: MarketOrderPair[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            orderPair?: ReturnType<typeof MarketOrderPair.prototype.toObject>[];
        }): MarketOrderPairList {
            const message = new MarketOrderPairList({});
            if (data.orderPair != null) {
                message.orderPair = data.orderPair.map(item => MarketOrderPair.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                orderPair?: ReturnType<typeof MarketOrderPair.prototype.toObject>[];
            } = {};
            if (this.orderPair != null) {
                data.orderPair = this.orderPair.map((item: MarketOrderPair) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.orderPair.length)
                writer.writeRepeatedMessage(1, this.orderPair, (item: MarketOrderPair) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketOrderPairList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketOrderPairList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.orderPair, () => pb_1.Message.addToRepeatedWrapperField(message, 1, MarketOrderPair.deserialize(reader), MarketOrderPair));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketOrderPairList {
            return MarketOrderPairList.deserialize(bytes);
        }
    }
    export class MarketOrderPair extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sell_token_id?: Uint8Array;
            buy_token_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sell_token_id" in data && data.sell_token_id != undefined) {
                    this.sell_token_id = data.sell_token_id;
                }
                if ("buy_token_id" in data && data.buy_token_id != undefined) {
                    this.buy_token_id = data.buy_token_id;
                }
            }
        }
        get sell_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set sell_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get buy_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set buy_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sell_token_id?: Uint8Array;
            buy_token_id?: Uint8Array;
        }): MarketOrderPair {
            const message = new MarketOrderPair({});
            if (data.sell_token_id != null) {
                message.sell_token_id = data.sell_token_id;
            }
            if (data.buy_token_id != null) {
                message.buy_token_id = data.buy_token_id;
            }
            return message;
        }
        toObject() {
            const data: {
                sell_token_id?: Uint8Array;
                buy_token_id?: Uint8Array;
            } = {};
            if (this.sell_token_id != null) {
                data.sell_token_id = this.sell_token_id;
            }
            if (this.buy_token_id != null) {
                data.buy_token_id = this.buy_token_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sell_token_id.length)
                writer.writeBytes(1, this.sell_token_id);
            if (this.buy_token_id.length)
                writer.writeBytes(2, this.buy_token_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketOrderPair {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketOrderPair();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sell_token_id = reader.readBytes();
                        break;
                    case 2:
                        message.buy_token_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketOrderPair {
            return MarketOrderPair.deserialize(bytes);
        }
    }
    export class MarketAccountOrder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: Uint8Array;
            orders?: Uint8Array[];
            count?: number;
            total_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("orders" in data && data.orders != undefined) {
                    this.orders = data.orders;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("total_count" in data && data.total_count != undefined) {
                    this.total_count = data.total_count;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set owner_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get orders() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set orders(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get total_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set total_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            owner_address?: Uint8Array;
            orders?: Uint8Array[];
            count?: number;
            total_count?: number;
        }): MarketAccountOrder {
            const message = new MarketAccountOrder({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.orders != null) {
                message.orders = data.orders;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.total_count != null) {
                message.total_count = data.total_count;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: Uint8Array;
                orders?: Uint8Array[];
                count?: number;
                total_count?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.orders != null) {
                data.orders = this.orders;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.total_count != null) {
                data.total_count = this.total_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeBytes(1, this.owner_address);
            if (this.orders.length)
                writer.writeRepeatedBytes(2, this.orders);
            if (this.count != 0)
                writer.writeInt64(3, this.count);
            if (this.total_count != 0)
                writer.writeInt64(4, this.total_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketAccountOrder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketAccountOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readBytes();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 3:
                        message.count = reader.readInt64();
                        break;
                    case 4:
                        message.total_count = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketAccountOrder {
            return MarketAccountOrder.deserialize(bytes);
        }
    }
    export class MarketPrice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sell_token_quantity?: number;
            buy_token_quantity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sell_token_quantity" in data && data.sell_token_quantity != undefined) {
                    this.sell_token_quantity = data.sell_token_quantity;
                }
                if ("buy_token_quantity" in data && data.buy_token_quantity != undefined) {
                    this.buy_token_quantity = data.buy_token_quantity;
                }
            }
        }
        get sell_token_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set sell_token_quantity(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get buy_token_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set buy_token_quantity(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sell_token_quantity?: number;
            buy_token_quantity?: number;
        }): MarketPrice {
            const message = new MarketPrice({});
            if (data.sell_token_quantity != null) {
                message.sell_token_quantity = data.sell_token_quantity;
            }
            if (data.buy_token_quantity != null) {
                message.buy_token_quantity = data.buy_token_quantity;
            }
            return message;
        }
        toObject() {
            const data: {
                sell_token_quantity?: number;
                buy_token_quantity?: number;
            } = {};
            if (this.sell_token_quantity != null) {
                data.sell_token_quantity = this.sell_token_quantity;
            }
            if (this.buy_token_quantity != null) {
                data.buy_token_quantity = this.buy_token_quantity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sell_token_quantity != 0)
                writer.writeInt64(1, this.sell_token_quantity);
            if (this.buy_token_quantity != 0)
                writer.writeInt64(2, this.buy_token_quantity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketPrice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketPrice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sell_token_quantity = reader.readInt64();
                        break;
                    case 2:
                        message.buy_token_quantity = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketPrice {
            return MarketPrice.deserialize(bytes);
        }
    }
    export class MarketPriceList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sell_token_id?: Uint8Array;
            buy_token_id?: Uint8Array;
            prices?: MarketPrice[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sell_token_id" in data && data.sell_token_id != undefined) {
                    this.sell_token_id = data.sell_token_id;
                }
                if ("buy_token_id" in data && data.buy_token_id != undefined) {
                    this.buy_token_id = data.buy_token_id;
                }
                if ("prices" in data && data.prices != undefined) {
                    this.prices = data.prices;
                }
            }
        }
        get sell_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set sell_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get buy_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set buy_token_id(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get prices() {
            return pb_1.Message.getRepeatedWrapperField(this, MarketPrice, 3) as MarketPrice[];
        }
        set prices(value: MarketPrice[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            sell_token_id?: Uint8Array;
            buy_token_id?: Uint8Array;
            prices?: ReturnType<typeof MarketPrice.prototype.toObject>[];
        }): MarketPriceList {
            const message = new MarketPriceList({});
            if (data.sell_token_id != null) {
                message.sell_token_id = data.sell_token_id;
            }
            if (data.buy_token_id != null) {
                message.buy_token_id = data.buy_token_id;
            }
            if (data.prices != null) {
                message.prices = data.prices.map(item => MarketPrice.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                sell_token_id?: Uint8Array;
                buy_token_id?: Uint8Array;
                prices?: ReturnType<typeof MarketPrice.prototype.toObject>[];
            } = {};
            if (this.sell_token_id != null) {
                data.sell_token_id = this.sell_token_id;
            }
            if (this.buy_token_id != null) {
                data.buy_token_id = this.buy_token_id;
            }
            if (this.prices != null) {
                data.prices = this.prices.map((item: MarketPrice) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sell_token_id.length)
                writer.writeBytes(1, this.sell_token_id);
            if (this.buy_token_id.length)
                writer.writeBytes(2, this.buy_token_id);
            if (this.prices.length)
                writer.writeRepeatedMessage(3, this.prices, (item: MarketPrice) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketPriceList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketPriceList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sell_token_id = reader.readBytes();
                        break;
                    case 2:
                        message.buy_token_id = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.prices, () => pb_1.Message.addToRepeatedWrapperField(message, 3, MarketPrice.deserialize(reader), MarketPrice));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketPriceList {
            return MarketPriceList.deserialize(bytes);
        }
    }
    export class MarketOrderIdList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            head?: Uint8Array;
            tail?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("head" in data && data.head != undefined) {
                    this.head = data.head;
                }
                if ("tail" in data && data.tail != undefined) {
                    this.tail = data.tail;
                }
            }
        }
        get head() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set head(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get tail() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set tail(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            head?: Uint8Array;
            tail?: Uint8Array;
        }): MarketOrderIdList {
            const message = new MarketOrderIdList({});
            if (data.head != null) {
                message.head = data.head;
            }
            if (data.tail != null) {
                message.tail = data.tail;
            }
            return message;
        }
        toObject() {
            const data: {
                head?: Uint8Array;
                tail?: Uint8Array;
            } = {};
            if (this.head != null) {
                data.head = this.head;
            }
            if (this.tail != null) {
                data.tail = this.tail;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.head.length)
                writer.writeBytes(1, this.head);
            if (this.tail.length)
                writer.writeBytes(2, this.tail);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketOrderIdList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketOrderIdList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.head = reader.readBytes();
                        break;
                    case 2:
                        message.tail = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketOrderIdList {
            return MarketOrderIdList.deserialize(bytes);
        }
    }
    export class ChainParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chainParameter?: ChainParameters.ChainParameter[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chainParameter" in data && data.chainParameter != undefined) {
                    this.chainParameter = data.chainParameter;
                }
            }
        }
        get chainParameter() {
            return pb_1.Message.getRepeatedWrapperField(this, ChainParameters.ChainParameter, 1) as ChainParameters.ChainParameter[];
        }
        set chainParameter(value: ChainParameters.ChainParameter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            chainParameter?: ReturnType<typeof ChainParameters.ChainParameter.prototype.toObject>[];
        }): ChainParameters {
            const message = new ChainParameters({});
            if (data.chainParameter != null) {
                message.chainParameter = data.chainParameter.map(item => ChainParameters.ChainParameter.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                chainParameter?: ReturnType<typeof ChainParameters.ChainParameter.prototype.toObject>[];
            } = {};
            if (this.chainParameter != null) {
                data.chainParameter = this.chainParameter.map((item: ChainParameters.ChainParameter) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chainParameter.length)
                writer.writeRepeatedMessage(1, this.chainParameter, (item: ChainParameters.ChainParameter) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChainParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChainParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.chainParameter, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ChainParameters.ChainParameter.deserialize(reader), ChainParameters.ChainParameter));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChainParameters {
            return ChainParameters.deserialize(bytes);
        }
    }
    export namespace ChainParameters {
        export class ChainParameter extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                key?: string;
                value?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("key" in data && data.key != undefined) {
                        this.key = data.key;
                    }
                    if ("value" in data && data.value != undefined) {
                        this.value = data.value;
                    }
                }
            }
            get key() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set key(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get value() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set value(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                key?: string;
                value?: number;
            }): ChainParameter {
                const message = new ChainParameter({});
                if (data.key != null) {
                    message.key = data.key;
                }
                if (data.value != null) {
                    message.value = data.value;
                }
                return message;
            }
            toObject() {
                const data: {
                    key?: string;
                    value?: number;
                } = {};
                if (this.key != null) {
                    data.key = this.key;
                }
                if (this.value != null) {
                    data.value = this.value;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.key.length)
                    writer.writeString(1, this.key);
                if (this.value != 0)
                    writer.writeInt64(2, this.value);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChainParameter {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChainParameter();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.key = reader.readString();
                            break;
                        case 2:
                            message.value = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ChainParameter {
                return ChainParameter.deserialize(bytes);
            }
        }
    }
    export class Account extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_name?: Uint8Array;
            type?: AccountType;
            address?: Uint8Array;
            balance?: number;
            votes?: Vote[];
            asset?: Map<string, number>;
            assetV2?: Map<string, number>;
            frozen?: Account.Frozen[];
            net_usage?: number;
            acquired_delegated_frozen_balance_for_bandwidth?: number;
            delegated_frozen_balance_for_bandwidth?: number;
            old_tron_power?: number;
            tron_power?: Account.Frozen;
            asset_optimized?: boolean;
            create_time?: number;
            latest_opration_time?: number;
            allowance?: number;
            latest_withdraw_time?: number;
            code?: Uint8Array;
            is_witness?: boolean;
            is_committee?: boolean;
            frozen_supply?: Account.Frozen[];
            asset_issued_name?: Uint8Array;
            asset_issued_ID?: Uint8Array;
            latest_asset_operation_time?: Map<string, number>;
            latest_asset_operation_timeV2?: Map<string, number>;
            free_net_usage?: number;
            free_asset_net_usage?: Map<string, number>;
            free_asset_net_usageV2?: Map<string, number>;
            latest_consume_time?: number;
            latest_consume_free_time?: number;
            account_id?: Uint8Array;
            net_window_size?: number;
            net_window_optimized?: boolean;
            account_resource?: Account.AccountResource;
            codeHash?: Uint8Array;
            owner_permission?: Permission;
            witness_permission?: Permission;
            active_permission?: Permission[];
            frozenV2?: Account.FreezeV2[];
            unfrozenV2?: Account.UnFreezeV2[];
            delegated_frozenV2_balance_for_bandwidth?: number;
            acquired_delegated_frozenV2_balance_for_bandwidth?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 7, 16, 33, 34, 35], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_name" in data && data.account_name != undefined) {
                    this.account_name = data.account_name;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("votes" in data && data.votes != undefined) {
                    this.votes = data.votes;
                }
                if ("asset" in data && data.asset != undefined) {
                    this.asset = data.asset;
                }
                if ("assetV2" in data && data.assetV2 != undefined) {
                    this.assetV2 = data.assetV2;
                }
                if ("frozen" in data && data.frozen != undefined) {
                    this.frozen = data.frozen;
                }
                if ("net_usage" in data && data.net_usage != undefined) {
                    this.net_usage = data.net_usage;
                }
                if ("acquired_delegated_frozen_balance_for_bandwidth" in data && data.acquired_delegated_frozen_balance_for_bandwidth != undefined) {
                    this.acquired_delegated_frozen_balance_for_bandwidth = data.acquired_delegated_frozen_balance_for_bandwidth;
                }
                if ("delegated_frozen_balance_for_bandwidth" in data && data.delegated_frozen_balance_for_bandwidth != undefined) {
                    this.delegated_frozen_balance_for_bandwidth = data.delegated_frozen_balance_for_bandwidth;
                }
                if ("old_tron_power" in data && data.old_tron_power != undefined) {
                    this.old_tron_power = data.old_tron_power;
                }
                if ("tron_power" in data && data.tron_power != undefined) {
                    this.tron_power = data.tron_power;
                }
                if ("asset_optimized" in data && data.asset_optimized != undefined) {
                    this.asset_optimized = data.asset_optimized;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("latest_opration_time" in data && data.latest_opration_time != undefined) {
                    this.latest_opration_time = data.latest_opration_time;
                }
                if ("allowance" in data && data.allowance != undefined) {
                    this.allowance = data.allowance;
                }
                if ("latest_withdraw_time" in data && data.latest_withdraw_time != undefined) {
                    this.latest_withdraw_time = data.latest_withdraw_time;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("is_witness" in data && data.is_witness != undefined) {
                    this.is_witness = data.is_witness;
                }
                if ("is_committee" in data && data.is_committee != undefined) {
                    this.is_committee = data.is_committee;
                }
                if ("frozen_supply" in data && data.frozen_supply != undefined) {
                    this.frozen_supply = data.frozen_supply;
                }
                if ("asset_issued_name" in data && data.asset_issued_name != undefined) {
                    this.asset_issued_name = data.asset_issued_name;
                }
                if ("asset_issued_ID" in data && data.asset_issued_ID != undefined) {
                    this.asset_issued_ID = data.asset_issued_ID;
                }
                if ("latest_asset_operation_time" in data && data.latest_asset_operation_time != undefined) {
                    this.latest_asset_operation_time = data.latest_asset_operation_time;
                }
                if ("latest_asset_operation_timeV2" in data && data.latest_asset_operation_timeV2 != undefined) {
                    this.latest_asset_operation_timeV2 = data.latest_asset_operation_timeV2;
                }
                if ("free_net_usage" in data && data.free_net_usage != undefined) {
                    this.free_net_usage = data.free_net_usage;
                }
                if ("free_asset_net_usage" in data && data.free_asset_net_usage != undefined) {
                    this.free_asset_net_usage = data.free_asset_net_usage;
                }
                if ("free_asset_net_usageV2" in data && data.free_asset_net_usageV2 != undefined) {
                    this.free_asset_net_usageV2 = data.free_asset_net_usageV2;
                }
                if ("latest_consume_time" in data && data.latest_consume_time != undefined) {
                    this.latest_consume_time = data.latest_consume_time;
                }
                if ("latest_consume_free_time" in data && data.latest_consume_free_time != undefined) {
                    this.latest_consume_free_time = data.latest_consume_free_time;
                }
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("net_window_size" in data && data.net_window_size != undefined) {
                    this.net_window_size = data.net_window_size;
                }
                if ("net_window_optimized" in data && data.net_window_optimized != undefined) {
                    this.net_window_optimized = data.net_window_optimized;
                }
                if ("account_resource" in data && data.account_resource != undefined) {
                    this.account_resource = data.account_resource;
                }
                if ("codeHash" in data && data.codeHash != undefined) {
                    this.codeHash = data.codeHash;
                }
                if ("owner_permission" in data && data.owner_permission != undefined) {
                    this.owner_permission = data.owner_permission;
                }
                if ("witness_permission" in data && data.witness_permission != undefined) {
                    this.witness_permission = data.witness_permission;
                }
                if ("active_permission" in data && data.active_permission != undefined) {
                    this.active_permission = data.active_permission;
                }
                if ("frozenV2" in data && data.frozenV2 != undefined) {
                    this.frozenV2 = data.frozenV2;
                }
                if ("unfrozenV2" in data && data.unfrozenV2 != undefined) {
                    this.unfrozenV2 = data.unfrozenV2;
                }
                if ("delegated_frozenV2_balance_for_bandwidth" in data && data.delegated_frozenV2_balance_for_bandwidth != undefined) {
                    this.delegated_frozenV2_balance_for_bandwidth = data.delegated_frozenV2_balance_for_bandwidth;
                }
                if ("acquired_delegated_frozenV2_balance_for_bandwidth" in data && data.acquired_delegated_frozenV2_balance_for_bandwidth != undefined) {
                    this.acquired_delegated_frozenV2_balance_for_bandwidth = data.acquired_delegated_frozenV2_balance_for_bandwidth;
                }
            }
            if (!this.asset)
                this.asset = new Map();
            if (!this.assetV2)
                this.assetV2 = new Map();
            if (!this.latest_asset_operation_time)
                this.latest_asset_operation_time = new Map();
            if (!this.latest_asset_operation_timeV2)
                this.latest_asset_operation_timeV2 = new Map();
            if (!this.free_asset_net_usage)
                this.free_asset_net_usage = new Map();
            if (!this.free_asset_net_usageV2)
                this.free_asset_net_usageV2 = new Map();
        }
        get account_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set account_name(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, AccountType.Normal) as AccountType;
        }
        set type(value: AccountType) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get balance() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set balance(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get votes() {
            return pb_1.Message.getRepeatedWrapperField(this, Vote, 5) as Vote[];
        }
        set votes(value: Vote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get asset() {
            return pb_1.Message.getField(this, 6) as any as Map<string, number>;
        }
        set asset(value: Map<string, number>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get assetV2() {
            return pb_1.Message.getField(this, 56) as any as Map<string, number>;
        }
        set assetV2(value: Map<string, number>) {
            pb_1.Message.setField(this, 56, value as any);
        }
        get frozen() {
            return pb_1.Message.getRepeatedWrapperField(this, Account.Frozen, 7) as Account.Frozen[];
        }
        set frozen(value: Account.Frozen[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get net_usage() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set net_usage(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get acquired_delegated_frozen_balance_for_bandwidth() {
            return pb_1.Message.getFieldWithDefault(this, 41, 0) as number;
        }
        set acquired_delegated_frozen_balance_for_bandwidth(value: number) {
            pb_1.Message.setField(this, 41, value);
        }
        get delegated_frozen_balance_for_bandwidth() {
            return pb_1.Message.getFieldWithDefault(this, 42, 0) as number;
        }
        set delegated_frozen_balance_for_bandwidth(value: number) {
            pb_1.Message.setField(this, 42, value);
        }
        get old_tron_power() {
            return pb_1.Message.getFieldWithDefault(this, 46, 0) as number;
        }
        set old_tron_power(value: number) {
            pb_1.Message.setField(this, 46, value);
        }
        get tron_power() {
            return pb_1.Message.getWrapperField(this, Account.Frozen, 47) as Account.Frozen;
        }
        set tron_power(value: Account.Frozen) {
            pb_1.Message.setWrapperField(this, 47, value);
        }
        get has_tron_power() {
            return pb_1.Message.getField(this, 47) != null;
        }
        get asset_optimized() {
            return pb_1.Message.getFieldWithDefault(this, 60, false) as boolean;
        }
        set asset_optimized(value: boolean) {
            pb_1.Message.setField(this, 60, value);
        }
        get create_time() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set create_time(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get latest_opration_time() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set latest_opration_time(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get allowance() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set allowance(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get latest_withdraw_time() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set latest_withdraw_time(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 13, new Uint8Array(0)) as Uint8Array;
        }
        set code(value: Uint8Array) {
            pb_1.Message.setField(this, 13, value);
        }
        get is_witness() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set is_witness(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get is_committee() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set is_committee(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get frozen_supply() {
            return pb_1.Message.getRepeatedWrapperField(this, Account.Frozen, 16) as Account.Frozen[];
        }
        set frozen_supply(value: Account.Frozen[]) {
            pb_1.Message.setRepeatedWrapperField(this, 16, value);
        }
        get asset_issued_name() {
            return pb_1.Message.getFieldWithDefault(this, 17, new Uint8Array(0)) as Uint8Array;
        }
        set asset_issued_name(value: Uint8Array) {
            pb_1.Message.setField(this, 17, value);
        }
        get asset_issued_ID() {
            return pb_1.Message.getFieldWithDefault(this, 57, new Uint8Array(0)) as Uint8Array;
        }
        set asset_issued_ID(value: Uint8Array) {
            pb_1.Message.setField(this, 57, value);
        }
        get latest_asset_operation_time() {
            return pb_1.Message.getField(this, 18) as any as Map<string, number>;
        }
        set latest_asset_operation_time(value: Map<string, number>) {
            pb_1.Message.setField(this, 18, value as any);
        }
        get latest_asset_operation_timeV2() {
            return pb_1.Message.getField(this, 58) as any as Map<string, number>;
        }
        set latest_asset_operation_timeV2(value: Map<string, number>) {
            pb_1.Message.setField(this, 58, value as any);
        }
        get free_net_usage() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set free_net_usage(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get free_asset_net_usage() {
            return pb_1.Message.getField(this, 20) as any as Map<string, number>;
        }
        set free_asset_net_usage(value: Map<string, number>) {
            pb_1.Message.setField(this, 20, value as any);
        }
        get free_asset_net_usageV2() {
            return pb_1.Message.getField(this, 59) as any as Map<string, number>;
        }
        set free_asset_net_usageV2(value: Map<string, number>) {
            pb_1.Message.setField(this, 59, value as any);
        }
        get latest_consume_time() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set latest_consume_time(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get latest_consume_free_time() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set latest_consume_free_time(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 23, new Uint8Array(0)) as Uint8Array;
        }
        set account_id(value: Uint8Array) {
            pb_1.Message.setField(this, 23, value);
        }
        get net_window_size() {
            return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
        }
        set net_window_size(value: number) {
            pb_1.Message.setField(this, 24, value);
        }
        get net_window_optimized() {
            return pb_1.Message.getFieldWithDefault(this, 25, false) as boolean;
        }
        set net_window_optimized(value: boolean) {
            pb_1.Message.setField(this, 25, value);
        }
        get account_resource() {
            return pb_1.Message.getWrapperField(this, Account.AccountResource, 26) as Account.AccountResource;
        }
        set account_resource(value: Account.AccountResource) {
            pb_1.Message.setWrapperField(this, 26, value);
        }
        get has_account_resource() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get codeHash() {
            return pb_1.Message.getFieldWithDefault(this, 30, new Uint8Array(0)) as Uint8Array;
        }
        set codeHash(value: Uint8Array) {
            pb_1.Message.setField(this, 30, value);
        }
        get owner_permission() {
            return pb_1.Message.getWrapperField(this, Permission, 31) as Permission;
        }
        set owner_permission(value: Permission) {
            pb_1.Message.setWrapperField(this, 31, value);
        }
        get has_owner_permission() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get witness_permission() {
            return pb_1.Message.getWrapperField(this, Permission, 32) as Permission;
        }
        set witness_permission(value: Permission) {
            pb_1.Message.setWrapperField(this, 32, value);
        }
        get has_witness_permission() {
            return pb_1.Message.getField(this, 32) != null;
        }
        get active_permission() {
            return pb_1.Message.getRepeatedWrapperField(this, Permission, 33) as Permission[];
        }
        set active_permission(value: Permission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 33, value);
        }
        get frozenV2() {
            return pb_1.Message.getRepeatedWrapperField(this, Account.FreezeV2, 34) as Account.FreezeV2[];
        }
        set frozenV2(value: Account.FreezeV2[]) {
            pb_1.Message.setRepeatedWrapperField(this, 34, value);
        }
        get unfrozenV2() {
            return pb_1.Message.getRepeatedWrapperField(this, Account.UnFreezeV2, 35) as Account.UnFreezeV2[];
        }
        set unfrozenV2(value: Account.UnFreezeV2[]) {
            pb_1.Message.setRepeatedWrapperField(this, 35, value);
        }
        get delegated_frozenV2_balance_for_bandwidth() {
            return pb_1.Message.getFieldWithDefault(this, 36, 0) as number;
        }
        set delegated_frozenV2_balance_for_bandwidth(value: number) {
            pb_1.Message.setField(this, 36, value);
        }
        get acquired_delegated_frozenV2_balance_for_bandwidth() {
            return pb_1.Message.getFieldWithDefault(this, 37, 0) as number;
        }
        set acquired_delegated_frozenV2_balance_for_bandwidth(value: number) {
            pb_1.Message.setField(this, 37, value);
        }
        static fromObject(data: {
            account_name?: Uint8Array;
            type?: AccountType;
            address?: Uint8Array;
            balance?: number;
            votes?: ReturnType<typeof Vote.prototype.toObject>[];
            asset?: {
                [key: string]: number;
            };
            assetV2?: {
                [key: string]: number;
            };
            frozen?: ReturnType<typeof Account.Frozen.prototype.toObject>[];
            net_usage?: number;
            acquired_delegated_frozen_balance_for_bandwidth?: number;
            delegated_frozen_balance_for_bandwidth?: number;
            old_tron_power?: number;
            tron_power?: ReturnType<typeof Account.Frozen.prototype.toObject>;
            asset_optimized?: boolean;
            create_time?: number;
            latest_opration_time?: number;
            allowance?: number;
            latest_withdraw_time?: number;
            code?: Uint8Array;
            is_witness?: boolean;
            is_committee?: boolean;
            frozen_supply?: ReturnType<typeof Account.Frozen.prototype.toObject>[];
            asset_issued_name?: Uint8Array;
            asset_issued_ID?: Uint8Array;
            latest_asset_operation_time?: {
                [key: string]: number;
            };
            latest_asset_operation_timeV2?: {
                [key: string]: number;
            };
            free_net_usage?: number;
            free_asset_net_usage?: {
                [key: string]: number;
            };
            free_asset_net_usageV2?: {
                [key: string]: number;
            };
            latest_consume_time?: number;
            latest_consume_free_time?: number;
            account_id?: Uint8Array;
            net_window_size?: number;
            net_window_optimized?: boolean;
            account_resource?: ReturnType<typeof Account.AccountResource.prototype.toObject>;
            codeHash?: Uint8Array;
            owner_permission?: ReturnType<typeof Permission.prototype.toObject>;
            witness_permission?: ReturnType<typeof Permission.prototype.toObject>;
            active_permission?: ReturnType<typeof Permission.prototype.toObject>[];
            frozenV2?: ReturnType<typeof Account.FreezeV2.prototype.toObject>[];
            unfrozenV2?: ReturnType<typeof Account.UnFreezeV2.prototype.toObject>[];
            delegated_frozenV2_balance_for_bandwidth?: number;
            acquired_delegated_frozenV2_balance_for_bandwidth?: number;
        }): Account {
            const message = new Account({});
            if (data.account_name != null) {
                message.account_name = data.account_name;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.balance != null) {
                message.balance = data.balance;
            }
            if (data.votes != null) {
                message.votes = data.votes.map(item => Vote.fromObject(item));
            }
            if (typeof data.asset == "object") {
                message.asset = new Map(Object.entries(data.asset));
            }
            if (typeof data.assetV2 == "object") {
                message.assetV2 = new Map(Object.entries(data.assetV2));
            }
            if (data.frozen != null) {
                message.frozen = data.frozen.map(item => Account.Frozen.fromObject(item));
            }
            if (data.net_usage != null) {
                message.net_usage = data.net_usage;
            }
            if (data.acquired_delegated_frozen_balance_for_bandwidth != null) {
                message.acquired_delegated_frozen_balance_for_bandwidth = data.acquired_delegated_frozen_balance_for_bandwidth;
            }
            if (data.delegated_frozen_balance_for_bandwidth != null) {
                message.delegated_frozen_balance_for_bandwidth = data.delegated_frozen_balance_for_bandwidth;
            }
            if (data.old_tron_power != null) {
                message.old_tron_power = data.old_tron_power;
            }
            if (data.tron_power != null) {
                message.tron_power = Account.Frozen.fromObject(data.tron_power);
            }
            if (data.asset_optimized != null) {
                message.asset_optimized = data.asset_optimized;
            }
            if (data.create_time != null) {
                message.create_time = data.create_time;
            }
            if (data.latest_opration_time != null) {
                message.latest_opration_time = data.latest_opration_time;
            }
            if (data.allowance != null) {
                message.allowance = data.allowance;
            }
            if (data.latest_withdraw_time != null) {
                message.latest_withdraw_time = data.latest_withdraw_time;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.is_witness != null) {
                message.is_witness = data.is_witness;
            }
            if (data.is_committee != null) {
                message.is_committee = data.is_committee;
            }
            if (data.frozen_supply != null) {
                message.frozen_supply = data.frozen_supply.map(item => Account.Frozen.fromObject(item));
            }
            if (data.asset_issued_name != null) {
                message.asset_issued_name = data.asset_issued_name;
            }
            if (data.asset_issued_ID != null) {
                message.asset_issued_ID = data.asset_issued_ID;
            }
            if (typeof data.latest_asset_operation_time == "object") {
                message.latest_asset_operation_time = new Map(Object.entries(data.latest_asset_operation_time));
            }
            if (typeof data.latest_asset_operation_timeV2 == "object") {
                message.latest_asset_operation_timeV2 = new Map(Object.entries(data.latest_asset_operation_timeV2));
            }
            if (data.free_net_usage != null) {
                message.free_net_usage = data.free_net_usage;
            }
            if (typeof data.free_asset_net_usage == "object") {
                message.free_asset_net_usage = new Map(Object.entries(data.free_asset_net_usage));
            }
            if (typeof data.free_asset_net_usageV2 == "object") {
                message.free_asset_net_usageV2 = new Map(Object.entries(data.free_asset_net_usageV2));
            }
            if (data.latest_consume_time != null) {
                message.latest_consume_time = data.latest_consume_time;
            }
            if (data.latest_consume_free_time != null) {
                message.latest_consume_free_time = data.latest_consume_free_time;
            }
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.net_window_size != null) {
                message.net_window_size = data.net_window_size;
            }
            if (data.net_window_optimized != null) {
                message.net_window_optimized = data.net_window_optimized;
            }
            if (data.account_resource != null) {
                message.account_resource = Account.AccountResource.fromObject(data.account_resource);
            }
            if (data.codeHash != null) {
                message.codeHash = data.codeHash;
            }
            if (data.owner_permission != null) {
                message.owner_permission = Permission.fromObject(data.owner_permission);
            }
            if (data.witness_permission != null) {
                message.witness_permission = Permission.fromObject(data.witness_permission);
            }
            if (data.active_permission != null) {
                message.active_permission = data.active_permission.map(item => Permission.fromObject(item));
            }
            if (data.frozenV2 != null) {
                message.frozenV2 = data.frozenV2.map(item => Account.FreezeV2.fromObject(item));
            }
            if (data.unfrozenV2 != null) {
                message.unfrozenV2 = data.unfrozenV2.map(item => Account.UnFreezeV2.fromObject(item));
            }
            if (data.delegated_frozenV2_balance_for_bandwidth != null) {
                message.delegated_frozenV2_balance_for_bandwidth = data.delegated_frozenV2_balance_for_bandwidth;
            }
            if (data.acquired_delegated_frozenV2_balance_for_bandwidth != null) {
                message.acquired_delegated_frozenV2_balance_for_bandwidth = data.acquired_delegated_frozenV2_balance_for_bandwidth;
            }
            return message;
        }
        toObject() {
            const data: {
                account_name?: Uint8Array;
                type?: AccountType;
                address?: Uint8Array;
                balance?: number;
                votes?: ReturnType<typeof Vote.prototype.toObject>[];
                asset?: {
                    [key: string]: number;
                };
                assetV2?: {
                    [key: string]: number;
                };
                frozen?: ReturnType<typeof Account.Frozen.prototype.toObject>[];
                net_usage?: number;
                acquired_delegated_frozen_balance_for_bandwidth?: number;
                delegated_frozen_balance_for_bandwidth?: number;
                old_tron_power?: number;
                tron_power?: ReturnType<typeof Account.Frozen.prototype.toObject>;
                asset_optimized?: boolean;
                create_time?: number;
                latest_opration_time?: number;
                allowance?: number;
                latest_withdraw_time?: number;
                code?: Uint8Array;
                is_witness?: boolean;
                is_committee?: boolean;
                frozen_supply?: ReturnType<typeof Account.Frozen.prototype.toObject>[];
                asset_issued_name?: Uint8Array;
                asset_issued_ID?: Uint8Array;
                latest_asset_operation_time?: {
                    [key: string]: number;
                };
                latest_asset_operation_timeV2?: {
                    [key: string]: number;
                };
                free_net_usage?: number;
                free_asset_net_usage?: {
                    [key: string]: number;
                };
                free_asset_net_usageV2?: {
                    [key: string]: number;
                };
                latest_consume_time?: number;
                latest_consume_free_time?: number;
                account_id?: Uint8Array;
                net_window_size?: number;
                net_window_optimized?: boolean;
                account_resource?: ReturnType<typeof Account.AccountResource.prototype.toObject>;
                codeHash?: Uint8Array;
                owner_permission?: ReturnType<typeof Permission.prototype.toObject>;
                witness_permission?: ReturnType<typeof Permission.prototype.toObject>;
                active_permission?: ReturnType<typeof Permission.prototype.toObject>[];
                frozenV2?: ReturnType<typeof Account.FreezeV2.prototype.toObject>[];
                unfrozenV2?: ReturnType<typeof Account.UnFreezeV2.prototype.toObject>[];
                delegated_frozenV2_balance_for_bandwidth?: number;
                acquired_delegated_frozenV2_balance_for_bandwidth?: number;
            } = {};
            if (this.account_name != null) {
                data.account_name = this.account_name;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.balance != null) {
                data.balance = this.balance;
            }
            if (this.votes != null) {
                data.votes = this.votes.map((item: Vote) => item.toObject());
            }
            if (this.asset != null) {
                data.asset = (Object.fromEntries)(this.asset);
            }
            if (this.assetV2 != null) {
                data.assetV2 = (Object.fromEntries)(this.assetV2);
            }
            if (this.frozen != null) {
                data.frozen = this.frozen.map((item: Account.Frozen) => item.toObject());
            }
            if (this.net_usage != null) {
                data.net_usage = this.net_usage;
            }
            if (this.acquired_delegated_frozen_balance_for_bandwidth != null) {
                data.acquired_delegated_frozen_balance_for_bandwidth = this.acquired_delegated_frozen_balance_for_bandwidth;
            }
            if (this.delegated_frozen_balance_for_bandwidth != null) {
                data.delegated_frozen_balance_for_bandwidth = this.delegated_frozen_balance_for_bandwidth;
            }
            if (this.old_tron_power != null) {
                data.old_tron_power = this.old_tron_power;
            }
            if (this.tron_power != null) {
                data.tron_power = this.tron_power.toObject();
            }
            if (this.asset_optimized != null) {
                data.asset_optimized = this.asset_optimized;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time;
            }
            if (this.latest_opration_time != null) {
                data.latest_opration_time = this.latest_opration_time;
            }
            if (this.allowance != null) {
                data.allowance = this.allowance;
            }
            if (this.latest_withdraw_time != null) {
                data.latest_withdraw_time = this.latest_withdraw_time;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.is_witness != null) {
                data.is_witness = this.is_witness;
            }
            if (this.is_committee != null) {
                data.is_committee = this.is_committee;
            }
            if (this.frozen_supply != null) {
                data.frozen_supply = this.frozen_supply.map((item: Account.Frozen) => item.toObject());
            }
            if (this.asset_issued_name != null) {
                data.asset_issued_name = this.asset_issued_name;
            }
            if (this.asset_issued_ID != null) {
                data.asset_issued_ID = this.asset_issued_ID;
            }
            if (this.latest_asset_operation_time != null) {
                data.latest_asset_operation_time = (Object.fromEntries)(this.latest_asset_operation_time);
            }
            if (this.latest_asset_operation_timeV2 != null) {
                data.latest_asset_operation_timeV2 = (Object.fromEntries)(this.latest_asset_operation_timeV2);
            }
            if (this.free_net_usage != null) {
                data.free_net_usage = this.free_net_usage;
            }
            if (this.free_asset_net_usage != null) {
                data.free_asset_net_usage = (Object.fromEntries)(this.free_asset_net_usage);
            }
            if (this.free_asset_net_usageV2 != null) {
                data.free_asset_net_usageV2 = (Object.fromEntries)(this.free_asset_net_usageV2);
            }
            if (this.latest_consume_time != null) {
                data.latest_consume_time = this.latest_consume_time;
            }
            if (this.latest_consume_free_time != null) {
                data.latest_consume_free_time = this.latest_consume_free_time;
            }
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.net_window_size != null) {
                data.net_window_size = this.net_window_size;
            }
            if (this.net_window_optimized != null) {
                data.net_window_optimized = this.net_window_optimized;
            }
            if (this.account_resource != null) {
                data.account_resource = this.account_resource.toObject();
            }
            if (this.codeHash != null) {
                data.codeHash = this.codeHash;
            }
            if (this.owner_permission != null) {
                data.owner_permission = this.owner_permission.toObject();
            }
            if (this.witness_permission != null) {
                data.witness_permission = this.witness_permission.toObject();
            }
            if (this.active_permission != null) {
                data.active_permission = this.active_permission.map((item: Permission) => item.toObject());
            }
            if (this.frozenV2 != null) {
                data.frozenV2 = this.frozenV2.map((item: Account.FreezeV2) => item.toObject());
            }
            if (this.unfrozenV2 != null) {
                data.unfrozenV2 = this.unfrozenV2.map((item: Account.UnFreezeV2) => item.toObject());
            }
            if (this.delegated_frozenV2_balance_for_bandwidth != null) {
                data.delegated_frozenV2_balance_for_bandwidth = this.delegated_frozenV2_balance_for_bandwidth;
            }
            if (this.acquired_delegated_frozenV2_balance_for_bandwidth != null) {
                data.acquired_delegated_frozenV2_balance_for_bandwidth = this.acquired_delegated_frozenV2_balance_for_bandwidth;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_name.length)
                writer.writeBytes(1, this.account_name);
            if (this.type != AccountType.Normal)
                writer.writeEnum(2, this.type);
            if (this.address.length)
                writer.writeBytes(3, this.address);
            if (this.balance != 0)
                writer.writeInt64(4, this.balance);
            if (this.votes.length)
                writer.writeRepeatedMessage(5, this.votes, (item: Vote) => item.serialize(writer));
            for (const [key, value] of this.asset) {
                writer.writeMessage(6, this.asset, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            for (const [key, value] of this.assetV2) {
                writer.writeMessage(56, this.assetV2, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            if (this.frozen.length)
                writer.writeRepeatedMessage(7, this.frozen, (item: Account.Frozen) => item.serialize(writer));
            if (this.net_usage != 0)
                writer.writeInt64(8, this.net_usage);
            if (this.acquired_delegated_frozen_balance_for_bandwidth != 0)
                writer.writeInt64(41, this.acquired_delegated_frozen_balance_for_bandwidth);
            if (this.delegated_frozen_balance_for_bandwidth != 0)
                writer.writeInt64(42, this.delegated_frozen_balance_for_bandwidth);
            if (this.old_tron_power != 0)
                writer.writeInt64(46, this.old_tron_power);
            if (this.has_tron_power)
                writer.writeMessage(47, this.tron_power, () => this.tron_power.serialize(writer));
            if (this.asset_optimized != false)
                writer.writeBool(60, this.asset_optimized);
            if (this.create_time != 0)
                writer.writeInt64(9, this.create_time);
            if (this.latest_opration_time != 0)
                writer.writeInt64(10, this.latest_opration_time);
            if (this.allowance != 0)
                writer.writeInt64(11, this.allowance);
            if (this.latest_withdraw_time != 0)
                writer.writeInt64(12, this.latest_withdraw_time);
            if (this.code.length)
                writer.writeBytes(13, this.code);
            if (this.is_witness != false)
                writer.writeBool(14, this.is_witness);
            if (this.is_committee != false)
                writer.writeBool(15, this.is_committee);
            if (this.frozen_supply.length)
                writer.writeRepeatedMessage(16, this.frozen_supply, (item: Account.Frozen) => item.serialize(writer));
            if (this.asset_issued_name.length)
                writer.writeBytes(17, this.asset_issued_name);
            if (this.asset_issued_ID.length)
                writer.writeBytes(57, this.asset_issued_ID);
            for (const [key, value] of this.latest_asset_operation_time) {
                writer.writeMessage(18, this.latest_asset_operation_time, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            for (const [key, value] of this.latest_asset_operation_timeV2) {
                writer.writeMessage(58, this.latest_asset_operation_timeV2, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            if (this.free_net_usage != 0)
                writer.writeInt64(19, this.free_net_usage);
            for (const [key, value] of this.free_asset_net_usage) {
                writer.writeMessage(20, this.free_asset_net_usage, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            for (const [key, value] of this.free_asset_net_usageV2) {
                writer.writeMessage(59, this.free_asset_net_usageV2, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            if (this.latest_consume_time != 0)
                writer.writeInt64(21, this.latest_consume_time);
            if (this.latest_consume_free_time != 0)
                writer.writeInt64(22, this.latest_consume_free_time);
            if (this.account_id.length)
                writer.writeBytes(23, this.account_id);
            if (this.net_window_size != 0)
                writer.writeInt64(24, this.net_window_size);
            if (this.net_window_optimized != false)
                writer.writeBool(25, this.net_window_optimized);
            if (this.has_account_resource)
                writer.writeMessage(26, this.account_resource, () => this.account_resource.serialize(writer));
            if (this.codeHash.length)
                writer.writeBytes(30, this.codeHash);
            if (this.has_owner_permission)
                writer.writeMessage(31, this.owner_permission, () => this.owner_permission.serialize(writer));
            if (this.has_witness_permission)
                writer.writeMessage(32, this.witness_permission, () => this.witness_permission.serialize(writer));
            if (this.active_permission.length)
                writer.writeRepeatedMessage(33, this.active_permission, (item: Permission) => item.serialize(writer));
            if (this.frozenV2.length)
                writer.writeRepeatedMessage(34, this.frozenV2, (item: Account.FreezeV2) => item.serialize(writer));
            if (this.unfrozenV2.length)
                writer.writeRepeatedMessage(35, this.unfrozenV2, (item: Account.UnFreezeV2) => item.serialize(writer));
            if (this.delegated_frozenV2_balance_for_bandwidth != 0)
                writer.writeInt64(36, this.delegated_frozenV2_balance_for_bandwidth);
            if (this.acquired_delegated_frozenV2_balance_for_bandwidth != 0)
                writer.writeInt64(37, this.acquired_delegated_frozenV2_balance_for_bandwidth);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Account {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Account();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_name = reader.readBytes();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.address = reader.readBytes();
                        break;
                    case 4:
                        message.balance = reader.readInt64();
                        break;
                    case 5:
                        reader.readMessage(message.votes, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Vote.deserialize(reader), Vote));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.asset as any, reader, reader.readString, reader.readInt64));
                        break;
                    case 56:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.assetV2 as any, reader, reader.readString, reader.readInt64));
                        break;
                    case 7:
                        reader.readMessage(message.frozen, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Account.Frozen.deserialize(reader), Account.Frozen));
                        break;
                    case 8:
                        message.net_usage = reader.readInt64();
                        break;
                    case 41:
                        message.acquired_delegated_frozen_balance_for_bandwidth = reader.readInt64();
                        break;
                    case 42:
                        message.delegated_frozen_balance_for_bandwidth = reader.readInt64();
                        break;
                    case 46:
                        message.old_tron_power = reader.readInt64();
                        break;
                    case 47:
                        reader.readMessage(message.tron_power, () => message.tron_power = Account.Frozen.deserialize(reader));
                        break;
                    case 60:
                        message.asset_optimized = reader.readBool();
                        break;
                    case 9:
                        message.create_time = reader.readInt64();
                        break;
                    case 10:
                        message.latest_opration_time = reader.readInt64();
                        break;
                    case 11:
                        message.allowance = reader.readInt64();
                        break;
                    case 12:
                        message.latest_withdraw_time = reader.readInt64();
                        break;
                    case 13:
                        message.code = reader.readBytes();
                        break;
                    case 14:
                        message.is_witness = reader.readBool();
                        break;
                    case 15:
                        message.is_committee = reader.readBool();
                        break;
                    case 16:
                        reader.readMessage(message.frozen_supply, () => pb_1.Message.addToRepeatedWrapperField(message, 16, Account.Frozen.deserialize(reader), Account.Frozen));
                        break;
                    case 17:
                        message.asset_issued_name = reader.readBytes();
                        break;
                    case 57:
                        message.asset_issued_ID = reader.readBytes();
                        break;
                    case 18:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.latest_asset_operation_time as any, reader, reader.readString, reader.readInt64));
                        break;
                    case 58:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.latest_asset_operation_timeV2 as any, reader, reader.readString, reader.readInt64));
                        break;
                    case 19:
                        message.free_net_usage = reader.readInt64();
                        break;
                    case 20:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.free_asset_net_usage as any, reader, reader.readString, reader.readInt64));
                        break;
                    case 59:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.free_asset_net_usageV2 as any, reader, reader.readString, reader.readInt64));
                        break;
                    case 21:
                        message.latest_consume_time = reader.readInt64();
                        break;
                    case 22:
                        message.latest_consume_free_time = reader.readInt64();
                        break;
                    case 23:
                        message.account_id = reader.readBytes();
                        break;
                    case 24:
                        message.net_window_size = reader.readInt64();
                        break;
                    case 25:
                        message.net_window_optimized = reader.readBool();
                        break;
                    case 26:
                        reader.readMessage(message.account_resource, () => message.account_resource = Account.AccountResource.deserialize(reader));
                        break;
                    case 30:
                        message.codeHash = reader.readBytes();
                        break;
                    case 31:
                        reader.readMessage(message.owner_permission, () => message.owner_permission = Permission.deserialize(reader));
                        break;
                    case 32:
                        reader.readMessage(message.witness_permission, () => message.witness_permission = Permission.deserialize(reader));
                        break;
                    case 33:
                        reader.readMessage(message.active_permission, () => pb_1.Message.addToRepeatedWrapperField(message, 33, Permission.deserialize(reader), Permission));
                        break;
                    case 34:
                        reader.readMessage(message.frozenV2, () => pb_1.Message.addToRepeatedWrapperField(message, 34, Account.FreezeV2.deserialize(reader), Account.FreezeV2));
                        break;
                    case 35:
                        reader.readMessage(message.unfrozenV2, () => pb_1.Message.addToRepeatedWrapperField(message, 35, Account.UnFreezeV2.deserialize(reader), Account.UnFreezeV2));
                        break;
                    case 36:
                        message.delegated_frozenV2_balance_for_bandwidth = reader.readInt64();
                        break;
                    case 37:
                        message.acquired_delegated_frozenV2_balance_for_bandwidth = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Account {
            return Account.deserialize(bytes);
        }
    }
    export namespace Account {
        export class Frozen extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                frozen_balance?: number;
                expire_time?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("frozen_balance" in data && data.frozen_balance != undefined) {
                        this.frozen_balance = data.frozen_balance;
                    }
                    if ("expire_time" in data && data.expire_time != undefined) {
                        this.expire_time = data.expire_time;
                    }
                }
            }
            get frozen_balance() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set frozen_balance(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get expire_time() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set expire_time(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                frozen_balance?: number;
                expire_time?: number;
            }): Frozen {
                const message = new Frozen({});
                if (data.frozen_balance != null) {
                    message.frozen_balance = data.frozen_balance;
                }
                if (data.expire_time != null) {
                    message.expire_time = data.expire_time;
                }
                return message;
            }
            toObject() {
                const data: {
                    frozen_balance?: number;
                    expire_time?: number;
                } = {};
                if (this.frozen_balance != null) {
                    data.frozen_balance = this.frozen_balance;
                }
                if (this.expire_time != null) {
                    data.expire_time = this.expire_time;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.frozen_balance != 0)
                    writer.writeInt64(1, this.frozen_balance);
                if (this.expire_time != 0)
                    writer.writeInt64(2, this.expire_time);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Frozen {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Frozen();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.frozen_balance = reader.readInt64();
                            break;
                        case 2:
                            message.expire_time = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Frozen {
                return Frozen.deserialize(bytes);
            }
        }
        export class AccountResource extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                energy_usage?: number;
                frozen_balance_for_energy?: Account.Frozen;
                latest_consume_time_for_energy?: number;
                acquired_delegated_frozen_balance_for_energy?: number;
                delegated_frozen_balance_for_energy?: number;
                storage_limit?: number;
                storage_usage?: number;
                latest_exchange_storage_time?: number;
                energy_window_size?: number;
                delegated_frozenV2_balance_for_energy?: number;
                acquired_delegated_frozenV2_balance_for_energy?: number;
                energy_window_optimized?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("energy_usage" in data && data.energy_usage != undefined) {
                        this.energy_usage = data.energy_usage;
                    }
                    if ("frozen_balance_for_energy" in data && data.frozen_balance_for_energy != undefined) {
                        this.frozen_balance_for_energy = data.frozen_balance_for_energy;
                    }
                    if ("latest_consume_time_for_energy" in data && data.latest_consume_time_for_energy != undefined) {
                        this.latest_consume_time_for_energy = data.latest_consume_time_for_energy;
                    }
                    if ("acquired_delegated_frozen_balance_for_energy" in data && data.acquired_delegated_frozen_balance_for_energy != undefined) {
                        this.acquired_delegated_frozen_balance_for_energy = data.acquired_delegated_frozen_balance_for_energy;
                    }
                    if ("delegated_frozen_balance_for_energy" in data && data.delegated_frozen_balance_for_energy != undefined) {
                        this.delegated_frozen_balance_for_energy = data.delegated_frozen_balance_for_energy;
                    }
                    if ("storage_limit" in data && data.storage_limit != undefined) {
                        this.storage_limit = data.storage_limit;
                    }
                    if ("storage_usage" in data && data.storage_usage != undefined) {
                        this.storage_usage = data.storage_usage;
                    }
                    if ("latest_exchange_storage_time" in data && data.latest_exchange_storage_time != undefined) {
                        this.latest_exchange_storage_time = data.latest_exchange_storage_time;
                    }
                    if ("energy_window_size" in data && data.energy_window_size != undefined) {
                        this.energy_window_size = data.energy_window_size;
                    }
                    if ("delegated_frozenV2_balance_for_energy" in data && data.delegated_frozenV2_balance_for_energy != undefined) {
                        this.delegated_frozenV2_balance_for_energy = data.delegated_frozenV2_balance_for_energy;
                    }
                    if ("acquired_delegated_frozenV2_balance_for_energy" in data && data.acquired_delegated_frozenV2_balance_for_energy != undefined) {
                        this.acquired_delegated_frozenV2_balance_for_energy = data.acquired_delegated_frozenV2_balance_for_energy;
                    }
                    if ("energy_window_optimized" in data && data.energy_window_optimized != undefined) {
                        this.energy_window_optimized = data.energy_window_optimized;
                    }
                }
            }
            get energy_usage() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set energy_usage(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get frozen_balance_for_energy() {
                return pb_1.Message.getWrapperField(this, Account.Frozen, 2) as Account.Frozen;
            }
            set frozen_balance_for_energy(value: Account.Frozen) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_frozen_balance_for_energy() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get latest_consume_time_for_energy() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set latest_consume_time_for_energy(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get acquired_delegated_frozen_balance_for_energy() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set acquired_delegated_frozen_balance_for_energy(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get delegated_frozen_balance_for_energy() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set delegated_frozen_balance_for_energy(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get storage_limit() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set storage_limit(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get storage_usage() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set storage_usage(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get latest_exchange_storage_time() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set latest_exchange_storage_time(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get energy_window_size() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set energy_window_size(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get delegated_frozenV2_balance_for_energy() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set delegated_frozenV2_balance_for_energy(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get acquired_delegated_frozenV2_balance_for_energy() {
                return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
            }
            set acquired_delegated_frozenV2_balance_for_energy(value: number) {
                pb_1.Message.setField(this, 11, value);
            }
            get energy_window_optimized() {
                return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
            }
            set energy_window_optimized(value: boolean) {
                pb_1.Message.setField(this, 12, value);
            }
            static fromObject(data: {
                energy_usage?: number;
                frozen_balance_for_energy?: ReturnType<typeof Account.Frozen.prototype.toObject>;
                latest_consume_time_for_energy?: number;
                acquired_delegated_frozen_balance_for_energy?: number;
                delegated_frozen_balance_for_energy?: number;
                storage_limit?: number;
                storage_usage?: number;
                latest_exchange_storage_time?: number;
                energy_window_size?: number;
                delegated_frozenV2_balance_for_energy?: number;
                acquired_delegated_frozenV2_balance_for_energy?: number;
                energy_window_optimized?: boolean;
            }): AccountResource {
                const message = new AccountResource({});
                if (data.energy_usage != null) {
                    message.energy_usage = data.energy_usage;
                }
                if (data.frozen_balance_for_energy != null) {
                    message.frozen_balance_for_energy = Account.Frozen.fromObject(data.frozen_balance_for_energy);
                }
                if (data.latest_consume_time_for_energy != null) {
                    message.latest_consume_time_for_energy = data.latest_consume_time_for_energy;
                }
                if (data.acquired_delegated_frozen_balance_for_energy != null) {
                    message.acquired_delegated_frozen_balance_for_energy = data.acquired_delegated_frozen_balance_for_energy;
                }
                if (data.delegated_frozen_balance_for_energy != null) {
                    message.delegated_frozen_balance_for_energy = data.delegated_frozen_balance_for_energy;
                }
                if (data.storage_limit != null) {
                    message.storage_limit = data.storage_limit;
                }
                if (data.storage_usage != null) {
                    message.storage_usage = data.storage_usage;
                }
                if (data.latest_exchange_storage_time != null) {
                    message.latest_exchange_storage_time = data.latest_exchange_storage_time;
                }
                if (data.energy_window_size != null) {
                    message.energy_window_size = data.energy_window_size;
                }
                if (data.delegated_frozenV2_balance_for_energy != null) {
                    message.delegated_frozenV2_balance_for_energy = data.delegated_frozenV2_balance_for_energy;
                }
                if (data.acquired_delegated_frozenV2_balance_for_energy != null) {
                    message.acquired_delegated_frozenV2_balance_for_energy = data.acquired_delegated_frozenV2_balance_for_energy;
                }
                if (data.energy_window_optimized != null) {
                    message.energy_window_optimized = data.energy_window_optimized;
                }
                return message;
            }
            toObject() {
                const data: {
                    energy_usage?: number;
                    frozen_balance_for_energy?: ReturnType<typeof Account.Frozen.prototype.toObject>;
                    latest_consume_time_for_energy?: number;
                    acquired_delegated_frozen_balance_for_energy?: number;
                    delegated_frozen_balance_for_energy?: number;
                    storage_limit?: number;
                    storage_usage?: number;
                    latest_exchange_storage_time?: number;
                    energy_window_size?: number;
                    delegated_frozenV2_balance_for_energy?: number;
                    acquired_delegated_frozenV2_balance_for_energy?: number;
                    energy_window_optimized?: boolean;
                } = {};
                if (this.energy_usage != null) {
                    data.energy_usage = this.energy_usage;
                }
                if (this.frozen_balance_for_energy != null) {
                    data.frozen_balance_for_energy = this.frozen_balance_for_energy.toObject();
                }
                if (this.latest_consume_time_for_energy != null) {
                    data.latest_consume_time_for_energy = this.latest_consume_time_for_energy;
                }
                if (this.acquired_delegated_frozen_balance_for_energy != null) {
                    data.acquired_delegated_frozen_balance_for_energy = this.acquired_delegated_frozen_balance_for_energy;
                }
                if (this.delegated_frozen_balance_for_energy != null) {
                    data.delegated_frozen_balance_for_energy = this.delegated_frozen_balance_for_energy;
                }
                if (this.storage_limit != null) {
                    data.storage_limit = this.storage_limit;
                }
                if (this.storage_usage != null) {
                    data.storage_usage = this.storage_usage;
                }
                if (this.latest_exchange_storage_time != null) {
                    data.latest_exchange_storage_time = this.latest_exchange_storage_time;
                }
                if (this.energy_window_size != null) {
                    data.energy_window_size = this.energy_window_size;
                }
                if (this.delegated_frozenV2_balance_for_energy != null) {
                    data.delegated_frozenV2_balance_for_energy = this.delegated_frozenV2_balance_for_energy;
                }
                if (this.acquired_delegated_frozenV2_balance_for_energy != null) {
                    data.acquired_delegated_frozenV2_balance_for_energy = this.acquired_delegated_frozenV2_balance_for_energy;
                }
                if (this.energy_window_optimized != null) {
                    data.energy_window_optimized = this.energy_window_optimized;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.energy_usage != 0)
                    writer.writeInt64(1, this.energy_usage);
                if (this.has_frozen_balance_for_energy)
                    writer.writeMessage(2, this.frozen_balance_for_energy, () => this.frozen_balance_for_energy.serialize(writer));
                if (this.latest_consume_time_for_energy != 0)
                    writer.writeInt64(3, this.latest_consume_time_for_energy);
                if (this.acquired_delegated_frozen_balance_for_energy != 0)
                    writer.writeInt64(4, this.acquired_delegated_frozen_balance_for_energy);
                if (this.delegated_frozen_balance_for_energy != 0)
                    writer.writeInt64(5, this.delegated_frozen_balance_for_energy);
                if (this.storage_limit != 0)
                    writer.writeInt64(6, this.storage_limit);
                if (this.storage_usage != 0)
                    writer.writeInt64(7, this.storage_usage);
                if (this.latest_exchange_storage_time != 0)
                    writer.writeInt64(8, this.latest_exchange_storage_time);
                if (this.energy_window_size != 0)
                    writer.writeInt64(9, this.energy_window_size);
                if (this.delegated_frozenV2_balance_for_energy != 0)
                    writer.writeInt64(10, this.delegated_frozenV2_balance_for_energy);
                if (this.acquired_delegated_frozenV2_balance_for_energy != 0)
                    writer.writeInt64(11, this.acquired_delegated_frozenV2_balance_for_energy);
                if (this.energy_window_optimized != false)
                    writer.writeBool(12, this.energy_window_optimized);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountResource {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountResource();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.energy_usage = reader.readInt64();
                            break;
                        case 2:
                            reader.readMessage(message.frozen_balance_for_energy, () => message.frozen_balance_for_energy = Account.Frozen.deserialize(reader));
                            break;
                        case 3:
                            message.latest_consume_time_for_energy = reader.readInt64();
                            break;
                        case 4:
                            message.acquired_delegated_frozen_balance_for_energy = reader.readInt64();
                            break;
                        case 5:
                            message.delegated_frozen_balance_for_energy = reader.readInt64();
                            break;
                        case 6:
                            message.storage_limit = reader.readInt64();
                            break;
                        case 7:
                            message.storage_usage = reader.readInt64();
                            break;
                        case 8:
                            message.latest_exchange_storage_time = reader.readInt64();
                            break;
                        case 9:
                            message.energy_window_size = reader.readInt64();
                            break;
                        case 10:
                            message.delegated_frozenV2_balance_for_energy = reader.readInt64();
                            break;
                        case 11:
                            message.acquired_delegated_frozenV2_balance_for_energy = reader.readInt64();
                            break;
                        case 12:
                            message.energy_window_optimized = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AccountResource {
                return AccountResource.deserialize(bytes);
            }
        }
        export class FreezeV2 extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                type?: dependency_2.protocol.ResourceCode;
                amount?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                }
            }
            get type() {
                return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.protocol.ResourceCode.BANDWIDTH) as dependency_2.protocol.ResourceCode;
            }
            set type(value: dependency_2.protocol.ResourceCode) {
                pb_1.Message.setField(this, 1, value);
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                type?: dependency_2.protocol.ResourceCode;
                amount?: number;
            }): FreezeV2 {
                const message = new FreezeV2({});
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    type?: dependency_2.protocol.ResourceCode;
                    amount?: number;
                } = {};
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.type != dependency_2.protocol.ResourceCode.BANDWIDTH)
                    writer.writeEnum(1, this.type);
                if (this.amount != 0)
                    writer.writeInt64(2, this.amount);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FreezeV2 {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FreezeV2();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.type = reader.readEnum();
                            break;
                        case 2:
                            message.amount = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FreezeV2 {
                return FreezeV2.deserialize(bytes);
            }
        }
        export class UnFreezeV2 extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                type?: dependency_2.protocol.ResourceCode;
                unfreeze_amount?: number;
                unfreeze_expire_time?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("unfreeze_amount" in data && data.unfreeze_amount != undefined) {
                        this.unfreeze_amount = data.unfreeze_amount;
                    }
                    if ("unfreeze_expire_time" in data && data.unfreeze_expire_time != undefined) {
                        this.unfreeze_expire_time = data.unfreeze_expire_time;
                    }
                }
            }
            get type() {
                return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.protocol.ResourceCode.BANDWIDTH) as dependency_2.protocol.ResourceCode;
            }
            set type(value: dependency_2.protocol.ResourceCode) {
                pb_1.Message.setField(this, 1, value);
            }
            get unfreeze_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set unfreeze_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get unfreeze_expire_time() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set unfreeze_expire_time(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                type?: dependency_2.protocol.ResourceCode;
                unfreeze_amount?: number;
                unfreeze_expire_time?: number;
            }): UnFreezeV2 {
                const message = new UnFreezeV2({});
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.unfreeze_amount != null) {
                    message.unfreeze_amount = data.unfreeze_amount;
                }
                if (data.unfreeze_expire_time != null) {
                    message.unfreeze_expire_time = data.unfreeze_expire_time;
                }
                return message;
            }
            toObject() {
                const data: {
                    type?: dependency_2.protocol.ResourceCode;
                    unfreeze_amount?: number;
                    unfreeze_expire_time?: number;
                } = {};
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.unfreeze_amount != null) {
                    data.unfreeze_amount = this.unfreeze_amount;
                }
                if (this.unfreeze_expire_time != null) {
                    data.unfreeze_expire_time = this.unfreeze_expire_time;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.type != dependency_2.protocol.ResourceCode.BANDWIDTH)
                    writer.writeEnum(1, this.type);
                if (this.unfreeze_amount != 0)
                    writer.writeInt64(3, this.unfreeze_amount);
                if (this.unfreeze_expire_time != 0)
                    writer.writeInt64(4, this.unfreeze_expire_time);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnFreezeV2 {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnFreezeV2();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.type = reader.readEnum();
                            break;
                        case 3:
                            message.unfreeze_amount = reader.readInt64();
                            break;
                        case 4:
                            message.unfreeze_expire_time = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): UnFreezeV2 {
                return UnFreezeV2.deserialize(bytes);
            }
        }
    }
    export class Key extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: Uint8Array;
            weight?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("weight" in data && data.weight != undefined) {
                    this.weight = data.weight;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get weight() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set weight(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            address?: Uint8Array;
            weight?: number;
        }): Key {
            const message = new Key({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.weight != null) {
                message.weight = data.weight;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: Uint8Array;
                weight?: number;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.weight != null) {
                data.weight = this.weight;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeBytes(1, this.address);
            if (this.weight != 0)
                writer.writeInt64(2, this.weight);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Key {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Key();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readBytes();
                        break;
                    case 2:
                        message.weight = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Key {
            return Key.deserialize(bytes);
        }
    }
    export class DelegatedResource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: Uint8Array;
            to?: Uint8Array;
            frozen_balance_for_bandwidth?: number;
            frozen_balance_for_energy?: number;
            expire_time_for_bandwidth?: number;
            expire_time_for_energy?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("frozen_balance_for_bandwidth" in data && data.frozen_balance_for_bandwidth != undefined) {
                    this.frozen_balance_for_bandwidth = data.frozen_balance_for_bandwidth;
                }
                if ("frozen_balance_for_energy" in data && data.frozen_balance_for_energy != undefined) {
                    this.frozen_balance_for_energy = data.frozen_balance_for_energy;
                }
                if ("expire_time_for_bandwidth" in data && data.expire_time_for_bandwidth != undefined) {
                    this.expire_time_for_bandwidth = data.expire_time_for_bandwidth;
                }
                if ("expire_time_for_energy" in data && data.expire_time_for_energy != undefined) {
                    this.expire_time_for_energy = data.expire_time_for_energy;
                }
            }
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set from(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set to(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get frozen_balance_for_bandwidth() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set frozen_balance_for_bandwidth(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get frozen_balance_for_energy() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set frozen_balance_for_energy(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get expire_time_for_bandwidth() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set expire_time_for_bandwidth(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get expire_time_for_energy() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set expire_time_for_energy(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            from?: Uint8Array;
            to?: Uint8Array;
            frozen_balance_for_bandwidth?: number;
            frozen_balance_for_energy?: number;
            expire_time_for_bandwidth?: number;
            expire_time_for_energy?: number;
        }): DelegatedResource {
            const message = new DelegatedResource({});
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.frozen_balance_for_bandwidth != null) {
                message.frozen_balance_for_bandwidth = data.frozen_balance_for_bandwidth;
            }
            if (data.frozen_balance_for_energy != null) {
                message.frozen_balance_for_energy = data.frozen_balance_for_energy;
            }
            if (data.expire_time_for_bandwidth != null) {
                message.expire_time_for_bandwidth = data.expire_time_for_bandwidth;
            }
            if (data.expire_time_for_energy != null) {
                message.expire_time_for_energy = data.expire_time_for_energy;
            }
            return message;
        }
        toObject() {
            const data: {
                from?: Uint8Array;
                to?: Uint8Array;
                frozen_balance_for_bandwidth?: number;
                frozen_balance_for_energy?: number;
                expire_time_for_bandwidth?: number;
                expire_time_for_energy?: number;
            } = {};
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.frozen_balance_for_bandwidth != null) {
                data.frozen_balance_for_bandwidth = this.frozen_balance_for_bandwidth;
            }
            if (this.frozen_balance_for_energy != null) {
                data.frozen_balance_for_energy = this.frozen_balance_for_energy;
            }
            if (this.expire_time_for_bandwidth != null) {
                data.expire_time_for_bandwidth = this.expire_time_for_bandwidth;
            }
            if (this.expire_time_for_energy != null) {
                data.expire_time_for_energy = this.expire_time_for_energy;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.from.length)
                writer.writeBytes(1, this.from);
            if (this.to.length)
                writer.writeBytes(2, this.to);
            if (this.frozen_balance_for_bandwidth != 0)
                writer.writeInt64(3, this.frozen_balance_for_bandwidth);
            if (this.frozen_balance_for_energy != 0)
                writer.writeInt64(4, this.frozen_balance_for_energy);
            if (this.expire_time_for_bandwidth != 0)
                writer.writeInt64(5, this.expire_time_for_bandwidth);
            if (this.expire_time_for_energy != 0)
                writer.writeInt64(6, this.expire_time_for_energy);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelegatedResource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelegatedResource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from = reader.readBytes();
                        break;
                    case 2:
                        message.to = reader.readBytes();
                        break;
                    case 3:
                        message.frozen_balance_for_bandwidth = reader.readInt64();
                        break;
                    case 4:
                        message.frozen_balance_for_energy = reader.readInt64();
                        break;
                    case 5:
                        message.expire_time_for_bandwidth = reader.readInt64();
                        break;
                    case 6:
                        message.expire_time_for_energy = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelegatedResource {
            return DelegatedResource.deserialize(bytes);
        }
    }
    export class authority extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: AccountId;
            permission_name?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("permission_name" in data && data.permission_name != undefined) {
                    this.permission_name = data.permission_name;
                }
            }
        }
        get account() {
            return pb_1.Message.getWrapperField(this, AccountId, 1) as AccountId;
        }
        set account(value: AccountId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_account() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get permission_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set permission_name(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account?: ReturnType<typeof AccountId.prototype.toObject>;
            permission_name?: Uint8Array;
        }): authority {
            const message = new authority({});
            if (data.account != null) {
                message.account = AccountId.fromObject(data.account);
            }
            if (data.permission_name != null) {
                message.permission_name = data.permission_name;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: ReturnType<typeof AccountId.prototype.toObject>;
                permission_name?: Uint8Array;
            } = {};
            if (this.account != null) {
                data.account = this.account.toObject();
            }
            if (this.permission_name != null) {
                data.permission_name = this.permission_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_account)
                writer.writeMessage(1, this.account, () => this.account.serialize(writer));
            if (this.permission_name.length)
                writer.writeBytes(2, this.permission_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): authority {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new authority();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account, () => message.account = AccountId.deserialize(reader));
                        break;
                    case 2:
                        message.permission_name = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): authority {
            return authority.deserialize(bytes);
        }
    }
    export class Permission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: Permission.PermissionType;
            id?: number;
            permission_name?: string;
            threshold?: number;
            parent_id?: number;
            operations?: Uint8Array;
            keys?: Key[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("permission_name" in data && data.permission_name != undefined) {
                    this.permission_name = data.permission_name;
                }
                if ("threshold" in data && data.threshold != undefined) {
                    this.threshold = data.threshold;
                }
                if ("parent_id" in data && data.parent_id != undefined) {
                    this.parent_id = data.parent_id;
                }
                if ("operations" in data && data.operations != undefined) {
                    this.operations = data.operations;
                }
                if ("keys" in data && data.keys != undefined) {
                    this.keys = data.keys;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, Permission.PermissionType.Owner) as Permission.PermissionType;
        }
        set type(value: Permission.PermissionType) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get permission_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set permission_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get threshold() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set threshold(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get parent_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set parent_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get operations() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set operations(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get keys() {
            return pb_1.Message.getRepeatedWrapperField(this, Key, 7) as Key[];
        }
        set keys(value: Key[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            type?: Permission.PermissionType;
            id?: number;
            permission_name?: string;
            threshold?: number;
            parent_id?: number;
            operations?: Uint8Array;
            keys?: ReturnType<typeof Key.prototype.toObject>[];
        }): Permission {
            const message = new Permission({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.permission_name != null) {
                message.permission_name = data.permission_name;
            }
            if (data.threshold != null) {
                message.threshold = data.threshold;
            }
            if (data.parent_id != null) {
                message.parent_id = data.parent_id;
            }
            if (data.operations != null) {
                message.operations = data.operations;
            }
            if (data.keys != null) {
                message.keys = data.keys.map(item => Key.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: Permission.PermissionType;
                id?: number;
                permission_name?: string;
                threshold?: number;
                parent_id?: number;
                operations?: Uint8Array;
                keys?: ReturnType<typeof Key.prototype.toObject>[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.permission_name != null) {
                data.permission_name = this.permission_name;
            }
            if (this.threshold != null) {
                data.threshold = this.threshold;
            }
            if (this.parent_id != null) {
                data.parent_id = this.parent_id;
            }
            if (this.operations != null) {
                data.operations = this.operations;
            }
            if (this.keys != null) {
                data.keys = this.keys.map((item: Key) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != Permission.PermissionType.Owner)
                writer.writeEnum(1, this.type);
            if (this.id != 0)
                writer.writeInt32(2, this.id);
            if (this.permission_name.length)
                writer.writeString(3, this.permission_name);
            if (this.threshold != 0)
                writer.writeInt64(4, this.threshold);
            if (this.parent_id != 0)
                writer.writeInt32(5, this.parent_id);
            if (this.operations.length)
                writer.writeBytes(6, this.operations);
            if (this.keys.length)
                writer.writeRepeatedMessage(7, this.keys, (item: Key) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Permission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Permission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.id = reader.readInt32();
                        break;
                    case 3:
                        message.permission_name = reader.readString();
                        break;
                    case 4:
                        message.threshold = reader.readInt64();
                        break;
                    case 5:
                        message.parent_id = reader.readInt32();
                        break;
                    case 6:
                        message.operations = reader.readBytes();
                        break;
                    case 7:
                        reader.readMessage(message.keys, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Key.deserialize(reader), Key));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Permission {
            return Permission.deserialize(bytes);
        }
    }
    export namespace Permission {
        export enum PermissionType {
            Owner = 0,
            Witness = 1,
            Active = 2
        }
    }
    export class Witness extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: Uint8Array;
            voteCount?: number;
            pubKey?: Uint8Array;
            url?: string;
            totalProduced?: number;
            totalMissed?: number;
            latestBlockNum?: number;
            latestSlotNum?: number;
            isJobs?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("voteCount" in data && data.voteCount != undefined) {
                    this.voteCount = data.voteCount;
                }
                if ("pubKey" in data && data.pubKey != undefined) {
                    this.pubKey = data.pubKey;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("totalProduced" in data && data.totalProduced != undefined) {
                    this.totalProduced = data.totalProduced;
                }
                if ("totalMissed" in data && data.totalMissed != undefined) {
                    this.totalMissed = data.totalMissed;
                }
                if ("latestBlockNum" in data && data.latestBlockNum != undefined) {
                    this.latestBlockNum = data.latestBlockNum;
                }
                if ("latestSlotNum" in data && data.latestSlotNum != undefined) {
                    this.latestSlotNum = data.latestSlotNum;
                }
                if ("isJobs" in data && data.isJobs != undefined) {
                    this.isJobs = data.isJobs;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get voteCount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set voteCount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pubKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set pubKey(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get totalProduced() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set totalProduced(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get totalMissed() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set totalMissed(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get latestBlockNum() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set latestBlockNum(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get latestSlotNum() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set latestSlotNum(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get isJobs() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set isJobs(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            address?: Uint8Array;
            voteCount?: number;
            pubKey?: Uint8Array;
            url?: string;
            totalProduced?: number;
            totalMissed?: number;
            latestBlockNum?: number;
            latestSlotNum?: number;
            isJobs?: boolean;
        }): Witness {
            const message = new Witness({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.voteCount != null) {
                message.voteCount = data.voteCount;
            }
            if (data.pubKey != null) {
                message.pubKey = data.pubKey;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.totalProduced != null) {
                message.totalProduced = data.totalProduced;
            }
            if (data.totalMissed != null) {
                message.totalMissed = data.totalMissed;
            }
            if (data.latestBlockNum != null) {
                message.latestBlockNum = data.latestBlockNum;
            }
            if (data.latestSlotNum != null) {
                message.latestSlotNum = data.latestSlotNum;
            }
            if (data.isJobs != null) {
                message.isJobs = data.isJobs;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: Uint8Array;
                voteCount?: number;
                pubKey?: Uint8Array;
                url?: string;
                totalProduced?: number;
                totalMissed?: number;
                latestBlockNum?: number;
                latestSlotNum?: number;
                isJobs?: boolean;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.voteCount != null) {
                data.voteCount = this.voteCount;
            }
            if (this.pubKey != null) {
                data.pubKey = this.pubKey;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.totalProduced != null) {
                data.totalProduced = this.totalProduced;
            }
            if (this.totalMissed != null) {
                data.totalMissed = this.totalMissed;
            }
            if (this.latestBlockNum != null) {
                data.latestBlockNum = this.latestBlockNum;
            }
            if (this.latestSlotNum != null) {
                data.latestSlotNum = this.latestSlotNum;
            }
            if (this.isJobs != null) {
                data.isJobs = this.isJobs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeBytes(1, this.address);
            if (this.voteCount != 0)
                writer.writeInt64(2, this.voteCount);
            if (this.pubKey.length)
                writer.writeBytes(3, this.pubKey);
            if (this.url.length)
                writer.writeString(4, this.url);
            if (this.totalProduced != 0)
                writer.writeInt64(5, this.totalProduced);
            if (this.totalMissed != 0)
                writer.writeInt64(6, this.totalMissed);
            if (this.latestBlockNum != 0)
                writer.writeInt64(7, this.latestBlockNum);
            if (this.latestSlotNum != 0)
                writer.writeInt64(8, this.latestSlotNum);
            if (this.isJobs != false)
                writer.writeBool(9, this.isJobs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Witness {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Witness();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readBytes();
                        break;
                    case 2:
                        message.voteCount = reader.readInt64();
                        break;
                    case 3:
                        message.pubKey = reader.readBytes();
                        break;
                    case 4:
                        message.url = reader.readString();
                        break;
                    case 5:
                        message.totalProduced = reader.readInt64();
                        break;
                    case 6:
                        message.totalMissed = reader.readInt64();
                        break;
                    case 7:
                        message.latestBlockNum = reader.readInt64();
                        break;
                    case 8:
                        message.latestSlotNum = reader.readInt64();
                        break;
                    case 9:
                        message.isJobs = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Witness {
            return Witness.deserialize(bytes);
        }
    }
    export class Votes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: Uint8Array;
            old_votes?: Vote[];
            new_votes?: Vote[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("old_votes" in data && data.old_votes != undefined) {
                    this.old_votes = data.old_votes;
                }
                if ("new_votes" in data && data.new_votes != undefined) {
                    this.new_votes = data.new_votes;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get old_votes() {
            return pb_1.Message.getRepeatedWrapperField(this, Vote, 2) as Vote[];
        }
        set old_votes(value: Vote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get new_votes() {
            return pb_1.Message.getRepeatedWrapperField(this, Vote, 3) as Vote[];
        }
        set new_votes(value: Vote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            address?: Uint8Array;
            old_votes?: ReturnType<typeof Vote.prototype.toObject>[];
            new_votes?: ReturnType<typeof Vote.prototype.toObject>[];
        }): Votes {
            const message = new Votes({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.old_votes != null) {
                message.old_votes = data.old_votes.map(item => Vote.fromObject(item));
            }
            if (data.new_votes != null) {
                message.new_votes = data.new_votes.map(item => Vote.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                address?: Uint8Array;
                old_votes?: ReturnType<typeof Vote.prototype.toObject>[];
                new_votes?: ReturnType<typeof Vote.prototype.toObject>[];
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.old_votes != null) {
                data.old_votes = this.old_votes.map((item: Vote) => item.toObject());
            }
            if (this.new_votes != null) {
                data.new_votes = this.new_votes.map((item: Vote) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeBytes(1, this.address);
            if (this.old_votes.length)
                writer.writeRepeatedMessage(2, this.old_votes, (item: Vote) => item.serialize(writer));
            if (this.new_votes.length)
                writer.writeRepeatedMessage(3, this.new_votes, (item: Vote) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Votes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Votes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.old_votes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Vote.deserialize(reader), Vote));
                        break;
                    case 3:
                        reader.readMessage(message.new_votes, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Vote.deserialize(reader), Vote));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Votes {
            return Votes.deserialize(bytes);
        }
    }
    export class TXOutput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: number;
            pubKeyHash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("pubKeyHash" in data && data.pubKeyHash != undefined) {
                    this.pubKeyHash = data.pubKeyHash;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pubKeyHash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set pubKeyHash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            value?: number;
            pubKeyHash?: Uint8Array;
        }): TXOutput {
            const message = new TXOutput({});
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.pubKeyHash != null) {
                message.pubKeyHash = data.pubKeyHash;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: number;
                pubKeyHash?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.pubKeyHash != null) {
                data.pubKeyHash = this.pubKeyHash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != 0)
                writer.writeInt64(1, this.value);
            if (this.pubKeyHash.length)
                writer.writeBytes(2, this.pubKeyHash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TXOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TXOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readInt64();
                        break;
                    case 2:
                        message.pubKeyHash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TXOutput {
            return TXOutput.deserialize(bytes);
        }
    }
    export class TXInput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            raw_data?: TXInput.raw;
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("raw_data" in data && data.raw_data != undefined) {
                    this.raw_data = data.raw_data;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get raw_data() {
            return pb_1.Message.getWrapperField(this, TXInput.raw, 1) as TXInput.raw;
        }
        set raw_data(value: TXInput.raw) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_raw_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            raw_data?: ReturnType<typeof TXInput.raw.prototype.toObject>;
            signature?: Uint8Array;
        }): TXInput {
            const message = new TXInput({});
            if (data.raw_data != null) {
                message.raw_data = TXInput.raw.fromObject(data.raw_data);
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                raw_data?: ReturnType<typeof TXInput.raw.prototype.toObject>;
                signature?: Uint8Array;
            } = {};
            if (this.raw_data != null) {
                data.raw_data = this.raw_data.toObject();
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_raw_data)
                writer.writeMessage(1, this.raw_data, () => this.raw_data.serialize(writer));
            if (this.signature.length)
                writer.writeBytes(4, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TXInput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TXInput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.raw_data, () => message.raw_data = TXInput.raw.deserialize(reader));
                        break;
                    case 4:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TXInput {
            return TXInput.deserialize(bytes);
        }
    }
    export namespace TXInput {
        export class raw extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                txID?: Uint8Array;
                vout?: number;
                pubKey?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("txID" in data && data.txID != undefined) {
                        this.txID = data.txID;
                    }
                    if ("vout" in data && data.vout != undefined) {
                        this.vout = data.vout;
                    }
                    if ("pubKey" in data && data.pubKey != undefined) {
                        this.pubKey = data.pubKey;
                    }
                }
            }
            get txID() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set txID(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get vout() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set vout(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get pubKey() {
                return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
            }
            set pubKey(value: Uint8Array) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                txID?: Uint8Array;
                vout?: number;
                pubKey?: Uint8Array;
            }): raw {
                const message = new raw({});
                if (data.txID != null) {
                    message.txID = data.txID;
                }
                if (data.vout != null) {
                    message.vout = data.vout;
                }
                if (data.pubKey != null) {
                    message.pubKey = data.pubKey;
                }
                return message;
            }
            toObject() {
                const data: {
                    txID?: Uint8Array;
                    vout?: number;
                    pubKey?: Uint8Array;
                } = {};
                if (this.txID != null) {
                    data.txID = this.txID;
                }
                if (this.vout != null) {
                    data.vout = this.vout;
                }
                if (this.pubKey != null) {
                    data.pubKey = this.pubKey;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.txID.length)
                    writer.writeBytes(1, this.txID);
                if (this.vout != 0)
                    writer.writeInt64(2, this.vout);
                if (this.pubKey.length)
                    writer.writeBytes(3, this.pubKey);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): raw {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new raw();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.txID = reader.readBytes();
                            break;
                        case 2:
                            message.vout = reader.readInt64();
                            break;
                        case 3:
                            message.pubKey = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): raw {
                return raw.deserialize(bytes);
            }
        }
    }
    export class TXOutputs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            outputs?: TXOutput[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("outputs" in data && data.outputs != undefined) {
                    this.outputs = data.outputs;
                }
            }
        }
        get outputs() {
            return pb_1.Message.getRepeatedWrapperField(this, TXOutput, 1) as TXOutput[];
        }
        set outputs(value: TXOutput[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            outputs?: ReturnType<typeof TXOutput.prototype.toObject>[];
        }): TXOutputs {
            const message = new TXOutputs({});
            if (data.outputs != null) {
                message.outputs = data.outputs.map(item => TXOutput.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                outputs?: ReturnType<typeof TXOutput.prototype.toObject>[];
            } = {};
            if (this.outputs != null) {
                data.outputs = this.outputs.map((item: TXOutput) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.outputs.length)
                writer.writeRepeatedMessage(1, this.outputs, (item: TXOutput) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TXOutputs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TXOutputs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.outputs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TXOutput.deserialize(reader), TXOutput));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TXOutputs {
            return TXOutputs.deserialize(bytes);
        }
    }
    export class ResourceReceipt extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            energy_usage?: number;
            energy_fee?: number;
            origin_energy_usage?: number;
            energy_usage_total?: number;
            net_usage?: number;
            net_fee?: number;
            result?: Transaction.Result.contractResult;
            energy_penalty_total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("energy_usage" in data && data.energy_usage != undefined) {
                    this.energy_usage = data.energy_usage;
                }
                if ("energy_fee" in data && data.energy_fee != undefined) {
                    this.energy_fee = data.energy_fee;
                }
                if ("origin_energy_usage" in data && data.origin_energy_usage != undefined) {
                    this.origin_energy_usage = data.origin_energy_usage;
                }
                if ("energy_usage_total" in data && data.energy_usage_total != undefined) {
                    this.energy_usage_total = data.energy_usage_total;
                }
                if ("net_usage" in data && data.net_usage != undefined) {
                    this.net_usage = data.net_usage;
                }
                if ("net_fee" in data && data.net_fee != undefined) {
                    this.net_fee = data.net_fee;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("energy_penalty_total" in data && data.energy_penalty_total != undefined) {
                    this.energy_penalty_total = data.energy_penalty_total;
                }
            }
        }
        get energy_usage() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set energy_usage(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get energy_fee() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set energy_fee(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get origin_energy_usage() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set origin_energy_usage(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get energy_usage_total() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set energy_usage_total(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get net_usage() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set net_usage(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get net_fee() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set net_fee(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 7, Transaction.Result.contractResult.DEFAULT) as Transaction.Result.contractResult;
        }
        set result(value: Transaction.Result.contractResult) {
            pb_1.Message.setField(this, 7, value);
        }
        get energy_penalty_total() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set energy_penalty_total(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            energy_usage?: number;
            energy_fee?: number;
            origin_energy_usage?: number;
            energy_usage_total?: number;
            net_usage?: number;
            net_fee?: number;
            result?: Transaction.Result.contractResult;
            energy_penalty_total?: number;
        }): ResourceReceipt {
            const message = new ResourceReceipt({});
            if (data.energy_usage != null) {
                message.energy_usage = data.energy_usage;
            }
            if (data.energy_fee != null) {
                message.energy_fee = data.energy_fee;
            }
            if (data.origin_energy_usage != null) {
                message.origin_energy_usage = data.origin_energy_usage;
            }
            if (data.energy_usage_total != null) {
                message.energy_usage_total = data.energy_usage_total;
            }
            if (data.net_usage != null) {
                message.net_usage = data.net_usage;
            }
            if (data.net_fee != null) {
                message.net_fee = data.net_fee;
            }
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.energy_penalty_total != null) {
                message.energy_penalty_total = data.energy_penalty_total;
            }
            return message;
        }
        toObject() {
            const data: {
                energy_usage?: number;
                energy_fee?: number;
                origin_energy_usage?: number;
                energy_usage_total?: number;
                net_usage?: number;
                net_fee?: number;
                result?: Transaction.Result.contractResult;
                energy_penalty_total?: number;
            } = {};
            if (this.energy_usage != null) {
                data.energy_usage = this.energy_usage;
            }
            if (this.energy_fee != null) {
                data.energy_fee = this.energy_fee;
            }
            if (this.origin_energy_usage != null) {
                data.origin_energy_usage = this.origin_energy_usage;
            }
            if (this.energy_usage_total != null) {
                data.energy_usage_total = this.energy_usage_total;
            }
            if (this.net_usage != null) {
                data.net_usage = this.net_usage;
            }
            if (this.net_fee != null) {
                data.net_fee = this.net_fee;
            }
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.energy_penalty_total != null) {
                data.energy_penalty_total = this.energy_penalty_total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.energy_usage != 0)
                writer.writeInt64(1, this.energy_usage);
            if (this.energy_fee != 0)
                writer.writeInt64(2, this.energy_fee);
            if (this.origin_energy_usage != 0)
                writer.writeInt64(3, this.origin_energy_usage);
            if (this.energy_usage_total != 0)
                writer.writeInt64(4, this.energy_usage_total);
            if (this.net_usage != 0)
                writer.writeInt64(5, this.net_usage);
            if (this.net_fee != 0)
                writer.writeInt64(6, this.net_fee);
            if (this.result != Transaction.Result.contractResult.DEFAULT)
                writer.writeEnum(7, this.result);
            if (this.energy_penalty_total != 0)
                writer.writeInt64(8, this.energy_penalty_total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceReceipt {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceReceipt();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.energy_usage = reader.readInt64();
                        break;
                    case 2:
                        message.energy_fee = reader.readInt64();
                        break;
                    case 3:
                        message.origin_energy_usage = reader.readInt64();
                        break;
                    case 4:
                        message.energy_usage_total = reader.readInt64();
                        break;
                    case 5:
                        message.net_usage = reader.readInt64();
                        break;
                    case 6:
                        message.net_fee = reader.readInt64();
                        break;
                    case 7:
                        message.result = reader.readEnum();
                        break;
                    case 8:
                        message.energy_penalty_total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceReceipt {
            return ResourceReceipt.deserialize(bytes);
        }
    }
    export class MarketOrderDetail extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            makerOrderId?: Uint8Array;
            takerOrderId?: Uint8Array;
            fillSellQuantity?: number;
            fillBuyQuantity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("makerOrderId" in data && data.makerOrderId != undefined) {
                    this.makerOrderId = data.makerOrderId;
                }
                if ("takerOrderId" in data && data.takerOrderId != undefined) {
                    this.takerOrderId = data.takerOrderId;
                }
                if ("fillSellQuantity" in data && data.fillSellQuantity != undefined) {
                    this.fillSellQuantity = data.fillSellQuantity;
                }
                if ("fillBuyQuantity" in data && data.fillBuyQuantity != undefined) {
                    this.fillBuyQuantity = data.fillBuyQuantity;
                }
            }
        }
        get makerOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set makerOrderId(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get takerOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set takerOrderId(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get fillSellQuantity() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set fillSellQuantity(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get fillBuyQuantity() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set fillBuyQuantity(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            makerOrderId?: Uint8Array;
            takerOrderId?: Uint8Array;
            fillSellQuantity?: number;
            fillBuyQuantity?: number;
        }): MarketOrderDetail {
            const message = new MarketOrderDetail({});
            if (data.makerOrderId != null) {
                message.makerOrderId = data.makerOrderId;
            }
            if (data.takerOrderId != null) {
                message.takerOrderId = data.takerOrderId;
            }
            if (data.fillSellQuantity != null) {
                message.fillSellQuantity = data.fillSellQuantity;
            }
            if (data.fillBuyQuantity != null) {
                message.fillBuyQuantity = data.fillBuyQuantity;
            }
            return message;
        }
        toObject() {
            const data: {
                makerOrderId?: Uint8Array;
                takerOrderId?: Uint8Array;
                fillSellQuantity?: number;
                fillBuyQuantity?: number;
            } = {};
            if (this.makerOrderId != null) {
                data.makerOrderId = this.makerOrderId;
            }
            if (this.takerOrderId != null) {
                data.takerOrderId = this.takerOrderId;
            }
            if (this.fillSellQuantity != null) {
                data.fillSellQuantity = this.fillSellQuantity;
            }
            if (this.fillBuyQuantity != null) {
                data.fillBuyQuantity = this.fillBuyQuantity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.makerOrderId.length)
                writer.writeBytes(1, this.makerOrderId);
            if (this.takerOrderId.length)
                writer.writeBytes(2, this.takerOrderId);
            if (this.fillSellQuantity != 0)
                writer.writeInt64(3, this.fillSellQuantity);
            if (this.fillBuyQuantity != 0)
                writer.writeInt64(4, this.fillBuyQuantity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketOrderDetail {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketOrderDetail();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.makerOrderId = reader.readBytes();
                        break;
                    case 2:
                        message.takerOrderId = reader.readBytes();
                        break;
                    case 3:
                        message.fillSellQuantity = reader.readInt64();
                        break;
                    case 4:
                        message.fillBuyQuantity = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketOrderDetail {
            return MarketOrderDetail.deserialize(bytes);
        }
    }
    export class Transaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            raw_data?: Transaction.raw;
            signature?: Uint8Array[];
            ret?: Transaction.Result[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("raw_data" in data && data.raw_data != undefined) {
                    this.raw_data = data.raw_data;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("ret" in data && data.ret != undefined) {
                    this.ret = data.ret;
                }
            }
        }
        get raw_data() {
            return pb_1.Message.getWrapperField(this, Transaction.raw, 1) as Transaction.raw;
        }
        set raw_data(value: Transaction.raw) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_raw_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set signature(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get ret() {
            return pb_1.Message.getRepeatedWrapperField(this, Transaction.Result, 5) as Transaction.Result[];
        }
        set ret(value: Transaction.Result[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            raw_data?: ReturnType<typeof Transaction.raw.prototype.toObject>;
            signature?: Uint8Array[];
            ret?: ReturnType<typeof Transaction.Result.prototype.toObject>[];
        }): Transaction {
            const message = new Transaction({});
            if (data.raw_data != null) {
                message.raw_data = Transaction.raw.fromObject(data.raw_data);
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.ret != null) {
                message.ret = data.ret.map(item => Transaction.Result.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                raw_data?: ReturnType<typeof Transaction.raw.prototype.toObject>;
                signature?: Uint8Array[];
                ret?: ReturnType<typeof Transaction.Result.prototype.toObject>[];
            } = {};
            if (this.raw_data != null) {
                data.raw_data = this.raw_data.toObject();
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.ret != null) {
                data.ret = this.ret.map((item: Transaction.Result) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_raw_data)
                writer.writeMessage(1, this.raw_data, () => this.raw_data.serialize(writer));
            if (this.signature.length)
                writer.writeRepeatedBytes(2, this.signature);
            if (this.ret.length)
                writer.writeRepeatedMessage(5, this.ret, (item: Transaction.Result) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.raw_data, () => message.raw_data = Transaction.raw.deserialize(reader));
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 5:
                        reader.readMessage(message.ret, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Transaction.Result.deserialize(reader), Transaction.Result));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transaction {
            return Transaction.deserialize(bytes);
        }
    }
    export namespace Transaction {
        export class Contract extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                type?: Transaction.Contract.ContractType;
                parameter?: Any;
                provider?: Uint8Array;
                ContractName?: Uint8Array;
                Permission_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("parameter" in data && data.parameter != undefined) {
                        this.parameter = data.parameter;
                    }
                    if ("provider" in data && data.provider != undefined) {
                        this.provider = data.provider;
                    }
                    if ("ContractName" in data && data.ContractName != undefined) {
                        this.ContractName = data.ContractName;
                    }
                    if ("Permission_id" in data && data.Permission_id != undefined) {
                        this.Permission_id = data.Permission_id;
                    }
                }
            }
            get type() {
                return pb_1.Message.getFieldWithDefault(this, 1, Transaction.Contract.ContractType.AccountCreateContract) as Transaction.Contract.ContractType;
            }
            set type(value: Transaction.Contract.ContractType) {
                pb_1.Message.setField(this, 1, value);
            }
            get parameter() {
                return pb_1.Message.getWrapperField(this, Any, 2) as Any;
            }
            set parameter(value: Any) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_parameter() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get provider() {
                return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
            }
            set provider(value: Uint8Array) {
                pb_1.Message.setField(this, 3, value);
            }
            get ContractName() {
                return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
            }
            set ContractName(value: Uint8Array) {
                pb_1.Message.setField(this, 4, value);
            }
            get Permission_id() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set Permission_id(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                type?: Transaction.Contract.ContractType;
                parameter?: ReturnType<typeof Any.prototype.toObject>;
                provider?: Uint8Array;
                ContractName?: Uint8Array;
                Permission_id?: number;
            }): Contract {
                const message = new Contract({});
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.parameter != null) {
                    message.parameter = Any.fromObject(data.parameter);
                }
                if (data.provider != null) {
                    message.provider = data.provider;
                }
                if (data.ContractName != null) {
                    message.ContractName = data.ContractName;
                }
                if (data.Permission_id != null) {
                    message.Permission_id = data.Permission_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    type?: Transaction.Contract.ContractType;
                    parameter?: ReturnType<typeof Any.prototype.toObject>;
                    provider?: Uint8Array;
                    ContractName?: Uint8Array;
                    Permission_id?: number;
                } = {};
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.parameter != null) {
                    data.parameter = this.parameter.toObject();
                }
                if (this.provider != null) {
                    data.provider = this.provider;
                }
                if (this.ContractName != null) {
                    data.ContractName = this.ContractName;
                }
                if (this.Permission_id != null) {
                    data.Permission_id = this.Permission_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.type != Transaction.Contract.ContractType.AccountCreateContract)
                    writer.writeEnum(1, this.type);
                if (this.has_parameter)
                    writer.writeMessage(2, this.parameter, () => this.parameter.serialize(writer));
                if (this.provider.length)
                    writer.writeBytes(3, this.provider);
                if (this.ContractName.length)
                    writer.writeBytes(4, this.ContractName);
                if (this.Permission_id != 0)
                    writer.writeInt32(5, this.Permission_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Contract {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Contract();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.type = reader.readEnum();
                            break;
                        case 2:
                            reader.readMessage(message.parameter, () => message.parameter = Any.deserialize(reader));
                            break;
                        case 3:
                            message.provider = reader.readBytes();
                            break;
                        case 4:
                            message.ContractName = reader.readBytes();
                            break;
                        case 5:
                            message.Permission_id = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Contract {
                return Contract.deserialize(bytes);
            }
        }
        export namespace Contract {
            export enum ContractType {
                AccountCreateContract = 0,
                TransferContract = 1,
                TransferAssetContract = 2,
                VoteAssetContract = 3,
                VoteWitnessContract = 4,
                WitnessCreateContract = 5,
                AssetIssueContract = 6,
                WitnessUpdateContract = 8,
                ParticipateAssetIssueContract = 9,
                AccountUpdateContract = 10,
                FreezeBalanceContract = 11,
                UnfreezeBalanceContract = 12,
                WithdrawBalanceContract = 13,
                UnfreezeAssetContract = 14,
                UpdateAssetContract = 15,
                ProposalCreateContract = 16,
                ProposalApproveContract = 17,
                ProposalDeleteContract = 18,
                SetAccountIdContract = 19,
                CustomContract = 20,
                CreateSmartContract = 30,
                TriggerSmartContract = 31,
                GetContract = 32,
                UpdateSettingContract = 33,
                ExchangeCreateContract = 41,
                ExchangeInjectContract = 42,
                ExchangeWithdrawContract = 43,
                ExchangeTransactionContract = 44,
                UpdateEnergyLimitContract = 45,
                AccountPermissionUpdateContract = 46,
                ClearABIContract = 48,
                UpdateBrokerageContract = 49,
                ShieldedTransferContract = 51,
                MarketSellAssetContract = 52,
                MarketCancelOrderContract = 53,
                FreezeBalanceV2Contract = 54,
                UnfreezeBalanceV2Contract = 55,
                WithdrawExpireUnfreezeContract = 56,
                DelegateResourceContract = 57,
                UnDelegateResourceContract = 58,
                CancelAllUnfreezeV2Contract = 59
            }
        }
        export class Result extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                fee?: number;
                ret?: Transaction.Result.code;
                contractRet?: Transaction.Result.contractResult;
                assetIssueID?: string;
                withdraw_amount?: number;
                unfreeze_amount?: number;
                exchange_received_amount?: number;
                exchange_inject_another_amount?: number;
                exchange_withdraw_another_amount?: number;
                exchange_id?: number;
                shielded_transaction_fee?: number;
                orderId?: Uint8Array;
                orderDetails?: MarketOrderDetail[];
                withdraw_expire_amount?: number;
                cancel_unfreezeV2_amount?: Map<string, number>;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [26], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("fee" in data && data.fee != undefined) {
                        this.fee = data.fee;
                    }
                    if ("ret" in data && data.ret != undefined) {
                        this.ret = data.ret;
                    }
                    if ("contractRet" in data && data.contractRet != undefined) {
                        this.contractRet = data.contractRet;
                    }
                    if ("assetIssueID" in data && data.assetIssueID != undefined) {
                        this.assetIssueID = data.assetIssueID;
                    }
                    if ("withdraw_amount" in data && data.withdraw_amount != undefined) {
                        this.withdraw_amount = data.withdraw_amount;
                    }
                    if ("unfreeze_amount" in data && data.unfreeze_amount != undefined) {
                        this.unfreeze_amount = data.unfreeze_amount;
                    }
                    if ("exchange_received_amount" in data && data.exchange_received_amount != undefined) {
                        this.exchange_received_amount = data.exchange_received_amount;
                    }
                    if ("exchange_inject_another_amount" in data && data.exchange_inject_another_amount != undefined) {
                        this.exchange_inject_another_amount = data.exchange_inject_another_amount;
                    }
                    if ("exchange_withdraw_another_amount" in data && data.exchange_withdraw_another_amount != undefined) {
                        this.exchange_withdraw_another_amount = data.exchange_withdraw_another_amount;
                    }
                    if ("exchange_id" in data && data.exchange_id != undefined) {
                        this.exchange_id = data.exchange_id;
                    }
                    if ("shielded_transaction_fee" in data && data.shielded_transaction_fee != undefined) {
                        this.shielded_transaction_fee = data.shielded_transaction_fee;
                    }
                    if ("orderId" in data && data.orderId != undefined) {
                        this.orderId = data.orderId;
                    }
                    if ("orderDetails" in data && data.orderDetails != undefined) {
                        this.orderDetails = data.orderDetails;
                    }
                    if ("withdraw_expire_amount" in data && data.withdraw_expire_amount != undefined) {
                        this.withdraw_expire_amount = data.withdraw_expire_amount;
                    }
                    if ("cancel_unfreezeV2_amount" in data && data.cancel_unfreezeV2_amount != undefined) {
                        this.cancel_unfreezeV2_amount = data.cancel_unfreezeV2_amount;
                    }
                }
                if (!this.cancel_unfreezeV2_amount)
                    this.cancel_unfreezeV2_amount = new Map();
            }
            get fee() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set fee(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get ret() {
                return pb_1.Message.getFieldWithDefault(this, 2, Transaction.Result.code.SUCESS) as Transaction.Result.code;
            }
            set ret(value: Transaction.Result.code) {
                pb_1.Message.setField(this, 2, value);
            }
            get contractRet() {
                return pb_1.Message.getFieldWithDefault(this, 3, Transaction.Result.contractResult.DEFAULT) as Transaction.Result.contractResult;
            }
            set contractRet(value: Transaction.Result.contractResult) {
                pb_1.Message.setField(this, 3, value);
            }
            get assetIssueID() {
                return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
            }
            set assetIssueID(value: string) {
                pb_1.Message.setField(this, 14, value);
            }
            get withdraw_amount() {
                return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
            }
            set withdraw_amount(value: number) {
                pb_1.Message.setField(this, 15, value);
            }
            get unfreeze_amount() {
                return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
            }
            set unfreeze_amount(value: number) {
                pb_1.Message.setField(this, 16, value);
            }
            get exchange_received_amount() {
                return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
            }
            set exchange_received_amount(value: number) {
                pb_1.Message.setField(this, 18, value);
            }
            get exchange_inject_another_amount() {
                return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
            }
            set exchange_inject_another_amount(value: number) {
                pb_1.Message.setField(this, 19, value);
            }
            get exchange_withdraw_another_amount() {
                return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
            }
            set exchange_withdraw_another_amount(value: number) {
                pb_1.Message.setField(this, 20, value);
            }
            get exchange_id() {
                return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
            }
            set exchange_id(value: number) {
                pb_1.Message.setField(this, 21, value);
            }
            get shielded_transaction_fee() {
                return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
            }
            set shielded_transaction_fee(value: number) {
                pb_1.Message.setField(this, 22, value);
            }
            get orderId() {
                return pb_1.Message.getFieldWithDefault(this, 25, new Uint8Array(0)) as Uint8Array;
            }
            set orderId(value: Uint8Array) {
                pb_1.Message.setField(this, 25, value);
            }
            get orderDetails() {
                return pb_1.Message.getRepeatedWrapperField(this, MarketOrderDetail, 26) as MarketOrderDetail[];
            }
            set orderDetails(value: MarketOrderDetail[]) {
                pb_1.Message.setRepeatedWrapperField(this, 26, value);
            }
            get withdraw_expire_amount() {
                return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
            }
            set withdraw_expire_amount(value: number) {
                pb_1.Message.setField(this, 27, value);
            }
            get cancel_unfreezeV2_amount() {
                return pb_1.Message.getField(this, 28) as any as Map<string, number>;
            }
            set cancel_unfreezeV2_amount(value: Map<string, number>) {
                pb_1.Message.setField(this, 28, value as any);
            }
            static fromObject(data: {
                fee?: number;
                ret?: Transaction.Result.code;
                contractRet?: Transaction.Result.contractResult;
                assetIssueID?: string;
                withdraw_amount?: number;
                unfreeze_amount?: number;
                exchange_received_amount?: number;
                exchange_inject_another_amount?: number;
                exchange_withdraw_another_amount?: number;
                exchange_id?: number;
                shielded_transaction_fee?: number;
                orderId?: Uint8Array;
                orderDetails?: ReturnType<typeof MarketOrderDetail.prototype.toObject>[];
                withdraw_expire_amount?: number;
                cancel_unfreezeV2_amount?: {
                    [key: string]: number;
                };
            }): Result {
                const message = new Result({});
                if (data.fee != null) {
                    message.fee = data.fee;
                }
                if (data.ret != null) {
                    message.ret = data.ret;
                }
                if (data.contractRet != null) {
                    message.contractRet = data.contractRet;
                }
                if (data.assetIssueID != null) {
                    message.assetIssueID = data.assetIssueID;
                }
                if (data.withdraw_amount != null) {
                    message.withdraw_amount = data.withdraw_amount;
                }
                if (data.unfreeze_amount != null) {
                    message.unfreeze_amount = data.unfreeze_amount;
                }
                if (data.exchange_received_amount != null) {
                    message.exchange_received_amount = data.exchange_received_amount;
                }
                if (data.exchange_inject_another_amount != null) {
                    message.exchange_inject_another_amount = data.exchange_inject_another_amount;
                }
                if (data.exchange_withdraw_another_amount != null) {
                    message.exchange_withdraw_another_amount = data.exchange_withdraw_another_amount;
                }
                if (data.exchange_id != null) {
                    message.exchange_id = data.exchange_id;
                }
                if (data.shielded_transaction_fee != null) {
                    message.shielded_transaction_fee = data.shielded_transaction_fee;
                }
                if (data.orderId != null) {
                    message.orderId = data.orderId;
                }
                if (data.orderDetails != null) {
                    message.orderDetails = data.orderDetails.map(item => MarketOrderDetail.fromObject(item));
                }
                if (data.withdraw_expire_amount != null) {
                    message.withdraw_expire_amount = data.withdraw_expire_amount;
                }
                if (typeof data.cancel_unfreezeV2_amount == "object") {
                    message.cancel_unfreezeV2_amount = new Map(Object.entries(data.cancel_unfreezeV2_amount));
                }
                return message;
            }
            toObject() {
                const data: {
                    fee?: number;
                    ret?: Transaction.Result.code;
                    contractRet?: Transaction.Result.contractResult;
                    assetIssueID?: string;
                    withdraw_amount?: number;
                    unfreeze_amount?: number;
                    exchange_received_amount?: number;
                    exchange_inject_another_amount?: number;
                    exchange_withdraw_another_amount?: number;
                    exchange_id?: number;
                    shielded_transaction_fee?: number;
                    orderId?: Uint8Array;
                    orderDetails?: ReturnType<typeof MarketOrderDetail.prototype.toObject>[];
                    withdraw_expire_amount?: number;
                    cancel_unfreezeV2_amount?: {
                        [key: string]: number;
                    };
                } = {};
                if (this.fee != null) {
                    data.fee = this.fee;
                }
                if (this.ret != null) {
                    data.ret = this.ret;
                }
                if (this.contractRet != null) {
                    data.contractRet = this.contractRet;
                }
                if (this.assetIssueID != null) {
                    data.assetIssueID = this.assetIssueID;
                }
                if (this.withdraw_amount != null) {
                    data.withdraw_amount = this.withdraw_amount;
                }
                if (this.unfreeze_amount != null) {
                    data.unfreeze_amount = this.unfreeze_amount;
                }
                if (this.exchange_received_amount != null) {
                    data.exchange_received_amount = this.exchange_received_amount;
                }
                if (this.exchange_inject_another_amount != null) {
                    data.exchange_inject_another_amount = this.exchange_inject_another_amount;
                }
                if (this.exchange_withdraw_another_amount != null) {
                    data.exchange_withdraw_another_amount = this.exchange_withdraw_another_amount;
                }
                if (this.exchange_id != null) {
                    data.exchange_id = this.exchange_id;
                }
                if (this.shielded_transaction_fee != null) {
                    data.shielded_transaction_fee = this.shielded_transaction_fee;
                }
                if (this.orderId != null) {
                    data.orderId = this.orderId;
                }
                if (this.orderDetails != null) {
                    data.orderDetails = this.orderDetails.map((item: MarketOrderDetail) => item.toObject());
                }
                if (this.withdraw_expire_amount != null) {
                    data.withdraw_expire_amount = this.withdraw_expire_amount;
                }
                if (this.cancel_unfreezeV2_amount != null) {
                    data.cancel_unfreezeV2_amount = (Object.fromEntries)(this.cancel_unfreezeV2_amount);
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.fee != 0)
                    writer.writeInt64(1, this.fee);
                if (this.ret != Transaction.Result.code.SUCESS)
                    writer.writeEnum(2, this.ret);
                if (this.contractRet != Transaction.Result.contractResult.DEFAULT)
                    writer.writeEnum(3, this.contractRet);
                if (this.assetIssueID.length)
                    writer.writeString(14, this.assetIssueID);
                if (this.withdraw_amount != 0)
                    writer.writeInt64(15, this.withdraw_amount);
                if (this.unfreeze_amount != 0)
                    writer.writeInt64(16, this.unfreeze_amount);
                if (this.exchange_received_amount != 0)
                    writer.writeInt64(18, this.exchange_received_amount);
                if (this.exchange_inject_another_amount != 0)
                    writer.writeInt64(19, this.exchange_inject_another_amount);
                if (this.exchange_withdraw_another_amount != 0)
                    writer.writeInt64(20, this.exchange_withdraw_another_amount);
                if (this.exchange_id != 0)
                    writer.writeInt64(21, this.exchange_id);
                if (this.shielded_transaction_fee != 0)
                    writer.writeInt64(22, this.shielded_transaction_fee);
                if (this.orderId.length)
                    writer.writeBytes(25, this.orderId);
                if (this.orderDetails.length)
                    writer.writeRepeatedMessage(26, this.orderDetails, (item: MarketOrderDetail) => item.serialize(writer));
                if (this.withdraw_expire_amount != 0)
                    writer.writeInt64(27, this.withdraw_expire_amount);
                for (const [key, value] of this.cancel_unfreezeV2_amount) {
                    writer.writeMessage(28, this.cancel_unfreezeV2_amount, () => {
                        writer.writeString(1, key);
                        writer.writeInt64(2, value);
                    });
                }
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Result {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Result();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.fee = reader.readInt64();
                            break;
                        case 2:
                            message.ret = reader.readEnum();
                            break;
                        case 3:
                            message.contractRet = reader.readEnum();
                            break;
                        case 14:
                            message.assetIssueID = reader.readString();
                            break;
                        case 15:
                            message.withdraw_amount = reader.readInt64();
                            break;
                        case 16:
                            message.unfreeze_amount = reader.readInt64();
                            break;
                        case 18:
                            message.exchange_received_amount = reader.readInt64();
                            break;
                        case 19:
                            message.exchange_inject_another_amount = reader.readInt64();
                            break;
                        case 20:
                            message.exchange_withdraw_another_amount = reader.readInt64();
                            break;
                        case 21:
                            message.exchange_id = reader.readInt64();
                            break;
                        case 22:
                            message.shielded_transaction_fee = reader.readInt64();
                            break;
                        case 25:
                            message.orderId = reader.readBytes();
                            break;
                        case 26:
                            reader.readMessage(message.orderDetails, () => pb_1.Message.addToRepeatedWrapperField(message, 26, MarketOrderDetail.deserialize(reader), MarketOrderDetail));
                            break;
                        case 27:
                            message.withdraw_expire_amount = reader.readInt64();
                            break;
                        case 28:
                            reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.cancel_unfreezeV2_amount as any, reader, reader.readString, reader.readInt64));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Result {
                return Result.deserialize(bytes);
            }
        }
        export namespace Result {
            export enum code {
                SUCESS = 0,
                FAILED = 1
            }
            export enum contractResult {
                DEFAULT = 0,
                SUCCESS = 1,
                REVERT = 2,
                BAD_JUMP_DESTINATION = 3,
                OUT_OF_MEMORY = 4,
                PRECOMPILED_CONTRACT = 5,
                STACK_TOO_SMALL = 6,
                STACK_TOO_LARGE = 7,
                ILLEGAL_OPERATION = 8,
                STACK_OVERFLOW = 9,
                OUT_OF_ENERGY = 10,
                OUT_OF_TIME = 11,
                JVM_STACK_OVER_FLOW = 12,
                UNKNOWN = 13,
                TRANSFER_FAILED = 14,
                INVALID_CODE = 15
            }
        }
        export class raw extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                ref_block_bytes?: Uint8Array;
                ref_block_num?: number;
                ref_block_hash?: Uint8Array;
                expiration?: number;
                auths?: authority[];
                data?: Uint8Array;
                contract?: Transaction.Contract[];
                scripts?: Uint8Array;
                timestamp?: number;
                fee_limit?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 11], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("ref_block_bytes" in data && data.ref_block_bytes != undefined) {
                        this.ref_block_bytes = data.ref_block_bytes;
                    }
                    if ("ref_block_num" in data && data.ref_block_num != undefined) {
                        this.ref_block_num = data.ref_block_num;
                    }
                    if ("ref_block_hash" in data && data.ref_block_hash != undefined) {
                        this.ref_block_hash = data.ref_block_hash;
                    }
                    if ("expiration" in data && data.expiration != undefined) {
                        this.expiration = data.expiration;
                    }
                    if ("auths" in data && data.auths != undefined) {
                        this.auths = data.auths;
                    }
                    if ("data" in data && data.data != undefined) {
                        this.data = data.data;
                    }
                    if ("contract" in data && data.contract != undefined) {
                        this.contract = data.contract;
                    }
                    if ("scripts" in data && data.scripts != undefined) {
                        this.scripts = data.scripts;
                    }
                    if ("timestamp" in data && data.timestamp != undefined) {
                        this.timestamp = data.timestamp;
                    }
                    if ("fee_limit" in data && data.fee_limit != undefined) {
                        this.fee_limit = data.fee_limit;
                    }
                }
            }
            get ref_block_bytes() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set ref_block_bytes(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get ref_block_num() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set ref_block_num(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get ref_block_hash() {
                return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
            }
            set ref_block_hash(value: Uint8Array) {
                pb_1.Message.setField(this, 4, value);
            }
            get expiration() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set expiration(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get auths() {
                return pb_1.Message.getRepeatedWrapperField(this, authority, 9) as authority[];
            }
            set auths(value: authority[]) {
                pb_1.Message.setRepeatedWrapperField(this, 9, value);
            }
            get data() {
                return pb_1.Message.getFieldWithDefault(this, 10, new Uint8Array(0)) as Uint8Array;
            }
            set data(value: Uint8Array) {
                pb_1.Message.setField(this, 10, value);
            }
            get contract() {
                return pb_1.Message.getRepeatedWrapperField(this, Transaction.Contract, 11) as Transaction.Contract[];
            }
            set contract(value: Transaction.Contract[]) {
                pb_1.Message.setRepeatedWrapperField(this, 11, value);
            }
            get scripts() {
                return pb_1.Message.getFieldWithDefault(this, 12, new Uint8Array(0)) as Uint8Array;
            }
            set scripts(value: Uint8Array) {
                pb_1.Message.setField(this, 12, value);
            }
            get timestamp() {
                return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
            }
            set timestamp(value: number) {
                pb_1.Message.setField(this, 14, value);
            }
            get fee_limit() {
                return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
            }
            set fee_limit(value: number) {
                pb_1.Message.setField(this, 18, value);
            }
            static fromObject(data: {
                ref_block_bytes?: Uint8Array;
                ref_block_num?: number;
                ref_block_hash?: Uint8Array;
                expiration?: number;
                auths?: ReturnType<typeof authority.prototype.toObject>[];
                data?: Uint8Array;
                contract?: ReturnType<typeof Transaction.Contract.prototype.toObject>[];
                scripts?: Uint8Array;
                timestamp?: number;
                fee_limit?: number;
            }): raw {
                const message = new raw({});
                if (data.ref_block_bytes != null) {
                    message.ref_block_bytes = data.ref_block_bytes;
                }
                if (data.ref_block_num != null) {
                    message.ref_block_num = data.ref_block_num;
                }
                if (data.ref_block_hash != null) {
                    message.ref_block_hash = data.ref_block_hash;
                }
                if (data.expiration != null) {
                    message.expiration = data.expiration;
                }
                if (data.auths != null) {
                    message.auths = data.auths.map(item => authority.fromObject(item));
                }
                if (data.data != null) {
                    message.data = data.data;
                }
                if (data.contract != null) {
                    message.contract = data.contract.map(item => Transaction.Contract.fromObject(item));
                }
                if (data.scripts != null) {
                    message.scripts = data.scripts;
                }
                if (data.timestamp != null) {
                    message.timestamp = data.timestamp;
                }
                if (data.fee_limit != null) {
                    message.fee_limit = data.fee_limit;
                }
                return message;
            }
            toObject() {
                const data: {
                    ref_block_bytes?: Uint8Array;
                    ref_block_num?: number;
                    ref_block_hash?: Uint8Array;
                    expiration?: number;
                    auths?: ReturnType<typeof authority.prototype.toObject>[];
                    data?: Uint8Array;
                    contract?: ReturnType<typeof Transaction.Contract.prototype.toObject>[];
                    scripts?: Uint8Array;
                    timestamp?: number;
                    fee_limit?: number;
                } = {};
                if (this.ref_block_bytes != null) {
                    data.ref_block_bytes = this.ref_block_bytes;
                }
                if (this.ref_block_num != null) {
                    data.ref_block_num = this.ref_block_num;
                }
                if (this.ref_block_hash != null) {
                    data.ref_block_hash = this.ref_block_hash;
                }
                if (this.expiration != null) {
                    data.expiration = this.expiration;
                }
                if (this.auths != null) {
                    data.auths = this.auths.map((item: authority) => item.toObject());
                }
                if (this.data != null) {
                    data.data = this.data;
                }
                if (this.contract != null) {
                    data.contract = this.contract.map((item: Transaction.Contract) => item.toObject());
                }
                if (this.scripts != null) {
                    data.scripts = this.scripts;
                }
                if (this.timestamp != null) {
                    data.timestamp = this.timestamp;
                }
                if (this.fee_limit != null) {
                    data.fee_limit = this.fee_limit;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.ref_block_bytes.length)
                    writer.writeBytes(1, this.ref_block_bytes);
                if (this.ref_block_num != 0)
                    writer.writeInt64(3, this.ref_block_num);
                if (this.ref_block_hash.length)
                    writer.writeBytes(4, this.ref_block_hash);
                if (this.expiration != 0)
                    writer.writeInt64(8, this.expiration);
                if (this.auths.length)
                    writer.writeRepeatedMessage(9, this.auths, (item: authority) => item.serialize(writer));
                if (this.data.length)
                    writer.writeBytes(10, this.data);
                if (this.contract.length)
                    writer.writeRepeatedMessage(11, this.contract, (item: Transaction.Contract) => item.serialize(writer));
                if (this.scripts.length)
                    writer.writeBytes(12, this.scripts);
                if (this.timestamp != 0)
                    writer.writeInt64(14, this.timestamp);
                if (this.fee_limit != 0)
                    writer.writeInt64(18, this.fee_limit);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): raw {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new raw();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.ref_block_bytes = reader.readBytes();
                            break;
                        case 3:
                            message.ref_block_num = reader.readInt64();
                            break;
                        case 4:
                            message.ref_block_hash = reader.readBytes();
                            break;
                        case 8:
                            message.expiration = reader.readInt64();
                            break;
                        case 9:
                            reader.readMessage(message.auths, () => pb_1.Message.addToRepeatedWrapperField(message, 9, authority.deserialize(reader), authority));
                            break;
                        case 10:
                            message.data = reader.readBytes();
                            break;
                        case 11:
                            reader.readMessage(message.contract, () => pb_1.Message.addToRepeatedWrapperField(message, 11, Transaction.Contract.deserialize(reader), Transaction.Contract));
                            break;
                        case 12:
                            message.scripts = reader.readBytes();
                            break;
                        case 14:
                            message.timestamp = reader.readInt64();
                            break;
                        case 18:
                            message.fee_limit = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): raw {
                return raw.deserialize(bytes);
            }
        }
    }
    export class TransactionInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: Uint8Array;
            fee?: number;
            blockNumber?: number;
            blockTimeStamp?: number;
            contractResult?: Uint8Array[];
            contract_address?: Uint8Array;
            receipt?: ResourceReceipt;
            log?: TransactionInfo.Log[];
            result?: TransactionInfo.code;
            resMessage?: Uint8Array;
            assetIssueID?: string;
            withdraw_amount?: number;
            unfreeze_amount?: number;
            internal_transactions?: InternalTransaction[];
            exchange_received_amount?: number;
            exchange_inject_another_amount?: number;
            exchange_withdraw_another_amount?: number;
            exchange_id?: number;
            shielded_transaction_fee?: number;
            orderId?: Uint8Array;
            orderDetails?: MarketOrderDetail[];
            packingFee?: number;
            withdraw_expire_amount?: number;
            cancel_unfreezeV2_amount?: Map<string, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 8, 17, 26], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("fee" in data && data.fee != undefined) {
                    this.fee = data.fee;
                }
                if ("blockNumber" in data && data.blockNumber != undefined) {
                    this.blockNumber = data.blockNumber;
                }
                if ("blockTimeStamp" in data && data.blockTimeStamp != undefined) {
                    this.blockTimeStamp = data.blockTimeStamp;
                }
                if ("contractResult" in data && data.contractResult != undefined) {
                    this.contractResult = data.contractResult;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("receipt" in data && data.receipt != undefined) {
                    this.receipt = data.receipt;
                }
                if ("log" in data && data.log != undefined) {
                    this.log = data.log;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("resMessage" in data && data.resMessage != undefined) {
                    this.resMessage = data.resMessage;
                }
                if ("assetIssueID" in data && data.assetIssueID != undefined) {
                    this.assetIssueID = data.assetIssueID;
                }
                if ("withdraw_amount" in data && data.withdraw_amount != undefined) {
                    this.withdraw_amount = data.withdraw_amount;
                }
                if ("unfreeze_amount" in data && data.unfreeze_amount != undefined) {
                    this.unfreeze_amount = data.unfreeze_amount;
                }
                if ("internal_transactions" in data && data.internal_transactions != undefined) {
                    this.internal_transactions = data.internal_transactions;
                }
                if ("exchange_received_amount" in data && data.exchange_received_amount != undefined) {
                    this.exchange_received_amount = data.exchange_received_amount;
                }
                if ("exchange_inject_another_amount" in data && data.exchange_inject_another_amount != undefined) {
                    this.exchange_inject_another_amount = data.exchange_inject_another_amount;
                }
                if ("exchange_withdraw_another_amount" in data && data.exchange_withdraw_another_amount != undefined) {
                    this.exchange_withdraw_another_amount = data.exchange_withdraw_another_amount;
                }
                if ("exchange_id" in data && data.exchange_id != undefined) {
                    this.exchange_id = data.exchange_id;
                }
                if ("shielded_transaction_fee" in data && data.shielded_transaction_fee != undefined) {
                    this.shielded_transaction_fee = data.shielded_transaction_fee;
                }
                if ("orderId" in data && data.orderId != undefined) {
                    this.orderId = data.orderId;
                }
                if ("orderDetails" in data && data.orderDetails != undefined) {
                    this.orderDetails = data.orderDetails;
                }
                if ("packingFee" in data && data.packingFee != undefined) {
                    this.packingFee = data.packingFee;
                }
                if ("withdraw_expire_amount" in data && data.withdraw_expire_amount != undefined) {
                    this.withdraw_expire_amount = data.withdraw_expire_amount;
                }
                if ("cancel_unfreezeV2_amount" in data && data.cancel_unfreezeV2_amount != undefined) {
                    this.cancel_unfreezeV2_amount = data.cancel_unfreezeV2_amount;
                }
            }
            if (!this.cancel_unfreezeV2_amount)
                this.cancel_unfreezeV2_amount = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get fee() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set fee(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get blockNumber() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set blockNumber(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get blockTimeStamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set blockTimeStamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get contractResult() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as Uint8Array[];
        }
        set contractResult(value: Uint8Array[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set contract_address(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get receipt() {
            return pb_1.Message.getWrapperField(this, ResourceReceipt, 7) as ResourceReceipt;
        }
        set receipt(value: ResourceReceipt) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_receipt() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get log() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionInfo.Log, 8) as TransactionInfo.Log[];
        }
        set log(value: TransactionInfo.Log[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 9, TransactionInfo.code.SUCESS) as TransactionInfo.code;
        }
        set result(value: TransactionInfo.code) {
            pb_1.Message.setField(this, 9, value);
        }
        get resMessage() {
            return pb_1.Message.getFieldWithDefault(this, 10, new Uint8Array(0)) as Uint8Array;
        }
        set resMessage(value: Uint8Array) {
            pb_1.Message.setField(this, 10, value);
        }
        get assetIssueID() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set assetIssueID(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get withdraw_amount() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set withdraw_amount(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get unfreeze_amount() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set unfreeze_amount(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get internal_transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, InternalTransaction, 17) as InternalTransaction[];
        }
        set internal_transactions(value: InternalTransaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 17, value);
        }
        get exchange_received_amount() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set exchange_received_amount(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get exchange_inject_another_amount() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set exchange_inject_another_amount(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get exchange_withdraw_another_amount() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set exchange_withdraw_another_amount(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get exchange_id() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set exchange_id(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get shielded_transaction_fee() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set shielded_transaction_fee(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get orderId() {
            return pb_1.Message.getFieldWithDefault(this, 25, new Uint8Array(0)) as Uint8Array;
        }
        set orderId(value: Uint8Array) {
            pb_1.Message.setField(this, 25, value);
        }
        get orderDetails() {
            return pb_1.Message.getRepeatedWrapperField(this, MarketOrderDetail, 26) as MarketOrderDetail[];
        }
        set orderDetails(value: MarketOrderDetail[]) {
            pb_1.Message.setRepeatedWrapperField(this, 26, value);
        }
        get packingFee() {
            return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
        }
        set packingFee(value: number) {
            pb_1.Message.setField(this, 27, value);
        }
        get withdraw_expire_amount() {
            return pb_1.Message.getFieldWithDefault(this, 28, 0) as number;
        }
        set withdraw_expire_amount(value: number) {
            pb_1.Message.setField(this, 28, value);
        }
        get cancel_unfreezeV2_amount() {
            return pb_1.Message.getField(this, 29) as any as Map<string, number>;
        }
        set cancel_unfreezeV2_amount(value: Map<string, number>) {
            pb_1.Message.setField(this, 29, value as any);
        }
        static fromObject(data: {
            id?: Uint8Array;
            fee?: number;
            blockNumber?: number;
            blockTimeStamp?: number;
            contractResult?: Uint8Array[];
            contract_address?: Uint8Array;
            receipt?: ReturnType<typeof ResourceReceipt.prototype.toObject>;
            log?: ReturnType<typeof TransactionInfo.Log.prototype.toObject>[];
            result?: TransactionInfo.code;
            resMessage?: Uint8Array;
            assetIssueID?: string;
            withdraw_amount?: number;
            unfreeze_amount?: number;
            internal_transactions?: ReturnType<typeof InternalTransaction.prototype.toObject>[];
            exchange_received_amount?: number;
            exchange_inject_another_amount?: number;
            exchange_withdraw_another_amount?: number;
            exchange_id?: number;
            shielded_transaction_fee?: number;
            orderId?: Uint8Array;
            orderDetails?: ReturnType<typeof MarketOrderDetail.prototype.toObject>[];
            packingFee?: number;
            withdraw_expire_amount?: number;
            cancel_unfreezeV2_amount?: {
                [key: string]: number;
            };
        }): TransactionInfo {
            const message = new TransactionInfo({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.fee != null) {
                message.fee = data.fee;
            }
            if (data.blockNumber != null) {
                message.blockNumber = data.blockNumber;
            }
            if (data.blockTimeStamp != null) {
                message.blockTimeStamp = data.blockTimeStamp;
            }
            if (data.contractResult != null) {
                message.contractResult = data.contractResult;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.receipt != null) {
                message.receipt = ResourceReceipt.fromObject(data.receipt);
            }
            if (data.log != null) {
                message.log = data.log.map(item => TransactionInfo.Log.fromObject(item));
            }
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.resMessage != null) {
                message.resMessage = data.resMessage;
            }
            if (data.assetIssueID != null) {
                message.assetIssueID = data.assetIssueID;
            }
            if (data.withdraw_amount != null) {
                message.withdraw_amount = data.withdraw_amount;
            }
            if (data.unfreeze_amount != null) {
                message.unfreeze_amount = data.unfreeze_amount;
            }
            if (data.internal_transactions != null) {
                message.internal_transactions = data.internal_transactions.map(item => InternalTransaction.fromObject(item));
            }
            if (data.exchange_received_amount != null) {
                message.exchange_received_amount = data.exchange_received_amount;
            }
            if (data.exchange_inject_another_amount != null) {
                message.exchange_inject_another_amount = data.exchange_inject_another_amount;
            }
            if (data.exchange_withdraw_another_amount != null) {
                message.exchange_withdraw_another_amount = data.exchange_withdraw_another_amount;
            }
            if (data.exchange_id != null) {
                message.exchange_id = data.exchange_id;
            }
            if (data.shielded_transaction_fee != null) {
                message.shielded_transaction_fee = data.shielded_transaction_fee;
            }
            if (data.orderId != null) {
                message.orderId = data.orderId;
            }
            if (data.orderDetails != null) {
                message.orderDetails = data.orderDetails.map(item => MarketOrderDetail.fromObject(item));
            }
            if (data.packingFee != null) {
                message.packingFee = data.packingFee;
            }
            if (data.withdraw_expire_amount != null) {
                message.withdraw_expire_amount = data.withdraw_expire_amount;
            }
            if (typeof data.cancel_unfreezeV2_amount == "object") {
                message.cancel_unfreezeV2_amount = new Map(Object.entries(data.cancel_unfreezeV2_amount));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: Uint8Array;
                fee?: number;
                blockNumber?: number;
                blockTimeStamp?: number;
                contractResult?: Uint8Array[];
                contract_address?: Uint8Array;
                receipt?: ReturnType<typeof ResourceReceipt.prototype.toObject>;
                log?: ReturnType<typeof TransactionInfo.Log.prototype.toObject>[];
                result?: TransactionInfo.code;
                resMessage?: Uint8Array;
                assetIssueID?: string;
                withdraw_amount?: number;
                unfreeze_amount?: number;
                internal_transactions?: ReturnType<typeof InternalTransaction.prototype.toObject>[];
                exchange_received_amount?: number;
                exchange_inject_another_amount?: number;
                exchange_withdraw_another_amount?: number;
                exchange_id?: number;
                shielded_transaction_fee?: number;
                orderId?: Uint8Array;
                orderDetails?: ReturnType<typeof MarketOrderDetail.prototype.toObject>[];
                packingFee?: number;
                withdraw_expire_amount?: number;
                cancel_unfreezeV2_amount?: {
                    [key: string]: number;
                };
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.fee != null) {
                data.fee = this.fee;
            }
            if (this.blockNumber != null) {
                data.blockNumber = this.blockNumber;
            }
            if (this.blockTimeStamp != null) {
                data.blockTimeStamp = this.blockTimeStamp;
            }
            if (this.contractResult != null) {
                data.contractResult = this.contractResult;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.receipt != null) {
                data.receipt = this.receipt.toObject();
            }
            if (this.log != null) {
                data.log = this.log.map((item: TransactionInfo.Log) => item.toObject());
            }
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.resMessage != null) {
                data.resMessage = this.resMessage;
            }
            if (this.assetIssueID != null) {
                data.assetIssueID = this.assetIssueID;
            }
            if (this.withdraw_amount != null) {
                data.withdraw_amount = this.withdraw_amount;
            }
            if (this.unfreeze_amount != null) {
                data.unfreeze_amount = this.unfreeze_amount;
            }
            if (this.internal_transactions != null) {
                data.internal_transactions = this.internal_transactions.map((item: InternalTransaction) => item.toObject());
            }
            if (this.exchange_received_amount != null) {
                data.exchange_received_amount = this.exchange_received_amount;
            }
            if (this.exchange_inject_another_amount != null) {
                data.exchange_inject_another_amount = this.exchange_inject_another_amount;
            }
            if (this.exchange_withdraw_another_amount != null) {
                data.exchange_withdraw_another_amount = this.exchange_withdraw_another_amount;
            }
            if (this.exchange_id != null) {
                data.exchange_id = this.exchange_id;
            }
            if (this.shielded_transaction_fee != null) {
                data.shielded_transaction_fee = this.shielded_transaction_fee;
            }
            if (this.orderId != null) {
                data.orderId = this.orderId;
            }
            if (this.orderDetails != null) {
                data.orderDetails = this.orderDetails.map((item: MarketOrderDetail) => item.toObject());
            }
            if (this.packingFee != null) {
                data.packingFee = this.packingFee;
            }
            if (this.withdraw_expire_amount != null) {
                data.withdraw_expire_amount = this.withdraw_expire_amount;
            }
            if (this.cancel_unfreezeV2_amount != null) {
                data.cancel_unfreezeV2_amount = (Object.fromEntries)(this.cancel_unfreezeV2_amount);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeBytes(1, this.id);
            if (this.fee != 0)
                writer.writeInt64(2, this.fee);
            if (this.blockNumber != 0)
                writer.writeInt64(3, this.blockNumber);
            if (this.blockTimeStamp != 0)
                writer.writeInt64(4, this.blockTimeStamp);
            if (this.contractResult.length)
                writer.writeRepeatedBytes(5, this.contractResult);
            if (this.contract_address.length)
                writer.writeBytes(6, this.contract_address);
            if (this.has_receipt)
                writer.writeMessage(7, this.receipt, () => this.receipt.serialize(writer));
            if (this.log.length)
                writer.writeRepeatedMessage(8, this.log, (item: TransactionInfo.Log) => item.serialize(writer));
            if (this.result != TransactionInfo.code.SUCESS)
                writer.writeEnum(9, this.result);
            if (this.resMessage.length)
                writer.writeBytes(10, this.resMessage);
            if (this.assetIssueID.length)
                writer.writeString(14, this.assetIssueID);
            if (this.withdraw_amount != 0)
                writer.writeInt64(15, this.withdraw_amount);
            if (this.unfreeze_amount != 0)
                writer.writeInt64(16, this.unfreeze_amount);
            if (this.internal_transactions.length)
                writer.writeRepeatedMessage(17, this.internal_transactions, (item: InternalTransaction) => item.serialize(writer));
            if (this.exchange_received_amount != 0)
                writer.writeInt64(18, this.exchange_received_amount);
            if (this.exchange_inject_another_amount != 0)
                writer.writeInt64(19, this.exchange_inject_another_amount);
            if (this.exchange_withdraw_another_amount != 0)
                writer.writeInt64(20, this.exchange_withdraw_another_amount);
            if (this.exchange_id != 0)
                writer.writeInt64(21, this.exchange_id);
            if (this.shielded_transaction_fee != 0)
                writer.writeInt64(22, this.shielded_transaction_fee);
            if (this.orderId.length)
                writer.writeBytes(25, this.orderId);
            if (this.orderDetails.length)
                writer.writeRepeatedMessage(26, this.orderDetails, (item: MarketOrderDetail) => item.serialize(writer));
            if (this.packingFee != 0)
                writer.writeInt64(27, this.packingFee);
            if (this.withdraw_expire_amount != 0)
                writer.writeInt64(28, this.withdraw_expire_amount);
            for (const [key, value] of this.cancel_unfreezeV2_amount) {
                writer.writeMessage(29, this.cancel_unfreezeV2_amount, () => {
                    writer.writeString(1, key);
                    writer.writeInt64(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readBytes();
                        break;
                    case 2:
                        message.fee = reader.readInt64();
                        break;
                    case 3:
                        message.blockNumber = reader.readInt64();
                        break;
                    case 4:
                        message.blockTimeStamp = reader.readInt64();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readBytes());
                        break;
                    case 6:
                        message.contract_address = reader.readBytes();
                        break;
                    case 7:
                        reader.readMessage(message.receipt, () => message.receipt = ResourceReceipt.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.log, () => pb_1.Message.addToRepeatedWrapperField(message, 8, TransactionInfo.Log.deserialize(reader), TransactionInfo.Log));
                        break;
                    case 9:
                        message.result = reader.readEnum();
                        break;
                    case 10:
                        message.resMessage = reader.readBytes();
                        break;
                    case 14:
                        message.assetIssueID = reader.readString();
                        break;
                    case 15:
                        message.withdraw_amount = reader.readInt64();
                        break;
                    case 16:
                        message.unfreeze_amount = reader.readInt64();
                        break;
                    case 17:
                        reader.readMessage(message.internal_transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 17, InternalTransaction.deserialize(reader), InternalTransaction));
                        break;
                    case 18:
                        message.exchange_received_amount = reader.readInt64();
                        break;
                    case 19:
                        message.exchange_inject_another_amount = reader.readInt64();
                        break;
                    case 20:
                        message.exchange_withdraw_another_amount = reader.readInt64();
                        break;
                    case 21:
                        message.exchange_id = reader.readInt64();
                        break;
                    case 22:
                        message.shielded_transaction_fee = reader.readInt64();
                        break;
                    case 25:
                        message.orderId = reader.readBytes();
                        break;
                    case 26:
                        reader.readMessage(message.orderDetails, () => pb_1.Message.addToRepeatedWrapperField(message, 26, MarketOrderDetail.deserialize(reader), MarketOrderDetail));
                        break;
                    case 27:
                        message.packingFee = reader.readInt64();
                        break;
                    case 28:
                        message.withdraw_expire_amount = reader.readInt64();
                        break;
                    case 29:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.cancel_unfreezeV2_amount as any, reader, reader.readString, reader.readInt64));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionInfo {
            return TransactionInfo.deserialize(bytes);
        }
    }
    export namespace TransactionInfo {
        export enum code {
            SUCESS = 0,
            FAILED = 1
        }
        export class Log extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                address?: Uint8Array;
                topics?: Uint8Array[];
                data?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("address" in data && data.address != undefined) {
                        this.address = data.address;
                    }
                    if ("topics" in data && data.topics != undefined) {
                        this.topics = data.topics;
                    }
                    if ("data" in data && data.data != undefined) {
                        this.data = data.data;
                    }
                }
            }
            get address() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set address(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get topics() {
                return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
            }
            set topics(value: Uint8Array[]) {
                pb_1.Message.setField(this, 2, value);
            }
            get data() {
                return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
            }
            set data(value: Uint8Array) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                address?: Uint8Array;
                topics?: Uint8Array[];
                data?: Uint8Array;
            }): Log {
                const message = new Log({});
                if (data.address != null) {
                    message.address = data.address;
                }
                if (data.topics != null) {
                    message.topics = data.topics;
                }
                if (data.data != null) {
                    message.data = data.data;
                }
                return message;
            }
            toObject() {
                const data: {
                    address?: Uint8Array;
                    topics?: Uint8Array[];
                    data?: Uint8Array;
                } = {};
                if (this.address != null) {
                    data.address = this.address;
                }
                if (this.topics != null) {
                    data.topics = this.topics;
                }
                if (this.data != null) {
                    data.data = this.data;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.address.length)
                    writer.writeBytes(1, this.address);
                if (this.topics.length)
                    writer.writeRepeatedBytes(2, this.topics);
                if (this.data.length)
                    writer.writeBytes(3, this.data);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Log {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Log();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.address = reader.readBytes();
                            break;
                        case 2:
                            pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                            break;
                        case 3:
                            message.data = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Log {
                return Log.deserialize(bytes);
            }
        }
    }
    export class TransactionRet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blockNumber?: number;
            blockTimeStamp?: number;
            transactioninfo?: TransactionInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blockNumber" in data && data.blockNumber != undefined) {
                    this.blockNumber = data.blockNumber;
                }
                if ("blockTimeStamp" in data && data.blockTimeStamp != undefined) {
                    this.blockTimeStamp = data.blockTimeStamp;
                }
                if ("transactioninfo" in data && data.transactioninfo != undefined) {
                    this.transactioninfo = data.transactioninfo;
                }
            }
        }
        get blockNumber() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set blockNumber(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get blockTimeStamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set blockTimeStamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get transactioninfo() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionInfo, 3) as TransactionInfo[];
        }
        set transactioninfo(value: TransactionInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            blockNumber?: number;
            blockTimeStamp?: number;
            transactioninfo?: ReturnType<typeof TransactionInfo.prototype.toObject>[];
        }): TransactionRet {
            const message = new TransactionRet({});
            if (data.blockNumber != null) {
                message.blockNumber = data.blockNumber;
            }
            if (data.blockTimeStamp != null) {
                message.blockTimeStamp = data.blockTimeStamp;
            }
            if (data.transactioninfo != null) {
                message.transactioninfo = data.transactioninfo.map(item => TransactionInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                blockNumber?: number;
                blockTimeStamp?: number;
                transactioninfo?: ReturnType<typeof TransactionInfo.prototype.toObject>[];
            } = {};
            if (this.blockNumber != null) {
                data.blockNumber = this.blockNumber;
            }
            if (this.blockTimeStamp != null) {
                data.blockTimeStamp = this.blockTimeStamp;
            }
            if (this.transactioninfo != null) {
                data.transactioninfo = this.transactioninfo.map((item: TransactionInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.blockNumber != 0)
                writer.writeInt64(1, this.blockNumber);
            if (this.blockTimeStamp != 0)
                writer.writeInt64(2, this.blockTimeStamp);
            if (this.transactioninfo.length)
                writer.writeRepeatedMessage(3, this.transactioninfo, (item: TransactionInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionRet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionRet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.blockNumber = reader.readInt64();
                        break;
                    case 2:
                        message.blockTimeStamp = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.transactioninfo, () => pb_1.Message.addToRepeatedWrapperField(message, 3, TransactionInfo.deserialize(reader), TransactionInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionRet {
            return TransactionRet.deserialize(bytes);
        }
    }
    export class Transactions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transactions?: Transaction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactions" in data && data.transactions != undefined) {
                    this.transactions = data.transactions;
                }
            }
        }
        get transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, Transaction, 1) as Transaction[];
        }
        set transactions(value: Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transactions?: ReturnType<typeof Transaction.prototype.toObject>[];
        }): Transactions {
            const message = new Transactions({});
            if (data.transactions != null) {
                message.transactions = data.transactions.map(item => Transaction.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transactions?: ReturnType<typeof Transaction.prototype.toObject>[];
            } = {};
            if (this.transactions != null) {
                data.transactions = this.transactions.map((item: Transaction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transactions.length)
                writer.writeRepeatedMessage(1, this.transactions, (item: Transaction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transactions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transactions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Transaction.deserialize(reader), Transaction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transactions {
            return Transactions.deserialize(bytes);
        }
    }
    export class BlockHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            raw_data?: BlockHeader.raw;
            witness_signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("raw_data" in data && data.raw_data != undefined) {
                    this.raw_data = data.raw_data;
                }
                if ("witness_signature" in data && data.witness_signature != undefined) {
                    this.witness_signature = data.witness_signature;
                }
            }
        }
        get raw_data() {
            return pb_1.Message.getWrapperField(this, BlockHeader.raw, 1) as BlockHeader.raw;
        }
        set raw_data(value: BlockHeader.raw) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_raw_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get witness_signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set witness_signature(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            raw_data?: ReturnType<typeof BlockHeader.raw.prototype.toObject>;
            witness_signature?: Uint8Array;
        }): BlockHeader {
            const message = new BlockHeader({});
            if (data.raw_data != null) {
                message.raw_data = BlockHeader.raw.fromObject(data.raw_data);
            }
            if (data.witness_signature != null) {
                message.witness_signature = data.witness_signature;
            }
            return message;
        }
        toObject() {
            const data: {
                raw_data?: ReturnType<typeof BlockHeader.raw.prototype.toObject>;
                witness_signature?: Uint8Array;
            } = {};
            if (this.raw_data != null) {
                data.raw_data = this.raw_data.toObject();
            }
            if (this.witness_signature != null) {
                data.witness_signature = this.witness_signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_raw_data)
                writer.writeMessage(1, this.raw_data, () => this.raw_data.serialize(writer));
            if (this.witness_signature.length)
                writer.writeBytes(2, this.witness_signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.raw_data, () => message.raw_data = BlockHeader.raw.deserialize(reader));
                        break;
                    case 2:
                        message.witness_signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockHeader {
            return BlockHeader.deserialize(bytes);
        }
    }
    export namespace BlockHeader {
        export class raw extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                timestamp?: number;
                txTrieRoot?: Uint8Array;
                parentHash?: Uint8Array;
                number?: number;
                witness_id?: number;
                witness_address?: Uint8Array;
                version?: number;
                accountStateRoot?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("timestamp" in data && data.timestamp != undefined) {
                        this.timestamp = data.timestamp;
                    }
                    if ("txTrieRoot" in data && data.txTrieRoot != undefined) {
                        this.txTrieRoot = data.txTrieRoot;
                    }
                    if ("parentHash" in data && data.parentHash != undefined) {
                        this.parentHash = data.parentHash;
                    }
                    if ("number" in data && data.number != undefined) {
                        this.number = data.number;
                    }
                    if ("witness_id" in data && data.witness_id != undefined) {
                        this.witness_id = data.witness_id;
                    }
                    if ("witness_address" in data && data.witness_address != undefined) {
                        this.witness_address = data.witness_address;
                    }
                    if ("version" in data && data.version != undefined) {
                        this.version = data.version;
                    }
                    if ("accountStateRoot" in data && data.accountStateRoot != undefined) {
                        this.accountStateRoot = data.accountStateRoot;
                    }
                }
            }
            get timestamp() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set timestamp(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get txTrieRoot() {
                return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
            }
            set txTrieRoot(value: Uint8Array) {
                pb_1.Message.setField(this, 2, value);
            }
            get parentHash() {
                return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
            }
            set parentHash(value: Uint8Array) {
                pb_1.Message.setField(this, 3, value);
            }
            get number() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set number(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get witness_id() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set witness_id(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get witness_address() {
                return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
            }
            set witness_address(value: Uint8Array) {
                pb_1.Message.setField(this, 9, value);
            }
            get version() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set version(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get accountStateRoot() {
                return pb_1.Message.getFieldWithDefault(this, 11, new Uint8Array(0)) as Uint8Array;
            }
            set accountStateRoot(value: Uint8Array) {
                pb_1.Message.setField(this, 11, value);
            }
            static fromObject(data: {
                timestamp?: number;
                txTrieRoot?: Uint8Array;
                parentHash?: Uint8Array;
                number?: number;
                witness_id?: number;
                witness_address?: Uint8Array;
                version?: number;
                accountStateRoot?: Uint8Array;
            }): raw {
                const message = new raw({});
                if (data.timestamp != null) {
                    message.timestamp = data.timestamp;
                }
                if (data.txTrieRoot != null) {
                    message.txTrieRoot = data.txTrieRoot;
                }
                if (data.parentHash != null) {
                    message.parentHash = data.parentHash;
                }
                if (data.number != null) {
                    message.number = data.number;
                }
                if (data.witness_id != null) {
                    message.witness_id = data.witness_id;
                }
                if (data.witness_address != null) {
                    message.witness_address = data.witness_address;
                }
                if (data.version != null) {
                    message.version = data.version;
                }
                if (data.accountStateRoot != null) {
                    message.accountStateRoot = data.accountStateRoot;
                }
                return message;
            }
            toObject() {
                const data: {
                    timestamp?: number;
                    txTrieRoot?: Uint8Array;
                    parentHash?: Uint8Array;
                    number?: number;
                    witness_id?: number;
                    witness_address?: Uint8Array;
                    version?: number;
                    accountStateRoot?: Uint8Array;
                } = {};
                if (this.timestamp != null) {
                    data.timestamp = this.timestamp;
                }
                if (this.txTrieRoot != null) {
                    data.txTrieRoot = this.txTrieRoot;
                }
                if (this.parentHash != null) {
                    data.parentHash = this.parentHash;
                }
                if (this.number != null) {
                    data.number = this.number;
                }
                if (this.witness_id != null) {
                    data.witness_id = this.witness_id;
                }
                if (this.witness_address != null) {
                    data.witness_address = this.witness_address;
                }
                if (this.version != null) {
                    data.version = this.version;
                }
                if (this.accountStateRoot != null) {
                    data.accountStateRoot = this.accountStateRoot;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.timestamp != 0)
                    writer.writeInt64(1, this.timestamp);
                if (this.txTrieRoot.length)
                    writer.writeBytes(2, this.txTrieRoot);
                if (this.parentHash.length)
                    writer.writeBytes(3, this.parentHash);
                if (this.number != 0)
                    writer.writeInt64(7, this.number);
                if (this.witness_id != 0)
                    writer.writeInt64(8, this.witness_id);
                if (this.witness_address.length)
                    writer.writeBytes(9, this.witness_address);
                if (this.version != 0)
                    writer.writeInt32(10, this.version);
                if (this.accountStateRoot.length)
                    writer.writeBytes(11, this.accountStateRoot);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): raw {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new raw();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.timestamp = reader.readInt64();
                            break;
                        case 2:
                            message.txTrieRoot = reader.readBytes();
                            break;
                        case 3:
                            message.parentHash = reader.readBytes();
                            break;
                        case 7:
                            message.number = reader.readInt64();
                            break;
                        case 8:
                            message.witness_id = reader.readInt64();
                            break;
                        case 9:
                            message.witness_address = reader.readBytes();
                            break;
                        case 10:
                            message.version = reader.readInt32();
                            break;
                        case 11:
                            message.accountStateRoot = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): raw {
                return raw.deserialize(bytes);
            }
        }
    }
    export class Block extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transactions?: Transaction[];
            block_header?: BlockHeader;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactions" in data && data.transactions != undefined) {
                    this.transactions = data.transactions;
                }
                if ("block_header" in data && data.block_header != undefined) {
                    this.block_header = data.block_header;
                }
            }
        }
        get transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, Transaction, 1) as Transaction[];
        }
        set transactions(value: Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get block_header() {
            return pb_1.Message.getWrapperField(this, BlockHeader, 2) as BlockHeader;
        }
        set block_header(value: BlockHeader) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block_header() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            transactions?: ReturnType<typeof Transaction.prototype.toObject>[];
            block_header?: ReturnType<typeof BlockHeader.prototype.toObject>;
        }): Block {
            const message = new Block({});
            if (data.transactions != null) {
                message.transactions = data.transactions.map(item => Transaction.fromObject(item));
            }
            if (data.block_header != null) {
                message.block_header = BlockHeader.fromObject(data.block_header);
            }
            return message;
        }
        toObject() {
            const data: {
                transactions?: ReturnType<typeof Transaction.prototype.toObject>[];
                block_header?: ReturnType<typeof BlockHeader.prototype.toObject>;
            } = {};
            if (this.transactions != null) {
                data.transactions = this.transactions.map((item: Transaction) => item.toObject());
            }
            if (this.block_header != null) {
                data.block_header = this.block_header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transactions.length)
                writer.writeRepeatedMessage(1, this.transactions, (item: Transaction) => item.serialize(writer));
            if (this.has_block_header)
                writer.writeMessage(2, this.block_header, () => this.block_header.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Block {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Block();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Transaction.deserialize(reader), Transaction));
                        break;
                    case 2:
                        reader.readMessage(message.block_header, () => message.block_header = BlockHeader.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Block {
            return Block.deserialize(bytes);
        }
    }
    export class ChainInventory extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ids?: ChainInventory.BlockId[];
            remain_num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
                if ("remain_num" in data && data.remain_num != undefined) {
                    this.remain_num = data.remain_num;
                }
            }
        }
        get ids() {
            return pb_1.Message.getRepeatedWrapperField(this, ChainInventory.BlockId, 1) as ChainInventory.BlockId[];
        }
        set ids(value: ChainInventory.BlockId[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get remain_num() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set remain_num(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ids?: ReturnType<typeof ChainInventory.BlockId.prototype.toObject>[];
            remain_num?: number;
        }): ChainInventory {
            const message = new ChainInventory({});
            if (data.ids != null) {
                message.ids = data.ids.map(item => ChainInventory.BlockId.fromObject(item));
            }
            if (data.remain_num != null) {
                message.remain_num = data.remain_num;
            }
            return message;
        }
        toObject() {
            const data: {
                ids?: ReturnType<typeof ChainInventory.BlockId.prototype.toObject>[];
                remain_num?: number;
            } = {};
            if (this.ids != null) {
                data.ids = this.ids.map((item: ChainInventory.BlockId) => item.toObject());
            }
            if (this.remain_num != null) {
                data.remain_num = this.remain_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ids.length)
                writer.writeRepeatedMessage(1, this.ids, (item: ChainInventory.BlockId) => item.serialize(writer));
            if (this.remain_num != 0)
                writer.writeInt64(2, this.remain_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChainInventory {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChainInventory();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ids, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ChainInventory.BlockId.deserialize(reader), ChainInventory.BlockId));
                        break;
                    case 2:
                        message.remain_num = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChainInventory {
            return ChainInventory.deserialize(bytes);
        }
    }
    export namespace ChainInventory {
        export class BlockId extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                hash?: Uint8Array;
                number?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("hash" in data && data.hash != undefined) {
                        this.hash = data.hash;
                    }
                    if ("number" in data && data.number != undefined) {
                        this.number = data.number;
                    }
                }
            }
            get hash() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set hash(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get number() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set number(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                hash?: Uint8Array;
                number?: number;
            }): BlockId {
                const message = new BlockId({});
                if (data.hash != null) {
                    message.hash = data.hash;
                }
                if (data.number != null) {
                    message.number = data.number;
                }
                return message;
            }
            toObject() {
                const data: {
                    hash?: Uint8Array;
                    number?: number;
                } = {};
                if (this.hash != null) {
                    data.hash = this.hash;
                }
                if (this.number != null) {
                    data.number = this.number;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.hash.length)
                    writer.writeBytes(1, this.hash);
                if (this.number != 0)
                    writer.writeInt64(2, this.number);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockId {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockId();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.hash = reader.readBytes();
                            break;
                        case 2:
                            message.number = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BlockId {
                return BlockId.deserialize(bytes);
            }
        }
    }
    export class BlockInventory extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ids?: BlockInventory.BlockId[];
            type?: BlockInventory.Type;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get ids() {
            return pb_1.Message.getRepeatedWrapperField(this, BlockInventory.BlockId, 1) as BlockInventory.BlockId[];
        }
        set ids(value: BlockInventory.BlockId[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, BlockInventory.Type.SYNC) as BlockInventory.Type;
        }
        set type(value: BlockInventory.Type) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ids?: ReturnType<typeof BlockInventory.BlockId.prototype.toObject>[];
            type?: BlockInventory.Type;
        }): BlockInventory {
            const message = new BlockInventory({});
            if (data.ids != null) {
                message.ids = data.ids.map(item => BlockInventory.BlockId.fromObject(item));
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                ids?: ReturnType<typeof BlockInventory.BlockId.prototype.toObject>[];
                type?: BlockInventory.Type;
            } = {};
            if (this.ids != null) {
                data.ids = this.ids.map((item: BlockInventory.BlockId) => item.toObject());
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ids.length)
                writer.writeRepeatedMessage(1, this.ids, (item: BlockInventory.BlockId) => item.serialize(writer));
            if (this.type != BlockInventory.Type.SYNC)
                writer.writeEnum(2, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockInventory {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockInventory();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ids, () => pb_1.Message.addToRepeatedWrapperField(message, 1, BlockInventory.BlockId.deserialize(reader), BlockInventory.BlockId));
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockInventory {
            return BlockInventory.deserialize(bytes);
        }
    }
    export namespace BlockInventory {
        export enum Type {
            SYNC = 0,
            ADVTISE = 1,
            FETCH = 2
        }
        export class BlockId extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                hash?: Uint8Array;
                number?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("hash" in data && data.hash != undefined) {
                        this.hash = data.hash;
                    }
                    if ("number" in data && data.number != undefined) {
                        this.number = data.number;
                    }
                }
            }
            get hash() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set hash(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get number() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set number(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                hash?: Uint8Array;
                number?: number;
            }): BlockId {
                const message = new BlockId({});
                if (data.hash != null) {
                    message.hash = data.hash;
                }
                if (data.number != null) {
                    message.number = data.number;
                }
                return message;
            }
            toObject() {
                const data: {
                    hash?: Uint8Array;
                    number?: number;
                } = {};
                if (this.hash != null) {
                    data.hash = this.hash;
                }
                if (this.number != null) {
                    data.number = this.number;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.hash.length)
                    writer.writeBytes(1, this.hash);
                if (this.number != 0)
                    writer.writeInt64(2, this.number);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockId {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockId();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.hash = reader.readBytes();
                            break;
                        case 2:
                            message.number = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BlockId {
                return BlockId.deserialize(bytes);
            }
        }
    }
    export class Inventory extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: Inventory.InventoryType;
            ids?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, Inventory.InventoryType.TRX) as Inventory.InventoryType;
        }
        set type(value: Inventory.InventoryType) {
            pb_1.Message.setField(this, 1, value);
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: Inventory.InventoryType;
            ids?: Uint8Array[];
        }): Inventory {
            const message = new Inventory({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.ids != null) {
                message.ids = data.ids;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: Inventory.InventoryType;
                ids?: Uint8Array[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.ids != null) {
                data.ids = this.ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != Inventory.InventoryType.TRX)
                writer.writeEnum(1, this.type);
            if (this.ids.length)
                writer.writeRepeatedBytes(2, this.ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Inventory {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Inventory();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Inventory {
            return Inventory.deserialize(bytes);
        }
    }
    export namespace Inventory {
        export enum InventoryType {
            TRX = 0,
            BLOCK = 1
        }
    }
    export class Items extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: Items.ItemType;
            blocks?: Block[];
            block_headers?: BlockHeader[];
            transactions?: Transaction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("blocks" in data && data.blocks != undefined) {
                    this.blocks = data.blocks;
                }
                if ("block_headers" in data && data.block_headers != undefined) {
                    this.block_headers = data.block_headers;
                }
                if ("transactions" in data && data.transactions != undefined) {
                    this.transactions = data.transactions;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, Items.ItemType.ERR) as Items.ItemType;
        }
        set type(value: Items.ItemType) {
            pb_1.Message.setField(this, 1, value);
        }
        get blocks() {
            return pb_1.Message.getRepeatedWrapperField(this, Block, 2) as Block[];
        }
        set blocks(value: Block[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get block_headers() {
            return pb_1.Message.getRepeatedWrapperField(this, BlockHeader, 3) as BlockHeader[];
        }
        set block_headers(value: BlockHeader[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, Transaction, 4) as Transaction[];
        }
        set transactions(value: Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            type?: Items.ItemType;
            blocks?: ReturnType<typeof Block.prototype.toObject>[];
            block_headers?: ReturnType<typeof BlockHeader.prototype.toObject>[];
            transactions?: ReturnType<typeof Transaction.prototype.toObject>[];
        }): Items {
            const message = new Items({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.blocks != null) {
                message.blocks = data.blocks.map(item => Block.fromObject(item));
            }
            if (data.block_headers != null) {
                message.block_headers = data.block_headers.map(item => BlockHeader.fromObject(item));
            }
            if (data.transactions != null) {
                message.transactions = data.transactions.map(item => Transaction.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: Items.ItemType;
                blocks?: ReturnType<typeof Block.prototype.toObject>[];
                block_headers?: ReturnType<typeof BlockHeader.prototype.toObject>[];
                transactions?: ReturnType<typeof Transaction.prototype.toObject>[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.blocks != null) {
                data.blocks = this.blocks.map((item: Block) => item.toObject());
            }
            if (this.block_headers != null) {
                data.block_headers = this.block_headers.map((item: BlockHeader) => item.toObject());
            }
            if (this.transactions != null) {
                data.transactions = this.transactions.map((item: Transaction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != Items.ItemType.ERR)
                writer.writeEnum(1, this.type);
            if (this.blocks.length)
                writer.writeRepeatedMessage(2, this.blocks, (item: Block) => item.serialize(writer));
            if (this.block_headers.length)
                writer.writeRepeatedMessage(3, this.block_headers, (item: BlockHeader) => item.serialize(writer));
            if (this.transactions.length)
                writer.writeRepeatedMessage(4, this.transactions, (item: Transaction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Items {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Items();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.blocks, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Block.deserialize(reader), Block));
                        break;
                    case 3:
                        reader.readMessage(message.block_headers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, BlockHeader.deserialize(reader), BlockHeader));
                        break;
                    case 4:
                        reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Transaction.deserialize(reader), Transaction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Items {
            return Items.deserialize(bytes);
        }
    }
    export namespace Items {
        export enum ItemType {
            ERR = 0,
            TRX = 1,
            BLOCK = 2,
            BLOCKHEADER = 3
        }
    }
    export class DynamicProperties extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            last_solidity_block_num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("last_solidity_block_num" in data && data.last_solidity_block_num != undefined) {
                    this.last_solidity_block_num = data.last_solidity_block_num;
                }
            }
        }
        get last_solidity_block_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set last_solidity_block_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            last_solidity_block_num?: number;
        }): DynamicProperties {
            const message = new DynamicProperties({});
            if (data.last_solidity_block_num != null) {
                message.last_solidity_block_num = data.last_solidity_block_num;
            }
            return message;
        }
        toObject() {
            const data: {
                last_solidity_block_num?: number;
            } = {};
            if (this.last_solidity_block_num != null) {
                data.last_solidity_block_num = this.last_solidity_block_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.last_solidity_block_num != 0)
                writer.writeInt64(1, this.last_solidity_block_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DynamicProperties {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DynamicProperties();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.last_solidity_block_num = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DynamicProperties {
            return DynamicProperties.deserialize(bytes);
        }
    }
    export class DisconnectMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reason?: ReasonCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 1, ReasonCode.REQUESTED) as ReasonCode;
        }
        set reason(value: ReasonCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            reason?: ReasonCode;
        }): DisconnectMessage {
            const message = new DisconnectMessage({});
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                reason?: ReasonCode;
            } = {};
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.reason != ReasonCode.REQUESTED)
                writer.writeEnum(1, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisconnectMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisconnectMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.reason = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisconnectMessage {
            return DisconnectMessage.deserialize(bytes);
        }
    }
    export class HelloMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: dependency_1.protocol.Endpoint;
            version?: number;
            timestamp?: number;
            genesisBlockId?: HelloMessage.BlockId;
            solidBlockId?: HelloMessage.BlockId;
            headBlockId?: HelloMessage.BlockId;
            address?: Uint8Array;
            signature?: Uint8Array;
            nodeType?: number;
            lowestBlockNum?: number;
            codeVersion?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("genesisBlockId" in data && data.genesisBlockId != undefined) {
                    this.genesisBlockId = data.genesisBlockId;
                }
                if ("solidBlockId" in data && data.solidBlockId != undefined) {
                    this.solidBlockId = data.solidBlockId;
                }
                if ("headBlockId" in data && data.headBlockId != undefined) {
                    this.headBlockId = data.headBlockId;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("nodeType" in data && data.nodeType != undefined) {
                    this.nodeType = data.nodeType;
                }
                if ("lowestBlockNum" in data && data.lowestBlockNum != undefined) {
                    this.lowestBlockNum = data.lowestBlockNum;
                }
                if ("codeVersion" in data && data.codeVersion != undefined) {
                    this.codeVersion = data.codeVersion;
                }
            }
        }
        get from() {
            return pb_1.Message.getWrapperField(this, dependency_1.protocol.Endpoint, 1) as dependency_1.protocol.Endpoint;
        }
        set from(value: dependency_1.protocol.Endpoint) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_from() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get genesisBlockId() {
            return pb_1.Message.getWrapperField(this, HelloMessage.BlockId, 4) as HelloMessage.BlockId;
        }
        set genesisBlockId(value: HelloMessage.BlockId) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_genesisBlockId() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get solidBlockId() {
            return pb_1.Message.getWrapperField(this, HelloMessage.BlockId, 5) as HelloMessage.BlockId;
        }
        set solidBlockId(value: HelloMessage.BlockId) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_solidBlockId() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get headBlockId() {
            return pb_1.Message.getWrapperField(this, HelloMessage.BlockId, 6) as HelloMessage.BlockId;
        }
        set headBlockId(value: HelloMessage.BlockId) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_headBlockId() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        get nodeType() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set nodeType(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get lowestBlockNum() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set lowestBlockNum(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get codeVersion() {
            return pb_1.Message.getFieldWithDefault(this, 11, new Uint8Array(0)) as Uint8Array;
        }
        set codeVersion(value: Uint8Array) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            from?: ReturnType<typeof dependency_1.protocol.Endpoint.prototype.toObject>;
            version?: number;
            timestamp?: number;
            genesisBlockId?: ReturnType<typeof HelloMessage.BlockId.prototype.toObject>;
            solidBlockId?: ReturnType<typeof HelloMessage.BlockId.prototype.toObject>;
            headBlockId?: ReturnType<typeof HelloMessage.BlockId.prototype.toObject>;
            address?: Uint8Array;
            signature?: Uint8Array;
            nodeType?: number;
            lowestBlockNum?: number;
            codeVersion?: Uint8Array;
        }): HelloMessage {
            const message = new HelloMessage({});
            if (data.from != null) {
                message.from = dependency_1.protocol.Endpoint.fromObject(data.from);
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.genesisBlockId != null) {
                message.genesisBlockId = HelloMessage.BlockId.fromObject(data.genesisBlockId);
            }
            if (data.solidBlockId != null) {
                message.solidBlockId = HelloMessage.BlockId.fromObject(data.solidBlockId);
            }
            if (data.headBlockId != null) {
                message.headBlockId = HelloMessage.BlockId.fromObject(data.headBlockId);
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.nodeType != null) {
                message.nodeType = data.nodeType;
            }
            if (data.lowestBlockNum != null) {
                message.lowestBlockNum = data.lowestBlockNum;
            }
            if (data.codeVersion != null) {
                message.codeVersion = data.codeVersion;
            }
            return message;
        }
        toObject() {
            const data: {
                from?: ReturnType<typeof dependency_1.protocol.Endpoint.prototype.toObject>;
                version?: number;
                timestamp?: number;
                genesisBlockId?: ReturnType<typeof HelloMessage.BlockId.prototype.toObject>;
                solidBlockId?: ReturnType<typeof HelloMessage.BlockId.prototype.toObject>;
                headBlockId?: ReturnType<typeof HelloMessage.BlockId.prototype.toObject>;
                address?: Uint8Array;
                signature?: Uint8Array;
                nodeType?: number;
                lowestBlockNum?: number;
                codeVersion?: Uint8Array;
            } = {};
            if (this.from != null) {
                data.from = this.from.toObject();
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.genesisBlockId != null) {
                data.genesisBlockId = this.genesisBlockId.toObject();
            }
            if (this.solidBlockId != null) {
                data.solidBlockId = this.solidBlockId.toObject();
            }
            if (this.headBlockId != null) {
                data.headBlockId = this.headBlockId.toObject();
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.nodeType != null) {
                data.nodeType = this.nodeType;
            }
            if (this.lowestBlockNum != null) {
                data.lowestBlockNum = this.lowestBlockNum;
            }
            if (this.codeVersion != null) {
                data.codeVersion = this.codeVersion;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_from)
                writer.writeMessage(1, this.from, () => this.from.serialize(writer));
            if (this.version != 0)
                writer.writeInt32(2, this.version);
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (this.has_genesisBlockId)
                writer.writeMessage(4, this.genesisBlockId, () => this.genesisBlockId.serialize(writer));
            if (this.has_solidBlockId)
                writer.writeMessage(5, this.solidBlockId, () => this.solidBlockId.serialize(writer));
            if (this.has_headBlockId)
                writer.writeMessage(6, this.headBlockId, () => this.headBlockId.serialize(writer));
            if (this.address.length)
                writer.writeBytes(7, this.address);
            if (this.signature.length)
                writer.writeBytes(8, this.signature);
            if (this.nodeType != 0)
                writer.writeInt32(9, this.nodeType);
            if (this.lowestBlockNum != 0)
                writer.writeInt64(10, this.lowestBlockNum);
            if (this.codeVersion.length)
                writer.writeBytes(11, this.codeVersion);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HelloMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HelloMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.from, () => message.from = dependency_1.protocol.Endpoint.deserialize(reader));
                        break;
                    case 2:
                        message.version = reader.readInt32();
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.genesisBlockId, () => message.genesisBlockId = HelloMessage.BlockId.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.solidBlockId, () => message.solidBlockId = HelloMessage.BlockId.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.headBlockId, () => message.headBlockId = HelloMessage.BlockId.deserialize(reader));
                        break;
                    case 7:
                        message.address = reader.readBytes();
                        break;
                    case 8:
                        message.signature = reader.readBytes();
                        break;
                    case 9:
                        message.nodeType = reader.readInt32();
                        break;
                    case 10:
                        message.lowestBlockNum = reader.readInt64();
                        break;
                    case 11:
                        message.codeVersion = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HelloMessage {
            return HelloMessage.deserialize(bytes);
        }
    }
    export namespace HelloMessage {
        export class BlockId extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                hash?: Uint8Array;
                number?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("hash" in data && data.hash != undefined) {
                        this.hash = data.hash;
                    }
                    if ("number" in data && data.number != undefined) {
                        this.number = data.number;
                    }
                }
            }
            get hash() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set hash(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get number() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set number(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                hash?: Uint8Array;
                number?: number;
            }): BlockId {
                const message = new BlockId({});
                if (data.hash != null) {
                    message.hash = data.hash;
                }
                if (data.number != null) {
                    message.number = data.number;
                }
                return message;
            }
            toObject() {
                const data: {
                    hash?: Uint8Array;
                    number?: number;
                } = {};
                if (this.hash != null) {
                    data.hash = this.hash;
                }
                if (this.number != null) {
                    data.number = this.number;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.hash.length)
                    writer.writeBytes(1, this.hash);
                if (this.number != 0)
                    writer.writeInt64(2, this.number);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockId {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockId();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.hash = reader.readBytes();
                            break;
                        case 2:
                            message.number = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BlockId {
                return BlockId.deserialize(bytes);
            }
        }
    }
    export class InternalTransaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            hash?: Uint8Array;
            caller_address?: Uint8Array;
            transferTo_address?: Uint8Array;
            callValueInfo?: InternalTransaction.CallValueInfo[];
            note?: Uint8Array;
            rejected?: boolean;
            extra?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("caller_address" in data && data.caller_address != undefined) {
                    this.caller_address = data.caller_address;
                }
                if ("transferTo_address" in data && data.transferTo_address != undefined) {
                    this.transferTo_address = data.transferTo_address;
                }
                if ("callValueInfo" in data && data.callValueInfo != undefined) {
                    this.callValueInfo = data.callValueInfo;
                }
                if ("note" in data && data.note != undefined) {
                    this.note = data.note;
                }
                if ("rejected" in data && data.rejected != undefined) {
                    this.rejected = data.rejected;
                }
                if ("extra" in data && data.extra != undefined) {
                    this.extra = data.extra;
                }
            }
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get caller_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set caller_address(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get transferTo_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set transferTo_address(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get callValueInfo() {
            return pb_1.Message.getRepeatedWrapperField(this, InternalTransaction.CallValueInfo, 4) as InternalTransaction.CallValueInfo[];
        }
        set callValueInfo(value: InternalTransaction.CallValueInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get note() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set note(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get rejected() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set rejected(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get extra() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set extra(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            hash?: Uint8Array;
            caller_address?: Uint8Array;
            transferTo_address?: Uint8Array;
            callValueInfo?: ReturnType<typeof InternalTransaction.CallValueInfo.prototype.toObject>[];
            note?: Uint8Array;
            rejected?: boolean;
            extra?: string;
        }): InternalTransaction {
            const message = new InternalTransaction({});
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.caller_address != null) {
                message.caller_address = data.caller_address;
            }
            if (data.transferTo_address != null) {
                message.transferTo_address = data.transferTo_address;
            }
            if (data.callValueInfo != null) {
                message.callValueInfo = data.callValueInfo.map(item => InternalTransaction.CallValueInfo.fromObject(item));
            }
            if (data.note != null) {
                message.note = data.note;
            }
            if (data.rejected != null) {
                message.rejected = data.rejected;
            }
            if (data.extra != null) {
                message.extra = data.extra;
            }
            return message;
        }
        toObject() {
            const data: {
                hash?: Uint8Array;
                caller_address?: Uint8Array;
                transferTo_address?: Uint8Array;
                callValueInfo?: ReturnType<typeof InternalTransaction.CallValueInfo.prototype.toObject>[];
                note?: Uint8Array;
                rejected?: boolean;
                extra?: string;
            } = {};
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.caller_address != null) {
                data.caller_address = this.caller_address;
            }
            if (this.transferTo_address != null) {
                data.transferTo_address = this.transferTo_address;
            }
            if (this.callValueInfo != null) {
                data.callValueInfo = this.callValueInfo.map((item: InternalTransaction.CallValueInfo) => item.toObject());
            }
            if (this.note != null) {
                data.note = this.note;
            }
            if (this.rejected != null) {
                data.rejected = this.rejected;
            }
            if (this.extra != null) {
                data.extra = this.extra;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hash.length)
                writer.writeBytes(1, this.hash);
            if (this.caller_address.length)
                writer.writeBytes(2, this.caller_address);
            if (this.transferTo_address.length)
                writer.writeBytes(3, this.transferTo_address);
            if (this.callValueInfo.length)
                writer.writeRepeatedMessage(4, this.callValueInfo, (item: InternalTransaction.CallValueInfo) => item.serialize(writer));
            if (this.note.length)
                writer.writeBytes(5, this.note);
            if (this.rejected != false)
                writer.writeBool(6, this.rejected);
            if (this.extra.length)
                writer.writeString(7, this.extra);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InternalTransaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InternalTransaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hash = reader.readBytes();
                        break;
                    case 2:
                        message.caller_address = reader.readBytes();
                        break;
                    case 3:
                        message.transferTo_address = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.callValueInfo, () => pb_1.Message.addToRepeatedWrapperField(message, 4, InternalTransaction.CallValueInfo.deserialize(reader), InternalTransaction.CallValueInfo));
                        break;
                    case 5:
                        message.note = reader.readBytes();
                        break;
                    case 6:
                        message.rejected = reader.readBool();
                        break;
                    case 7:
                        message.extra = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InternalTransaction {
            return InternalTransaction.deserialize(bytes);
        }
    }
    export namespace InternalTransaction {
        export class CallValueInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                callValue?: number;
                tokenId?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("callValue" in data && data.callValue != undefined) {
                        this.callValue = data.callValue;
                    }
                    if ("tokenId" in data && data.tokenId != undefined) {
                        this.tokenId = data.tokenId;
                    }
                }
            }
            get callValue() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set callValue(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get tokenId() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set tokenId(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                callValue?: number;
                tokenId?: string;
            }): CallValueInfo {
                const message = new CallValueInfo({});
                if (data.callValue != null) {
                    message.callValue = data.callValue;
                }
                if (data.tokenId != null) {
                    message.tokenId = data.tokenId;
                }
                return message;
            }
            toObject() {
                const data: {
                    callValue?: number;
                    tokenId?: string;
                } = {};
                if (this.callValue != null) {
                    data.callValue = this.callValue;
                }
                if (this.tokenId != null) {
                    data.tokenId = this.tokenId;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.callValue != 0)
                    writer.writeInt64(1, this.callValue);
                if (this.tokenId.length)
                    writer.writeString(2, this.tokenId);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CallValueInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CallValueInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.callValue = reader.readInt64();
                            break;
                        case 2:
                            message.tokenId = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CallValueInfo {
                return CallValueInfo.deserialize(bytes);
            }
        }
    }
    export class DelegatedResourceAccountIndex extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: Uint8Array;
            fromAccounts?: Uint8Array[];
            toAccounts?: Uint8Array[];
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("fromAccounts" in data && data.fromAccounts != undefined) {
                    this.fromAccounts = data.fromAccounts;
                }
                if ("toAccounts" in data && data.toAccounts != undefined) {
                    this.toAccounts = data.toAccounts;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set account(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get fromAccounts() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set fromAccounts(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get toAccounts() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as Uint8Array[];
        }
        set toAccounts(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            account?: Uint8Array;
            fromAccounts?: Uint8Array[];
            toAccounts?: Uint8Array[];
            timestamp?: number;
        }): DelegatedResourceAccountIndex {
            const message = new DelegatedResourceAccountIndex({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.fromAccounts != null) {
                message.fromAccounts = data.fromAccounts;
            }
            if (data.toAccounts != null) {
                message.toAccounts = data.toAccounts;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: Uint8Array;
                fromAccounts?: Uint8Array[];
                toAccounts?: Uint8Array[];
                timestamp?: number;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.fromAccounts != null) {
                data.fromAccounts = this.fromAccounts;
            }
            if (this.toAccounts != null) {
                data.toAccounts = this.toAccounts;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeBytes(1, this.account);
            if (this.fromAccounts.length)
                writer.writeRepeatedBytes(2, this.fromAccounts);
            if (this.toAccounts.length)
                writer.writeRepeatedBytes(3, this.toAccounts);
            if (this.timestamp != 0)
                writer.writeInt64(4, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelegatedResourceAccountIndex {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelegatedResourceAccountIndex();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readBytes();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    case 4:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelegatedResourceAccountIndex {
            return DelegatedResourceAccountIndex.deserialize(bytes);
        }
    }
    export class NodeInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            beginSyncNum?: number;
            block?: string;
            solidityBlock?: string;
            currentConnectCount?: number;
            activeConnectCount?: number;
            passiveConnectCount?: number;
            totalFlow?: number;
            peerInfoList?: NodeInfo.PeerInfo[];
            configNodeInfo?: NodeInfo.ConfigNodeInfo;
            machineInfo?: NodeInfo.MachineInfo;
            cheatWitnessInfoMap?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("beginSyncNum" in data && data.beginSyncNum != undefined) {
                    this.beginSyncNum = data.beginSyncNum;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("solidityBlock" in data && data.solidityBlock != undefined) {
                    this.solidityBlock = data.solidityBlock;
                }
                if ("currentConnectCount" in data && data.currentConnectCount != undefined) {
                    this.currentConnectCount = data.currentConnectCount;
                }
                if ("activeConnectCount" in data && data.activeConnectCount != undefined) {
                    this.activeConnectCount = data.activeConnectCount;
                }
                if ("passiveConnectCount" in data && data.passiveConnectCount != undefined) {
                    this.passiveConnectCount = data.passiveConnectCount;
                }
                if ("totalFlow" in data && data.totalFlow != undefined) {
                    this.totalFlow = data.totalFlow;
                }
                if ("peerInfoList" in data && data.peerInfoList != undefined) {
                    this.peerInfoList = data.peerInfoList;
                }
                if ("configNodeInfo" in data && data.configNodeInfo != undefined) {
                    this.configNodeInfo = data.configNodeInfo;
                }
                if ("machineInfo" in data && data.machineInfo != undefined) {
                    this.machineInfo = data.machineInfo;
                }
                if ("cheatWitnessInfoMap" in data && data.cheatWitnessInfoMap != undefined) {
                    this.cheatWitnessInfoMap = data.cheatWitnessInfoMap;
                }
            }
            if (!this.cheatWitnessInfoMap)
                this.cheatWitnessInfoMap = new Map();
        }
        get beginSyncNum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set beginSyncNum(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get block() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set block(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get solidityBlock() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set solidityBlock(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get currentConnectCount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set currentConnectCount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get activeConnectCount() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set activeConnectCount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get passiveConnectCount() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set passiveConnectCount(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get totalFlow() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set totalFlow(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get peerInfoList() {
            return pb_1.Message.getRepeatedWrapperField(this, NodeInfo.PeerInfo, 8) as NodeInfo.PeerInfo[];
        }
        set peerInfoList(value: NodeInfo.PeerInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get configNodeInfo() {
            return pb_1.Message.getWrapperField(this, NodeInfo.ConfigNodeInfo, 9) as NodeInfo.ConfigNodeInfo;
        }
        set configNodeInfo(value: NodeInfo.ConfigNodeInfo) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_configNodeInfo() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get machineInfo() {
            return pb_1.Message.getWrapperField(this, NodeInfo.MachineInfo, 10) as NodeInfo.MachineInfo;
        }
        set machineInfo(value: NodeInfo.MachineInfo) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_machineInfo() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get cheatWitnessInfoMap() {
            return pb_1.Message.getField(this, 11) as any as Map<string, string>;
        }
        set cheatWitnessInfoMap(value: Map<string, string>) {
            pb_1.Message.setField(this, 11, value as any);
        }
        static fromObject(data: {
            beginSyncNum?: number;
            block?: string;
            solidityBlock?: string;
            currentConnectCount?: number;
            activeConnectCount?: number;
            passiveConnectCount?: number;
            totalFlow?: number;
            peerInfoList?: ReturnType<typeof NodeInfo.PeerInfo.prototype.toObject>[];
            configNodeInfo?: ReturnType<typeof NodeInfo.ConfigNodeInfo.prototype.toObject>;
            machineInfo?: ReturnType<typeof NodeInfo.MachineInfo.prototype.toObject>;
            cheatWitnessInfoMap?: {
                [key: string]: string;
            };
        }): NodeInfo {
            const message = new NodeInfo({});
            if (data.beginSyncNum != null) {
                message.beginSyncNum = data.beginSyncNum;
            }
            if (data.block != null) {
                message.block = data.block;
            }
            if (data.solidityBlock != null) {
                message.solidityBlock = data.solidityBlock;
            }
            if (data.currentConnectCount != null) {
                message.currentConnectCount = data.currentConnectCount;
            }
            if (data.activeConnectCount != null) {
                message.activeConnectCount = data.activeConnectCount;
            }
            if (data.passiveConnectCount != null) {
                message.passiveConnectCount = data.passiveConnectCount;
            }
            if (data.totalFlow != null) {
                message.totalFlow = data.totalFlow;
            }
            if (data.peerInfoList != null) {
                message.peerInfoList = data.peerInfoList.map(item => NodeInfo.PeerInfo.fromObject(item));
            }
            if (data.configNodeInfo != null) {
                message.configNodeInfo = NodeInfo.ConfigNodeInfo.fromObject(data.configNodeInfo);
            }
            if (data.machineInfo != null) {
                message.machineInfo = NodeInfo.MachineInfo.fromObject(data.machineInfo);
            }
            if (typeof data.cheatWitnessInfoMap == "object") {
                message.cheatWitnessInfoMap = new Map(Object.entries(data.cheatWitnessInfoMap));
            }
            return message;
        }
        toObject() {
            const data: {
                beginSyncNum?: number;
                block?: string;
                solidityBlock?: string;
                currentConnectCount?: number;
                activeConnectCount?: number;
                passiveConnectCount?: number;
                totalFlow?: number;
                peerInfoList?: ReturnType<typeof NodeInfo.PeerInfo.prototype.toObject>[];
                configNodeInfo?: ReturnType<typeof NodeInfo.ConfigNodeInfo.prototype.toObject>;
                machineInfo?: ReturnType<typeof NodeInfo.MachineInfo.prototype.toObject>;
                cheatWitnessInfoMap?: {
                    [key: string]: string;
                };
            } = {};
            if (this.beginSyncNum != null) {
                data.beginSyncNum = this.beginSyncNum;
            }
            if (this.block != null) {
                data.block = this.block;
            }
            if (this.solidityBlock != null) {
                data.solidityBlock = this.solidityBlock;
            }
            if (this.currentConnectCount != null) {
                data.currentConnectCount = this.currentConnectCount;
            }
            if (this.activeConnectCount != null) {
                data.activeConnectCount = this.activeConnectCount;
            }
            if (this.passiveConnectCount != null) {
                data.passiveConnectCount = this.passiveConnectCount;
            }
            if (this.totalFlow != null) {
                data.totalFlow = this.totalFlow;
            }
            if (this.peerInfoList != null) {
                data.peerInfoList = this.peerInfoList.map((item: NodeInfo.PeerInfo) => item.toObject());
            }
            if (this.configNodeInfo != null) {
                data.configNodeInfo = this.configNodeInfo.toObject();
            }
            if (this.machineInfo != null) {
                data.machineInfo = this.machineInfo.toObject();
            }
            if (this.cheatWitnessInfoMap != null) {
                data.cheatWitnessInfoMap = (Object.fromEntries)(this.cheatWitnessInfoMap);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.beginSyncNum != 0)
                writer.writeInt64(1, this.beginSyncNum);
            if (this.block.length)
                writer.writeString(2, this.block);
            if (this.solidityBlock.length)
                writer.writeString(3, this.solidityBlock);
            if (this.currentConnectCount != 0)
                writer.writeInt32(4, this.currentConnectCount);
            if (this.activeConnectCount != 0)
                writer.writeInt32(5, this.activeConnectCount);
            if (this.passiveConnectCount != 0)
                writer.writeInt32(6, this.passiveConnectCount);
            if (this.totalFlow != 0)
                writer.writeInt64(7, this.totalFlow);
            if (this.peerInfoList.length)
                writer.writeRepeatedMessage(8, this.peerInfoList, (item: NodeInfo.PeerInfo) => item.serialize(writer));
            if (this.has_configNodeInfo)
                writer.writeMessage(9, this.configNodeInfo, () => this.configNodeInfo.serialize(writer));
            if (this.has_machineInfo)
                writer.writeMessage(10, this.machineInfo, () => this.machineInfo.serialize(writer));
            for (const [key, value] of this.cheatWitnessInfoMap) {
                writer.writeMessage(11, this.cheatWitnessInfoMap, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NodeInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NodeInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.beginSyncNum = reader.readInt64();
                        break;
                    case 2:
                        message.block = reader.readString();
                        break;
                    case 3:
                        message.solidityBlock = reader.readString();
                        break;
                    case 4:
                        message.currentConnectCount = reader.readInt32();
                        break;
                    case 5:
                        message.activeConnectCount = reader.readInt32();
                        break;
                    case 6:
                        message.passiveConnectCount = reader.readInt32();
                        break;
                    case 7:
                        message.totalFlow = reader.readInt64();
                        break;
                    case 8:
                        reader.readMessage(message.peerInfoList, () => pb_1.Message.addToRepeatedWrapperField(message, 8, NodeInfo.PeerInfo.deserialize(reader), NodeInfo.PeerInfo));
                        break;
                    case 9:
                        reader.readMessage(message.configNodeInfo, () => message.configNodeInfo = NodeInfo.ConfigNodeInfo.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.machineInfo, () => message.machineInfo = NodeInfo.MachineInfo.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.cheatWitnessInfoMap as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NodeInfo {
            return NodeInfo.deserialize(bytes);
        }
    }
    export namespace NodeInfo {
        export class PeerInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                lastSyncBlock?: string;
                remainNum?: number;
                lastBlockUpdateTime?: number;
                syncFlag?: boolean;
                headBlockTimeWeBothHave?: number;
                needSyncFromPeer?: boolean;
                needSyncFromUs?: boolean;
                host?: string;
                port?: number;
                nodeId?: string;
                connectTime?: number;
                avgLatency?: number;
                syncToFetchSize?: number;
                syncToFetchSizePeekNum?: number;
                syncBlockRequestedSize?: number;
                unFetchSynNum?: number;
                blockInPorcSize?: number;
                headBlockWeBothHave?: string;
                isActive?: boolean;
                score?: number;
                nodeCount?: number;
                inFlow?: number;
                disconnectTimes?: number;
                localDisconnectReason?: string;
                remoteDisconnectReason?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("lastSyncBlock" in data && data.lastSyncBlock != undefined) {
                        this.lastSyncBlock = data.lastSyncBlock;
                    }
                    if ("remainNum" in data && data.remainNum != undefined) {
                        this.remainNum = data.remainNum;
                    }
                    if ("lastBlockUpdateTime" in data && data.lastBlockUpdateTime != undefined) {
                        this.lastBlockUpdateTime = data.lastBlockUpdateTime;
                    }
                    if ("syncFlag" in data && data.syncFlag != undefined) {
                        this.syncFlag = data.syncFlag;
                    }
                    if ("headBlockTimeWeBothHave" in data && data.headBlockTimeWeBothHave != undefined) {
                        this.headBlockTimeWeBothHave = data.headBlockTimeWeBothHave;
                    }
                    if ("needSyncFromPeer" in data && data.needSyncFromPeer != undefined) {
                        this.needSyncFromPeer = data.needSyncFromPeer;
                    }
                    if ("needSyncFromUs" in data && data.needSyncFromUs != undefined) {
                        this.needSyncFromUs = data.needSyncFromUs;
                    }
                    if ("host" in data && data.host != undefined) {
                        this.host = data.host;
                    }
                    if ("port" in data && data.port != undefined) {
                        this.port = data.port;
                    }
                    if ("nodeId" in data && data.nodeId != undefined) {
                        this.nodeId = data.nodeId;
                    }
                    if ("connectTime" in data && data.connectTime != undefined) {
                        this.connectTime = data.connectTime;
                    }
                    if ("avgLatency" in data && data.avgLatency != undefined) {
                        this.avgLatency = data.avgLatency;
                    }
                    if ("syncToFetchSize" in data && data.syncToFetchSize != undefined) {
                        this.syncToFetchSize = data.syncToFetchSize;
                    }
                    if ("syncToFetchSizePeekNum" in data && data.syncToFetchSizePeekNum != undefined) {
                        this.syncToFetchSizePeekNum = data.syncToFetchSizePeekNum;
                    }
                    if ("syncBlockRequestedSize" in data && data.syncBlockRequestedSize != undefined) {
                        this.syncBlockRequestedSize = data.syncBlockRequestedSize;
                    }
                    if ("unFetchSynNum" in data && data.unFetchSynNum != undefined) {
                        this.unFetchSynNum = data.unFetchSynNum;
                    }
                    if ("blockInPorcSize" in data && data.blockInPorcSize != undefined) {
                        this.blockInPorcSize = data.blockInPorcSize;
                    }
                    if ("headBlockWeBothHave" in data && data.headBlockWeBothHave != undefined) {
                        this.headBlockWeBothHave = data.headBlockWeBothHave;
                    }
                    if ("isActive" in data && data.isActive != undefined) {
                        this.isActive = data.isActive;
                    }
                    if ("score" in data && data.score != undefined) {
                        this.score = data.score;
                    }
                    if ("nodeCount" in data && data.nodeCount != undefined) {
                        this.nodeCount = data.nodeCount;
                    }
                    if ("inFlow" in data && data.inFlow != undefined) {
                        this.inFlow = data.inFlow;
                    }
                    if ("disconnectTimes" in data && data.disconnectTimes != undefined) {
                        this.disconnectTimes = data.disconnectTimes;
                    }
                    if ("localDisconnectReason" in data && data.localDisconnectReason != undefined) {
                        this.localDisconnectReason = data.localDisconnectReason;
                    }
                    if ("remoteDisconnectReason" in data && data.remoteDisconnectReason != undefined) {
                        this.remoteDisconnectReason = data.remoteDisconnectReason;
                    }
                }
            }
            get lastSyncBlock() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set lastSyncBlock(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get remainNum() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set remainNum(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get lastBlockUpdateTime() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set lastBlockUpdateTime(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get syncFlag() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set syncFlag(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get headBlockTimeWeBothHave() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set headBlockTimeWeBothHave(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get needSyncFromPeer() {
                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
            }
            set needSyncFromPeer(value: boolean) {
                pb_1.Message.setField(this, 6, value);
            }
            get needSyncFromUs() {
                return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
            }
            set needSyncFromUs(value: boolean) {
                pb_1.Message.setField(this, 7, value);
            }
            get host() {
                return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
            }
            set host(value: string) {
                pb_1.Message.setField(this, 8, value);
            }
            get port() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set port(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get nodeId() {
                return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
            }
            set nodeId(value: string) {
                pb_1.Message.setField(this, 10, value);
            }
            get connectTime() {
                return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
            }
            set connectTime(value: number) {
                pb_1.Message.setField(this, 11, value);
            }
            get avgLatency() {
                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
            }
            set avgLatency(value: number) {
                pb_1.Message.setField(this, 12, value);
            }
            get syncToFetchSize() {
                return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
            }
            set syncToFetchSize(value: number) {
                pb_1.Message.setField(this, 13, value);
            }
            get syncToFetchSizePeekNum() {
                return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
            }
            set syncToFetchSizePeekNum(value: number) {
                pb_1.Message.setField(this, 14, value);
            }
            get syncBlockRequestedSize() {
                return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
            }
            set syncBlockRequestedSize(value: number) {
                pb_1.Message.setField(this, 15, value);
            }
            get unFetchSynNum() {
                return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
            }
            set unFetchSynNum(value: number) {
                pb_1.Message.setField(this, 16, value);
            }
            get blockInPorcSize() {
                return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
            }
            set blockInPorcSize(value: number) {
                pb_1.Message.setField(this, 17, value);
            }
            get headBlockWeBothHave() {
                return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
            }
            set headBlockWeBothHave(value: string) {
                pb_1.Message.setField(this, 18, value);
            }
            get isActive() {
                return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
            }
            set isActive(value: boolean) {
                pb_1.Message.setField(this, 19, value);
            }
            get score() {
                return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
            }
            set score(value: number) {
                pb_1.Message.setField(this, 20, value);
            }
            get nodeCount() {
                return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
            }
            set nodeCount(value: number) {
                pb_1.Message.setField(this, 21, value);
            }
            get inFlow() {
                return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
            }
            set inFlow(value: number) {
                pb_1.Message.setField(this, 22, value);
            }
            get disconnectTimes() {
                return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
            }
            set disconnectTimes(value: number) {
                pb_1.Message.setField(this, 23, value);
            }
            get localDisconnectReason() {
                return pb_1.Message.getFieldWithDefault(this, 24, "") as string;
            }
            set localDisconnectReason(value: string) {
                pb_1.Message.setField(this, 24, value);
            }
            get remoteDisconnectReason() {
                return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
            }
            set remoteDisconnectReason(value: string) {
                pb_1.Message.setField(this, 25, value);
            }
            static fromObject(data: {
                lastSyncBlock?: string;
                remainNum?: number;
                lastBlockUpdateTime?: number;
                syncFlag?: boolean;
                headBlockTimeWeBothHave?: number;
                needSyncFromPeer?: boolean;
                needSyncFromUs?: boolean;
                host?: string;
                port?: number;
                nodeId?: string;
                connectTime?: number;
                avgLatency?: number;
                syncToFetchSize?: number;
                syncToFetchSizePeekNum?: number;
                syncBlockRequestedSize?: number;
                unFetchSynNum?: number;
                blockInPorcSize?: number;
                headBlockWeBothHave?: string;
                isActive?: boolean;
                score?: number;
                nodeCount?: number;
                inFlow?: number;
                disconnectTimes?: number;
                localDisconnectReason?: string;
                remoteDisconnectReason?: string;
            }): PeerInfo {
                const message = new PeerInfo({});
                if (data.lastSyncBlock != null) {
                    message.lastSyncBlock = data.lastSyncBlock;
                }
                if (data.remainNum != null) {
                    message.remainNum = data.remainNum;
                }
                if (data.lastBlockUpdateTime != null) {
                    message.lastBlockUpdateTime = data.lastBlockUpdateTime;
                }
                if (data.syncFlag != null) {
                    message.syncFlag = data.syncFlag;
                }
                if (data.headBlockTimeWeBothHave != null) {
                    message.headBlockTimeWeBothHave = data.headBlockTimeWeBothHave;
                }
                if (data.needSyncFromPeer != null) {
                    message.needSyncFromPeer = data.needSyncFromPeer;
                }
                if (data.needSyncFromUs != null) {
                    message.needSyncFromUs = data.needSyncFromUs;
                }
                if (data.host != null) {
                    message.host = data.host;
                }
                if (data.port != null) {
                    message.port = data.port;
                }
                if (data.nodeId != null) {
                    message.nodeId = data.nodeId;
                }
                if (data.connectTime != null) {
                    message.connectTime = data.connectTime;
                }
                if (data.avgLatency != null) {
                    message.avgLatency = data.avgLatency;
                }
                if (data.syncToFetchSize != null) {
                    message.syncToFetchSize = data.syncToFetchSize;
                }
                if (data.syncToFetchSizePeekNum != null) {
                    message.syncToFetchSizePeekNum = data.syncToFetchSizePeekNum;
                }
                if (data.syncBlockRequestedSize != null) {
                    message.syncBlockRequestedSize = data.syncBlockRequestedSize;
                }
                if (data.unFetchSynNum != null) {
                    message.unFetchSynNum = data.unFetchSynNum;
                }
                if (data.blockInPorcSize != null) {
                    message.blockInPorcSize = data.blockInPorcSize;
                }
                if (data.headBlockWeBothHave != null) {
                    message.headBlockWeBothHave = data.headBlockWeBothHave;
                }
                if (data.isActive != null) {
                    message.isActive = data.isActive;
                }
                if (data.score != null) {
                    message.score = data.score;
                }
                if (data.nodeCount != null) {
                    message.nodeCount = data.nodeCount;
                }
                if (data.inFlow != null) {
                    message.inFlow = data.inFlow;
                }
                if (data.disconnectTimes != null) {
                    message.disconnectTimes = data.disconnectTimes;
                }
                if (data.localDisconnectReason != null) {
                    message.localDisconnectReason = data.localDisconnectReason;
                }
                if (data.remoteDisconnectReason != null) {
                    message.remoteDisconnectReason = data.remoteDisconnectReason;
                }
                return message;
            }
            toObject() {
                const data: {
                    lastSyncBlock?: string;
                    remainNum?: number;
                    lastBlockUpdateTime?: number;
                    syncFlag?: boolean;
                    headBlockTimeWeBothHave?: number;
                    needSyncFromPeer?: boolean;
                    needSyncFromUs?: boolean;
                    host?: string;
                    port?: number;
                    nodeId?: string;
                    connectTime?: number;
                    avgLatency?: number;
                    syncToFetchSize?: number;
                    syncToFetchSizePeekNum?: number;
                    syncBlockRequestedSize?: number;
                    unFetchSynNum?: number;
                    blockInPorcSize?: number;
                    headBlockWeBothHave?: string;
                    isActive?: boolean;
                    score?: number;
                    nodeCount?: number;
                    inFlow?: number;
                    disconnectTimes?: number;
                    localDisconnectReason?: string;
                    remoteDisconnectReason?: string;
                } = {};
                if (this.lastSyncBlock != null) {
                    data.lastSyncBlock = this.lastSyncBlock;
                }
                if (this.remainNum != null) {
                    data.remainNum = this.remainNum;
                }
                if (this.lastBlockUpdateTime != null) {
                    data.lastBlockUpdateTime = this.lastBlockUpdateTime;
                }
                if (this.syncFlag != null) {
                    data.syncFlag = this.syncFlag;
                }
                if (this.headBlockTimeWeBothHave != null) {
                    data.headBlockTimeWeBothHave = this.headBlockTimeWeBothHave;
                }
                if (this.needSyncFromPeer != null) {
                    data.needSyncFromPeer = this.needSyncFromPeer;
                }
                if (this.needSyncFromUs != null) {
                    data.needSyncFromUs = this.needSyncFromUs;
                }
                if (this.host != null) {
                    data.host = this.host;
                }
                if (this.port != null) {
                    data.port = this.port;
                }
                if (this.nodeId != null) {
                    data.nodeId = this.nodeId;
                }
                if (this.connectTime != null) {
                    data.connectTime = this.connectTime;
                }
                if (this.avgLatency != null) {
                    data.avgLatency = this.avgLatency;
                }
                if (this.syncToFetchSize != null) {
                    data.syncToFetchSize = this.syncToFetchSize;
                }
                if (this.syncToFetchSizePeekNum != null) {
                    data.syncToFetchSizePeekNum = this.syncToFetchSizePeekNum;
                }
                if (this.syncBlockRequestedSize != null) {
                    data.syncBlockRequestedSize = this.syncBlockRequestedSize;
                }
                if (this.unFetchSynNum != null) {
                    data.unFetchSynNum = this.unFetchSynNum;
                }
                if (this.blockInPorcSize != null) {
                    data.blockInPorcSize = this.blockInPorcSize;
                }
                if (this.headBlockWeBothHave != null) {
                    data.headBlockWeBothHave = this.headBlockWeBothHave;
                }
                if (this.isActive != null) {
                    data.isActive = this.isActive;
                }
                if (this.score != null) {
                    data.score = this.score;
                }
                if (this.nodeCount != null) {
                    data.nodeCount = this.nodeCount;
                }
                if (this.inFlow != null) {
                    data.inFlow = this.inFlow;
                }
                if (this.disconnectTimes != null) {
                    data.disconnectTimes = this.disconnectTimes;
                }
                if (this.localDisconnectReason != null) {
                    data.localDisconnectReason = this.localDisconnectReason;
                }
                if (this.remoteDisconnectReason != null) {
                    data.remoteDisconnectReason = this.remoteDisconnectReason;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.lastSyncBlock.length)
                    writer.writeString(1, this.lastSyncBlock);
                if (this.remainNum != 0)
                    writer.writeInt64(2, this.remainNum);
                if (this.lastBlockUpdateTime != 0)
                    writer.writeInt64(3, this.lastBlockUpdateTime);
                if (this.syncFlag != false)
                    writer.writeBool(4, this.syncFlag);
                if (this.headBlockTimeWeBothHave != 0)
                    writer.writeInt64(5, this.headBlockTimeWeBothHave);
                if (this.needSyncFromPeer != false)
                    writer.writeBool(6, this.needSyncFromPeer);
                if (this.needSyncFromUs != false)
                    writer.writeBool(7, this.needSyncFromUs);
                if (this.host.length)
                    writer.writeString(8, this.host);
                if (this.port != 0)
                    writer.writeInt32(9, this.port);
                if (this.nodeId.length)
                    writer.writeString(10, this.nodeId);
                if (this.connectTime != 0)
                    writer.writeInt64(11, this.connectTime);
                if (this.avgLatency != 0)
                    writer.writeDouble(12, this.avgLatency);
                if (this.syncToFetchSize != 0)
                    writer.writeInt32(13, this.syncToFetchSize);
                if (this.syncToFetchSizePeekNum != 0)
                    writer.writeInt64(14, this.syncToFetchSizePeekNum);
                if (this.syncBlockRequestedSize != 0)
                    writer.writeInt32(15, this.syncBlockRequestedSize);
                if (this.unFetchSynNum != 0)
                    writer.writeInt64(16, this.unFetchSynNum);
                if (this.blockInPorcSize != 0)
                    writer.writeInt32(17, this.blockInPorcSize);
                if (this.headBlockWeBothHave.length)
                    writer.writeString(18, this.headBlockWeBothHave);
                if (this.isActive != false)
                    writer.writeBool(19, this.isActive);
                if (this.score != 0)
                    writer.writeInt32(20, this.score);
                if (this.nodeCount != 0)
                    writer.writeInt32(21, this.nodeCount);
                if (this.inFlow != 0)
                    writer.writeInt64(22, this.inFlow);
                if (this.disconnectTimes != 0)
                    writer.writeInt32(23, this.disconnectTimes);
                if (this.localDisconnectReason.length)
                    writer.writeString(24, this.localDisconnectReason);
                if (this.remoteDisconnectReason.length)
                    writer.writeString(25, this.remoteDisconnectReason);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PeerInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PeerInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.lastSyncBlock = reader.readString();
                            break;
                        case 2:
                            message.remainNum = reader.readInt64();
                            break;
                        case 3:
                            message.lastBlockUpdateTime = reader.readInt64();
                            break;
                        case 4:
                            message.syncFlag = reader.readBool();
                            break;
                        case 5:
                            message.headBlockTimeWeBothHave = reader.readInt64();
                            break;
                        case 6:
                            message.needSyncFromPeer = reader.readBool();
                            break;
                        case 7:
                            message.needSyncFromUs = reader.readBool();
                            break;
                        case 8:
                            message.host = reader.readString();
                            break;
                        case 9:
                            message.port = reader.readInt32();
                            break;
                        case 10:
                            message.nodeId = reader.readString();
                            break;
                        case 11:
                            message.connectTime = reader.readInt64();
                            break;
                        case 12:
                            message.avgLatency = reader.readDouble();
                            break;
                        case 13:
                            message.syncToFetchSize = reader.readInt32();
                            break;
                        case 14:
                            message.syncToFetchSizePeekNum = reader.readInt64();
                            break;
                        case 15:
                            message.syncBlockRequestedSize = reader.readInt32();
                            break;
                        case 16:
                            message.unFetchSynNum = reader.readInt64();
                            break;
                        case 17:
                            message.blockInPorcSize = reader.readInt32();
                            break;
                        case 18:
                            message.headBlockWeBothHave = reader.readString();
                            break;
                        case 19:
                            message.isActive = reader.readBool();
                            break;
                        case 20:
                            message.score = reader.readInt32();
                            break;
                        case 21:
                            message.nodeCount = reader.readInt32();
                            break;
                        case 22:
                            message.inFlow = reader.readInt64();
                            break;
                        case 23:
                            message.disconnectTimes = reader.readInt32();
                            break;
                        case 24:
                            message.localDisconnectReason = reader.readString();
                            break;
                        case 25:
                            message.remoteDisconnectReason = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PeerInfo {
                return PeerInfo.deserialize(bytes);
            }
        }
        export class ConfigNodeInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                codeVersion?: string;
                p2pVersion?: string;
                listenPort?: number;
                discoverEnable?: boolean;
                activeNodeSize?: number;
                passiveNodeSize?: number;
                sendNodeSize?: number;
                maxConnectCount?: number;
                sameIpMaxConnectCount?: number;
                backupListenPort?: number;
                backupMemberSize?: number;
                backupPriority?: number;
                dbVersion?: number;
                minParticipationRate?: number;
                supportConstant?: boolean;
                minTimeRatio?: number;
                maxTimeRatio?: number;
                allowCreationOfContracts?: number;
                allowAdaptiveEnergy?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("codeVersion" in data && data.codeVersion != undefined) {
                        this.codeVersion = data.codeVersion;
                    }
                    if ("p2pVersion" in data && data.p2pVersion != undefined) {
                        this.p2pVersion = data.p2pVersion;
                    }
                    if ("listenPort" in data && data.listenPort != undefined) {
                        this.listenPort = data.listenPort;
                    }
                    if ("discoverEnable" in data && data.discoverEnable != undefined) {
                        this.discoverEnable = data.discoverEnable;
                    }
                    if ("activeNodeSize" in data && data.activeNodeSize != undefined) {
                        this.activeNodeSize = data.activeNodeSize;
                    }
                    if ("passiveNodeSize" in data && data.passiveNodeSize != undefined) {
                        this.passiveNodeSize = data.passiveNodeSize;
                    }
                    if ("sendNodeSize" in data && data.sendNodeSize != undefined) {
                        this.sendNodeSize = data.sendNodeSize;
                    }
                    if ("maxConnectCount" in data && data.maxConnectCount != undefined) {
                        this.maxConnectCount = data.maxConnectCount;
                    }
                    if ("sameIpMaxConnectCount" in data && data.sameIpMaxConnectCount != undefined) {
                        this.sameIpMaxConnectCount = data.sameIpMaxConnectCount;
                    }
                    if ("backupListenPort" in data && data.backupListenPort != undefined) {
                        this.backupListenPort = data.backupListenPort;
                    }
                    if ("backupMemberSize" in data && data.backupMemberSize != undefined) {
                        this.backupMemberSize = data.backupMemberSize;
                    }
                    if ("backupPriority" in data && data.backupPriority != undefined) {
                        this.backupPriority = data.backupPriority;
                    }
                    if ("dbVersion" in data && data.dbVersion != undefined) {
                        this.dbVersion = data.dbVersion;
                    }
                    if ("minParticipationRate" in data && data.minParticipationRate != undefined) {
                        this.minParticipationRate = data.minParticipationRate;
                    }
                    if ("supportConstant" in data && data.supportConstant != undefined) {
                        this.supportConstant = data.supportConstant;
                    }
                    if ("minTimeRatio" in data && data.minTimeRatio != undefined) {
                        this.minTimeRatio = data.minTimeRatio;
                    }
                    if ("maxTimeRatio" in data && data.maxTimeRatio != undefined) {
                        this.maxTimeRatio = data.maxTimeRatio;
                    }
                    if ("allowCreationOfContracts" in data && data.allowCreationOfContracts != undefined) {
                        this.allowCreationOfContracts = data.allowCreationOfContracts;
                    }
                    if ("allowAdaptiveEnergy" in data && data.allowAdaptiveEnergy != undefined) {
                        this.allowAdaptiveEnergy = data.allowAdaptiveEnergy;
                    }
                }
            }
            get codeVersion() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set codeVersion(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get p2pVersion() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set p2pVersion(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get listenPort() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set listenPort(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get discoverEnable() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set discoverEnable(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get activeNodeSize() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set activeNodeSize(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get passiveNodeSize() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set passiveNodeSize(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get sendNodeSize() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set sendNodeSize(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get maxConnectCount() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set maxConnectCount(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get sameIpMaxConnectCount() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set sameIpMaxConnectCount(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get backupListenPort() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set backupListenPort(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get backupMemberSize() {
                return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
            }
            set backupMemberSize(value: number) {
                pb_1.Message.setField(this, 11, value);
            }
            get backupPriority() {
                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
            }
            set backupPriority(value: number) {
                pb_1.Message.setField(this, 12, value);
            }
            get dbVersion() {
                return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
            }
            set dbVersion(value: number) {
                pb_1.Message.setField(this, 13, value);
            }
            get minParticipationRate() {
                return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
            }
            set minParticipationRate(value: number) {
                pb_1.Message.setField(this, 14, value);
            }
            get supportConstant() {
                return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
            }
            set supportConstant(value: boolean) {
                pb_1.Message.setField(this, 15, value);
            }
            get minTimeRatio() {
                return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
            }
            set minTimeRatio(value: number) {
                pb_1.Message.setField(this, 16, value);
            }
            get maxTimeRatio() {
                return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
            }
            set maxTimeRatio(value: number) {
                pb_1.Message.setField(this, 17, value);
            }
            get allowCreationOfContracts() {
                return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
            }
            set allowCreationOfContracts(value: number) {
                pb_1.Message.setField(this, 18, value);
            }
            get allowAdaptiveEnergy() {
                return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
            }
            set allowAdaptiveEnergy(value: number) {
                pb_1.Message.setField(this, 19, value);
            }
            static fromObject(data: {
                codeVersion?: string;
                p2pVersion?: string;
                listenPort?: number;
                discoverEnable?: boolean;
                activeNodeSize?: number;
                passiveNodeSize?: number;
                sendNodeSize?: number;
                maxConnectCount?: number;
                sameIpMaxConnectCount?: number;
                backupListenPort?: number;
                backupMemberSize?: number;
                backupPriority?: number;
                dbVersion?: number;
                minParticipationRate?: number;
                supportConstant?: boolean;
                minTimeRatio?: number;
                maxTimeRatio?: number;
                allowCreationOfContracts?: number;
                allowAdaptiveEnergy?: number;
            }): ConfigNodeInfo {
                const message = new ConfigNodeInfo({});
                if (data.codeVersion != null) {
                    message.codeVersion = data.codeVersion;
                }
                if (data.p2pVersion != null) {
                    message.p2pVersion = data.p2pVersion;
                }
                if (data.listenPort != null) {
                    message.listenPort = data.listenPort;
                }
                if (data.discoverEnable != null) {
                    message.discoverEnable = data.discoverEnable;
                }
                if (data.activeNodeSize != null) {
                    message.activeNodeSize = data.activeNodeSize;
                }
                if (data.passiveNodeSize != null) {
                    message.passiveNodeSize = data.passiveNodeSize;
                }
                if (data.sendNodeSize != null) {
                    message.sendNodeSize = data.sendNodeSize;
                }
                if (data.maxConnectCount != null) {
                    message.maxConnectCount = data.maxConnectCount;
                }
                if (data.sameIpMaxConnectCount != null) {
                    message.sameIpMaxConnectCount = data.sameIpMaxConnectCount;
                }
                if (data.backupListenPort != null) {
                    message.backupListenPort = data.backupListenPort;
                }
                if (data.backupMemberSize != null) {
                    message.backupMemberSize = data.backupMemberSize;
                }
                if (data.backupPriority != null) {
                    message.backupPriority = data.backupPriority;
                }
                if (data.dbVersion != null) {
                    message.dbVersion = data.dbVersion;
                }
                if (data.minParticipationRate != null) {
                    message.minParticipationRate = data.minParticipationRate;
                }
                if (data.supportConstant != null) {
                    message.supportConstant = data.supportConstant;
                }
                if (data.minTimeRatio != null) {
                    message.minTimeRatio = data.minTimeRatio;
                }
                if (data.maxTimeRatio != null) {
                    message.maxTimeRatio = data.maxTimeRatio;
                }
                if (data.allowCreationOfContracts != null) {
                    message.allowCreationOfContracts = data.allowCreationOfContracts;
                }
                if (data.allowAdaptiveEnergy != null) {
                    message.allowAdaptiveEnergy = data.allowAdaptiveEnergy;
                }
                return message;
            }
            toObject() {
                const data: {
                    codeVersion?: string;
                    p2pVersion?: string;
                    listenPort?: number;
                    discoverEnable?: boolean;
                    activeNodeSize?: number;
                    passiveNodeSize?: number;
                    sendNodeSize?: number;
                    maxConnectCount?: number;
                    sameIpMaxConnectCount?: number;
                    backupListenPort?: number;
                    backupMemberSize?: number;
                    backupPriority?: number;
                    dbVersion?: number;
                    minParticipationRate?: number;
                    supportConstant?: boolean;
                    minTimeRatio?: number;
                    maxTimeRatio?: number;
                    allowCreationOfContracts?: number;
                    allowAdaptiveEnergy?: number;
                } = {};
                if (this.codeVersion != null) {
                    data.codeVersion = this.codeVersion;
                }
                if (this.p2pVersion != null) {
                    data.p2pVersion = this.p2pVersion;
                }
                if (this.listenPort != null) {
                    data.listenPort = this.listenPort;
                }
                if (this.discoverEnable != null) {
                    data.discoverEnable = this.discoverEnable;
                }
                if (this.activeNodeSize != null) {
                    data.activeNodeSize = this.activeNodeSize;
                }
                if (this.passiveNodeSize != null) {
                    data.passiveNodeSize = this.passiveNodeSize;
                }
                if (this.sendNodeSize != null) {
                    data.sendNodeSize = this.sendNodeSize;
                }
                if (this.maxConnectCount != null) {
                    data.maxConnectCount = this.maxConnectCount;
                }
                if (this.sameIpMaxConnectCount != null) {
                    data.sameIpMaxConnectCount = this.sameIpMaxConnectCount;
                }
                if (this.backupListenPort != null) {
                    data.backupListenPort = this.backupListenPort;
                }
                if (this.backupMemberSize != null) {
                    data.backupMemberSize = this.backupMemberSize;
                }
                if (this.backupPriority != null) {
                    data.backupPriority = this.backupPriority;
                }
                if (this.dbVersion != null) {
                    data.dbVersion = this.dbVersion;
                }
                if (this.minParticipationRate != null) {
                    data.minParticipationRate = this.minParticipationRate;
                }
                if (this.supportConstant != null) {
                    data.supportConstant = this.supportConstant;
                }
                if (this.minTimeRatio != null) {
                    data.minTimeRatio = this.minTimeRatio;
                }
                if (this.maxTimeRatio != null) {
                    data.maxTimeRatio = this.maxTimeRatio;
                }
                if (this.allowCreationOfContracts != null) {
                    data.allowCreationOfContracts = this.allowCreationOfContracts;
                }
                if (this.allowAdaptiveEnergy != null) {
                    data.allowAdaptiveEnergy = this.allowAdaptiveEnergy;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.codeVersion.length)
                    writer.writeString(1, this.codeVersion);
                if (this.p2pVersion.length)
                    writer.writeString(2, this.p2pVersion);
                if (this.listenPort != 0)
                    writer.writeInt32(3, this.listenPort);
                if (this.discoverEnable != false)
                    writer.writeBool(4, this.discoverEnable);
                if (this.activeNodeSize != 0)
                    writer.writeInt32(5, this.activeNodeSize);
                if (this.passiveNodeSize != 0)
                    writer.writeInt32(6, this.passiveNodeSize);
                if (this.sendNodeSize != 0)
                    writer.writeInt32(7, this.sendNodeSize);
                if (this.maxConnectCount != 0)
                    writer.writeInt32(8, this.maxConnectCount);
                if (this.sameIpMaxConnectCount != 0)
                    writer.writeInt32(9, this.sameIpMaxConnectCount);
                if (this.backupListenPort != 0)
                    writer.writeInt32(10, this.backupListenPort);
                if (this.backupMemberSize != 0)
                    writer.writeInt32(11, this.backupMemberSize);
                if (this.backupPriority != 0)
                    writer.writeInt32(12, this.backupPriority);
                if (this.dbVersion != 0)
                    writer.writeInt32(13, this.dbVersion);
                if (this.minParticipationRate != 0)
                    writer.writeInt32(14, this.minParticipationRate);
                if (this.supportConstant != false)
                    writer.writeBool(15, this.supportConstant);
                if (this.minTimeRatio != 0)
                    writer.writeDouble(16, this.minTimeRatio);
                if (this.maxTimeRatio != 0)
                    writer.writeDouble(17, this.maxTimeRatio);
                if (this.allowCreationOfContracts != 0)
                    writer.writeInt64(18, this.allowCreationOfContracts);
                if (this.allowAdaptiveEnergy != 0)
                    writer.writeInt64(19, this.allowAdaptiveEnergy);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigNodeInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigNodeInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.codeVersion = reader.readString();
                            break;
                        case 2:
                            message.p2pVersion = reader.readString();
                            break;
                        case 3:
                            message.listenPort = reader.readInt32();
                            break;
                        case 4:
                            message.discoverEnable = reader.readBool();
                            break;
                        case 5:
                            message.activeNodeSize = reader.readInt32();
                            break;
                        case 6:
                            message.passiveNodeSize = reader.readInt32();
                            break;
                        case 7:
                            message.sendNodeSize = reader.readInt32();
                            break;
                        case 8:
                            message.maxConnectCount = reader.readInt32();
                            break;
                        case 9:
                            message.sameIpMaxConnectCount = reader.readInt32();
                            break;
                        case 10:
                            message.backupListenPort = reader.readInt32();
                            break;
                        case 11:
                            message.backupMemberSize = reader.readInt32();
                            break;
                        case 12:
                            message.backupPriority = reader.readInt32();
                            break;
                        case 13:
                            message.dbVersion = reader.readInt32();
                            break;
                        case 14:
                            message.minParticipationRate = reader.readInt32();
                            break;
                        case 15:
                            message.supportConstant = reader.readBool();
                            break;
                        case 16:
                            message.minTimeRatio = reader.readDouble();
                            break;
                        case 17:
                            message.maxTimeRatio = reader.readDouble();
                            break;
                        case 18:
                            message.allowCreationOfContracts = reader.readInt64();
                            break;
                        case 19:
                            message.allowAdaptiveEnergy = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ConfigNodeInfo {
                return ConfigNodeInfo.deserialize(bytes);
            }
        }
        export class MachineInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                threadCount?: number;
                deadLockThreadCount?: number;
                cpuCount?: number;
                totalMemory?: number;
                freeMemory?: number;
                cpuRate?: number;
                javaVersion?: string;
                osName?: string;
                jvmTotalMemory?: number;
                jvmFreeMemory?: number;
                processCpuRate?: number;
                memoryDescInfoList?: NodeInfo.MachineInfo.MemoryDescInfo[];
                deadLockThreadInfoList?: NodeInfo.MachineInfo.DeadLockThreadInfo[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [12, 13], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("threadCount" in data && data.threadCount != undefined) {
                        this.threadCount = data.threadCount;
                    }
                    if ("deadLockThreadCount" in data && data.deadLockThreadCount != undefined) {
                        this.deadLockThreadCount = data.deadLockThreadCount;
                    }
                    if ("cpuCount" in data && data.cpuCount != undefined) {
                        this.cpuCount = data.cpuCount;
                    }
                    if ("totalMemory" in data && data.totalMemory != undefined) {
                        this.totalMemory = data.totalMemory;
                    }
                    if ("freeMemory" in data && data.freeMemory != undefined) {
                        this.freeMemory = data.freeMemory;
                    }
                    if ("cpuRate" in data && data.cpuRate != undefined) {
                        this.cpuRate = data.cpuRate;
                    }
                    if ("javaVersion" in data && data.javaVersion != undefined) {
                        this.javaVersion = data.javaVersion;
                    }
                    if ("osName" in data && data.osName != undefined) {
                        this.osName = data.osName;
                    }
                    if ("jvmTotalMemory" in data && data.jvmTotalMemory != undefined) {
                        this.jvmTotalMemory = data.jvmTotalMemory;
                    }
                    if ("jvmFreeMemory" in data && data.jvmFreeMemory != undefined) {
                        this.jvmFreeMemory = data.jvmFreeMemory;
                    }
                    if ("processCpuRate" in data && data.processCpuRate != undefined) {
                        this.processCpuRate = data.processCpuRate;
                    }
                    if ("memoryDescInfoList" in data && data.memoryDescInfoList != undefined) {
                        this.memoryDescInfoList = data.memoryDescInfoList;
                    }
                    if ("deadLockThreadInfoList" in data && data.deadLockThreadInfoList != undefined) {
                        this.deadLockThreadInfoList = data.deadLockThreadInfoList;
                    }
                }
            }
            get threadCount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set threadCount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get deadLockThreadCount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set deadLockThreadCount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get cpuCount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set cpuCount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get totalMemory() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set totalMemory(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get freeMemory() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set freeMemory(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get cpuRate() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set cpuRate(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get javaVersion() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }
            set javaVersion(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            get osName() {
                return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
            }
            set osName(value: string) {
                pb_1.Message.setField(this, 8, value);
            }
            get jvmTotalMemory() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set jvmTotalMemory(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get jvmFreeMemory() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set jvmFreeMemory(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get processCpuRate() {
                return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
            }
            set processCpuRate(value: number) {
                pb_1.Message.setField(this, 11, value);
            }
            get memoryDescInfoList() {
                return pb_1.Message.getRepeatedWrapperField(this, NodeInfo.MachineInfo.MemoryDescInfo, 12) as NodeInfo.MachineInfo.MemoryDescInfo[];
            }
            set memoryDescInfoList(value: NodeInfo.MachineInfo.MemoryDescInfo[]) {
                pb_1.Message.setRepeatedWrapperField(this, 12, value);
            }
            get deadLockThreadInfoList() {
                return pb_1.Message.getRepeatedWrapperField(this, NodeInfo.MachineInfo.DeadLockThreadInfo, 13) as NodeInfo.MachineInfo.DeadLockThreadInfo[];
            }
            set deadLockThreadInfoList(value: NodeInfo.MachineInfo.DeadLockThreadInfo[]) {
                pb_1.Message.setRepeatedWrapperField(this, 13, value);
            }
            static fromObject(data: {
                threadCount?: number;
                deadLockThreadCount?: number;
                cpuCount?: number;
                totalMemory?: number;
                freeMemory?: number;
                cpuRate?: number;
                javaVersion?: string;
                osName?: string;
                jvmTotalMemory?: number;
                jvmFreeMemory?: number;
                processCpuRate?: number;
                memoryDescInfoList?: ReturnType<typeof NodeInfo.MachineInfo.MemoryDescInfo.prototype.toObject>[];
                deadLockThreadInfoList?: ReturnType<typeof NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.toObject>[];
            }): MachineInfo {
                const message = new MachineInfo({});
                if (data.threadCount != null) {
                    message.threadCount = data.threadCount;
                }
                if (data.deadLockThreadCount != null) {
                    message.deadLockThreadCount = data.deadLockThreadCount;
                }
                if (data.cpuCount != null) {
                    message.cpuCount = data.cpuCount;
                }
                if (data.totalMemory != null) {
                    message.totalMemory = data.totalMemory;
                }
                if (data.freeMemory != null) {
                    message.freeMemory = data.freeMemory;
                }
                if (data.cpuRate != null) {
                    message.cpuRate = data.cpuRate;
                }
                if (data.javaVersion != null) {
                    message.javaVersion = data.javaVersion;
                }
                if (data.osName != null) {
                    message.osName = data.osName;
                }
                if (data.jvmTotalMemory != null) {
                    message.jvmTotalMemory = data.jvmTotalMemory;
                }
                if (data.jvmFreeMemory != null) {
                    message.jvmFreeMemory = data.jvmFreeMemory;
                }
                if (data.processCpuRate != null) {
                    message.processCpuRate = data.processCpuRate;
                }
                if (data.memoryDescInfoList != null) {
                    message.memoryDescInfoList = data.memoryDescInfoList.map(item => NodeInfo.MachineInfo.MemoryDescInfo.fromObject(item));
                }
                if (data.deadLockThreadInfoList != null) {
                    message.deadLockThreadInfoList = data.deadLockThreadInfoList.map(item => NodeInfo.MachineInfo.DeadLockThreadInfo.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    threadCount?: number;
                    deadLockThreadCount?: number;
                    cpuCount?: number;
                    totalMemory?: number;
                    freeMemory?: number;
                    cpuRate?: number;
                    javaVersion?: string;
                    osName?: string;
                    jvmTotalMemory?: number;
                    jvmFreeMemory?: number;
                    processCpuRate?: number;
                    memoryDescInfoList?: ReturnType<typeof NodeInfo.MachineInfo.MemoryDescInfo.prototype.toObject>[];
                    deadLockThreadInfoList?: ReturnType<typeof NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.toObject>[];
                } = {};
                if (this.threadCount != null) {
                    data.threadCount = this.threadCount;
                }
                if (this.deadLockThreadCount != null) {
                    data.deadLockThreadCount = this.deadLockThreadCount;
                }
                if (this.cpuCount != null) {
                    data.cpuCount = this.cpuCount;
                }
                if (this.totalMemory != null) {
                    data.totalMemory = this.totalMemory;
                }
                if (this.freeMemory != null) {
                    data.freeMemory = this.freeMemory;
                }
                if (this.cpuRate != null) {
                    data.cpuRate = this.cpuRate;
                }
                if (this.javaVersion != null) {
                    data.javaVersion = this.javaVersion;
                }
                if (this.osName != null) {
                    data.osName = this.osName;
                }
                if (this.jvmTotalMemory != null) {
                    data.jvmTotalMemory = this.jvmTotalMemory;
                }
                if (this.jvmFreeMemory != null) {
                    data.jvmFreeMemory = this.jvmFreeMemory;
                }
                if (this.processCpuRate != null) {
                    data.processCpuRate = this.processCpuRate;
                }
                if (this.memoryDescInfoList != null) {
                    data.memoryDescInfoList = this.memoryDescInfoList.map((item: NodeInfo.MachineInfo.MemoryDescInfo) => item.toObject());
                }
                if (this.deadLockThreadInfoList != null) {
                    data.deadLockThreadInfoList = this.deadLockThreadInfoList.map((item: NodeInfo.MachineInfo.DeadLockThreadInfo) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.threadCount != 0)
                    writer.writeInt32(1, this.threadCount);
                if (this.deadLockThreadCount != 0)
                    writer.writeInt32(2, this.deadLockThreadCount);
                if (this.cpuCount != 0)
                    writer.writeInt32(3, this.cpuCount);
                if (this.totalMemory != 0)
                    writer.writeInt64(4, this.totalMemory);
                if (this.freeMemory != 0)
                    writer.writeInt64(5, this.freeMemory);
                if (this.cpuRate != 0)
                    writer.writeDouble(6, this.cpuRate);
                if (this.javaVersion.length)
                    writer.writeString(7, this.javaVersion);
                if (this.osName.length)
                    writer.writeString(8, this.osName);
                if (this.jvmTotalMemory != 0)
                    writer.writeInt64(9, this.jvmTotalMemory);
                if (this.jvmFreeMemory != 0)
                    writer.writeInt64(10, this.jvmFreeMemory);
                if (this.processCpuRate != 0)
                    writer.writeDouble(11, this.processCpuRate);
                if (this.memoryDescInfoList.length)
                    writer.writeRepeatedMessage(12, this.memoryDescInfoList, (item: NodeInfo.MachineInfo.MemoryDescInfo) => item.serialize(writer));
                if (this.deadLockThreadInfoList.length)
                    writer.writeRepeatedMessage(13, this.deadLockThreadInfoList, (item: NodeInfo.MachineInfo.DeadLockThreadInfo) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MachineInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MachineInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.threadCount = reader.readInt32();
                            break;
                        case 2:
                            message.deadLockThreadCount = reader.readInt32();
                            break;
                        case 3:
                            message.cpuCount = reader.readInt32();
                            break;
                        case 4:
                            message.totalMemory = reader.readInt64();
                            break;
                        case 5:
                            message.freeMemory = reader.readInt64();
                            break;
                        case 6:
                            message.cpuRate = reader.readDouble();
                            break;
                        case 7:
                            message.javaVersion = reader.readString();
                            break;
                        case 8:
                            message.osName = reader.readString();
                            break;
                        case 9:
                            message.jvmTotalMemory = reader.readInt64();
                            break;
                        case 10:
                            message.jvmFreeMemory = reader.readInt64();
                            break;
                        case 11:
                            message.processCpuRate = reader.readDouble();
                            break;
                        case 12:
                            reader.readMessage(message.memoryDescInfoList, () => pb_1.Message.addToRepeatedWrapperField(message, 12, NodeInfo.MachineInfo.MemoryDescInfo.deserialize(reader), NodeInfo.MachineInfo.MemoryDescInfo));
                            break;
                        case 13:
                            reader.readMessage(message.deadLockThreadInfoList, () => pb_1.Message.addToRepeatedWrapperField(message, 13, NodeInfo.MachineInfo.DeadLockThreadInfo.deserialize(reader), NodeInfo.MachineInfo.DeadLockThreadInfo));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MachineInfo {
                return MachineInfo.deserialize(bytes);
            }
        }
        export namespace MachineInfo {
            export class MemoryDescInfo extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    name?: string;
                    initSize?: number;
                    useSize?: number;
                    maxSize?: number;
                    useRate?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("name" in data && data.name != undefined) {
                            this.name = data.name;
                        }
                        if ("initSize" in data && data.initSize != undefined) {
                            this.initSize = data.initSize;
                        }
                        if ("useSize" in data && data.useSize != undefined) {
                            this.useSize = data.useSize;
                        }
                        if ("maxSize" in data && data.maxSize != undefined) {
                            this.maxSize = data.maxSize;
                        }
                        if ("useRate" in data && data.useRate != undefined) {
                            this.useRate = data.useRate;
                        }
                    }
                }
                get name() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set name(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get initSize() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set initSize(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get useSize() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }
                set useSize(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }
                get maxSize() {
                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                }
                set maxSize(value: number) {
                    pb_1.Message.setField(this, 4, value);
                }
                get useRate() {
                    return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
                }
                set useRate(value: number) {
                    pb_1.Message.setField(this, 5, value);
                }
                static fromObject(data: {
                    name?: string;
                    initSize?: number;
                    useSize?: number;
                    maxSize?: number;
                    useRate?: number;
                }): MemoryDescInfo {
                    const message = new MemoryDescInfo({});
                    if (data.name != null) {
                        message.name = data.name;
                    }
                    if (data.initSize != null) {
                        message.initSize = data.initSize;
                    }
                    if (data.useSize != null) {
                        message.useSize = data.useSize;
                    }
                    if (data.maxSize != null) {
                        message.maxSize = data.maxSize;
                    }
                    if (data.useRate != null) {
                        message.useRate = data.useRate;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        name?: string;
                        initSize?: number;
                        useSize?: number;
                        maxSize?: number;
                        useRate?: number;
                    } = {};
                    if (this.name != null) {
                        data.name = this.name;
                    }
                    if (this.initSize != null) {
                        data.initSize = this.initSize;
                    }
                    if (this.useSize != null) {
                        data.useSize = this.useSize;
                    }
                    if (this.maxSize != null) {
                        data.maxSize = this.maxSize;
                    }
                    if (this.useRate != null) {
                        data.useRate = this.useRate;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.name.length)
                        writer.writeString(1, this.name);
                    if (this.initSize != 0)
                        writer.writeInt64(2, this.initSize);
                    if (this.useSize != 0)
                        writer.writeInt64(3, this.useSize);
                    if (this.maxSize != 0)
                        writer.writeInt64(4, this.maxSize);
                    if (this.useRate != 0)
                        writer.writeDouble(5, this.useRate);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemoryDescInfo {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemoryDescInfo();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.name = reader.readString();
                                break;
                            case 2:
                                message.initSize = reader.readInt64();
                                break;
                            case 3:
                                message.useSize = reader.readInt64();
                                break;
                            case 4:
                                message.maxSize = reader.readInt64();
                                break;
                            case 5:
                                message.useRate = reader.readDouble();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): MemoryDescInfo {
                    return MemoryDescInfo.deserialize(bytes);
                }
            }
            export class DeadLockThreadInfo extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    name?: string;
                    lockName?: string;
                    lockOwner?: string;
                    state?: string;
                    blockTime?: number;
                    waitTime?: number;
                    stackTrace?: string;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("name" in data && data.name != undefined) {
                            this.name = data.name;
                        }
                        if ("lockName" in data && data.lockName != undefined) {
                            this.lockName = data.lockName;
                        }
                        if ("lockOwner" in data && data.lockOwner != undefined) {
                            this.lockOwner = data.lockOwner;
                        }
                        if ("state" in data && data.state != undefined) {
                            this.state = data.state;
                        }
                        if ("blockTime" in data && data.blockTime != undefined) {
                            this.blockTime = data.blockTime;
                        }
                        if ("waitTime" in data && data.waitTime != undefined) {
                            this.waitTime = data.waitTime;
                        }
                        if ("stackTrace" in data && data.stackTrace != undefined) {
                            this.stackTrace = data.stackTrace;
                        }
                    }
                }
                get name() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set name(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get lockName() {
                    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
                }
                set lockName(value: string) {
                    pb_1.Message.setField(this, 2, value);
                }
                get lockOwner() {
                    return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
                }
                set lockOwner(value: string) {
                    pb_1.Message.setField(this, 3, value);
                }
                get state() {
                    return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
                }
                set state(value: string) {
                    pb_1.Message.setField(this, 4, value);
                }
                get blockTime() {
                    return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
                }
                set blockTime(value: number) {
                    pb_1.Message.setField(this, 5, value);
                }
                get waitTime() {
                    return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
                }
                set waitTime(value: number) {
                    pb_1.Message.setField(this, 6, value);
                }
                get stackTrace() {
                    return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
                }
                set stackTrace(value: string) {
                    pb_1.Message.setField(this, 7, value);
                }
                static fromObject(data: {
                    name?: string;
                    lockName?: string;
                    lockOwner?: string;
                    state?: string;
                    blockTime?: number;
                    waitTime?: number;
                    stackTrace?: string;
                }): DeadLockThreadInfo {
                    const message = new DeadLockThreadInfo({});
                    if (data.name != null) {
                        message.name = data.name;
                    }
                    if (data.lockName != null) {
                        message.lockName = data.lockName;
                    }
                    if (data.lockOwner != null) {
                        message.lockOwner = data.lockOwner;
                    }
                    if (data.state != null) {
                        message.state = data.state;
                    }
                    if (data.blockTime != null) {
                        message.blockTime = data.blockTime;
                    }
                    if (data.waitTime != null) {
                        message.waitTime = data.waitTime;
                    }
                    if (data.stackTrace != null) {
                        message.stackTrace = data.stackTrace;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        name?: string;
                        lockName?: string;
                        lockOwner?: string;
                        state?: string;
                        blockTime?: number;
                        waitTime?: number;
                        stackTrace?: string;
                    } = {};
                    if (this.name != null) {
                        data.name = this.name;
                    }
                    if (this.lockName != null) {
                        data.lockName = this.lockName;
                    }
                    if (this.lockOwner != null) {
                        data.lockOwner = this.lockOwner;
                    }
                    if (this.state != null) {
                        data.state = this.state;
                    }
                    if (this.blockTime != null) {
                        data.blockTime = this.blockTime;
                    }
                    if (this.waitTime != null) {
                        data.waitTime = this.waitTime;
                    }
                    if (this.stackTrace != null) {
                        data.stackTrace = this.stackTrace;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.name.length)
                        writer.writeString(1, this.name);
                    if (this.lockName.length)
                        writer.writeString(2, this.lockName);
                    if (this.lockOwner.length)
                        writer.writeString(3, this.lockOwner);
                    if (this.state.length)
                        writer.writeString(4, this.state);
                    if (this.blockTime != 0)
                        writer.writeInt64(5, this.blockTime);
                    if (this.waitTime != 0)
                        writer.writeInt64(6, this.waitTime);
                    if (this.stackTrace.length)
                        writer.writeString(7, this.stackTrace);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeadLockThreadInfo {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeadLockThreadInfo();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.name = reader.readString();
                                break;
                            case 2:
                                message.lockName = reader.readString();
                                break;
                            case 3:
                                message.lockOwner = reader.readString();
                                break;
                            case 4:
                                message.state = reader.readString();
                                break;
                            case 5:
                                message.blockTime = reader.readInt64();
                                break;
                            case 6:
                                message.waitTime = reader.readInt64();
                                break;
                            case 7:
                                message.stackTrace = reader.readString();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): DeadLockThreadInfo {
                    return DeadLockThreadInfo.deserialize(bytes);
                }
            }
        }
    }
    export class MetricsInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            interval?: number;
            node?: MetricsInfo.NodeInfo;
            blockchain?: MetricsInfo.BlockChainInfo;
            net?: MetricsInfo.NetInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("interval" in data && data.interval != undefined) {
                    this.interval = data.interval;
                }
                if ("node" in data && data.node != undefined) {
                    this.node = data.node;
                }
                if ("blockchain" in data && data.blockchain != undefined) {
                    this.blockchain = data.blockchain;
                }
                if ("net" in data && data.net != undefined) {
                    this.net = data.net;
                }
            }
        }
        get interval() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set interval(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get node() {
            return pb_1.Message.getWrapperField(this, MetricsInfo.NodeInfo, 2) as MetricsInfo.NodeInfo;
        }
        set node(value: MetricsInfo.NodeInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_node() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get blockchain() {
            return pb_1.Message.getWrapperField(this, MetricsInfo.BlockChainInfo, 3) as MetricsInfo.BlockChainInfo;
        }
        set blockchain(value: MetricsInfo.BlockChainInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_blockchain() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get net() {
            return pb_1.Message.getWrapperField(this, MetricsInfo.NetInfo, 4) as MetricsInfo.NetInfo;
        }
        set net(value: MetricsInfo.NetInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_net() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            interval?: number;
            node?: ReturnType<typeof MetricsInfo.NodeInfo.prototype.toObject>;
            blockchain?: ReturnType<typeof MetricsInfo.BlockChainInfo.prototype.toObject>;
            net?: ReturnType<typeof MetricsInfo.NetInfo.prototype.toObject>;
        }): MetricsInfo {
            const message = new MetricsInfo({});
            if (data.interval != null) {
                message.interval = data.interval;
            }
            if (data.node != null) {
                message.node = MetricsInfo.NodeInfo.fromObject(data.node);
            }
            if (data.blockchain != null) {
                message.blockchain = MetricsInfo.BlockChainInfo.fromObject(data.blockchain);
            }
            if (data.net != null) {
                message.net = MetricsInfo.NetInfo.fromObject(data.net);
            }
            return message;
        }
        toObject() {
            const data: {
                interval?: number;
                node?: ReturnType<typeof MetricsInfo.NodeInfo.prototype.toObject>;
                blockchain?: ReturnType<typeof MetricsInfo.BlockChainInfo.prototype.toObject>;
                net?: ReturnType<typeof MetricsInfo.NetInfo.prototype.toObject>;
            } = {};
            if (this.interval != null) {
                data.interval = this.interval;
            }
            if (this.node != null) {
                data.node = this.node.toObject();
            }
            if (this.blockchain != null) {
                data.blockchain = this.blockchain.toObject();
            }
            if (this.net != null) {
                data.net = this.net.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.interval != 0)
                writer.writeInt64(1, this.interval);
            if (this.has_node)
                writer.writeMessage(2, this.node, () => this.node.serialize(writer));
            if (this.has_blockchain)
                writer.writeMessage(3, this.blockchain, () => this.blockchain.serialize(writer));
            if (this.has_net)
                writer.writeMessage(4, this.net, () => this.net.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MetricsInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MetricsInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.interval = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.node, () => message.node = MetricsInfo.NodeInfo.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.blockchain, () => message.blockchain = MetricsInfo.BlockChainInfo.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.net, () => message.net = MetricsInfo.NetInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MetricsInfo {
            return MetricsInfo.deserialize(bytes);
        }
    }
    export namespace MetricsInfo {
        export class NodeInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                ip?: string;
                nodeType?: number;
                version?: string;
                backupStatus?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("ip" in data && data.ip != undefined) {
                        this.ip = data.ip;
                    }
                    if ("nodeType" in data && data.nodeType != undefined) {
                        this.nodeType = data.nodeType;
                    }
                    if ("version" in data && data.version != undefined) {
                        this.version = data.version;
                    }
                    if ("backupStatus" in data && data.backupStatus != undefined) {
                        this.backupStatus = data.backupStatus;
                    }
                }
            }
            get ip() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set ip(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get nodeType() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set nodeType(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get version() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set version(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get backupStatus() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set backupStatus(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                ip?: string;
                nodeType?: number;
                version?: string;
                backupStatus?: number;
            }): NodeInfo {
                const message = new NodeInfo({});
                if (data.ip != null) {
                    message.ip = data.ip;
                }
                if (data.nodeType != null) {
                    message.nodeType = data.nodeType;
                }
                if (data.version != null) {
                    message.version = data.version;
                }
                if (data.backupStatus != null) {
                    message.backupStatus = data.backupStatus;
                }
                return message;
            }
            toObject() {
                const data: {
                    ip?: string;
                    nodeType?: number;
                    version?: string;
                    backupStatus?: number;
                } = {};
                if (this.ip != null) {
                    data.ip = this.ip;
                }
                if (this.nodeType != null) {
                    data.nodeType = this.nodeType;
                }
                if (this.version != null) {
                    data.version = this.version;
                }
                if (this.backupStatus != null) {
                    data.backupStatus = this.backupStatus;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.ip.length)
                    writer.writeString(1, this.ip);
                if (this.nodeType != 0)
                    writer.writeInt32(2, this.nodeType);
                if (this.version.length)
                    writer.writeString(3, this.version);
                if (this.backupStatus != 0)
                    writer.writeInt32(4, this.backupStatus);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NodeInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NodeInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.ip = reader.readString();
                            break;
                        case 2:
                            message.nodeType = reader.readInt32();
                            break;
                        case 3:
                            message.version = reader.readString();
                            break;
                        case 4:
                            message.backupStatus = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): NodeInfo {
                return NodeInfo.deserialize(bytes);
            }
        }
        export class BlockChainInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                headBlockNum?: number;
                headBlockTimestamp?: number;
                headBlockHash?: string;
                forkCount?: number;
                failForkCount?: number;
                blockProcessTime?: MetricsInfo.RateInfo;
                tps?: MetricsInfo.RateInfo;
                transactionCacheSize?: number;
                missedTransaction?: MetricsInfo.RateInfo;
                witnesses?: MetricsInfo.BlockChainInfo.Witness[];
                failProcessBlockNum?: number;
                failProcessBlockReason?: string;
                dupWitness?: MetricsInfo.BlockChainInfo.DupWitness[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 13], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("headBlockNum" in data && data.headBlockNum != undefined) {
                        this.headBlockNum = data.headBlockNum;
                    }
                    if ("headBlockTimestamp" in data && data.headBlockTimestamp != undefined) {
                        this.headBlockTimestamp = data.headBlockTimestamp;
                    }
                    if ("headBlockHash" in data && data.headBlockHash != undefined) {
                        this.headBlockHash = data.headBlockHash;
                    }
                    if ("forkCount" in data && data.forkCount != undefined) {
                        this.forkCount = data.forkCount;
                    }
                    if ("failForkCount" in data && data.failForkCount != undefined) {
                        this.failForkCount = data.failForkCount;
                    }
                    if ("blockProcessTime" in data && data.blockProcessTime != undefined) {
                        this.blockProcessTime = data.blockProcessTime;
                    }
                    if ("tps" in data && data.tps != undefined) {
                        this.tps = data.tps;
                    }
                    if ("transactionCacheSize" in data && data.transactionCacheSize != undefined) {
                        this.transactionCacheSize = data.transactionCacheSize;
                    }
                    if ("missedTransaction" in data && data.missedTransaction != undefined) {
                        this.missedTransaction = data.missedTransaction;
                    }
                    if ("witnesses" in data && data.witnesses != undefined) {
                        this.witnesses = data.witnesses;
                    }
                    if ("failProcessBlockNum" in data && data.failProcessBlockNum != undefined) {
                        this.failProcessBlockNum = data.failProcessBlockNum;
                    }
                    if ("failProcessBlockReason" in data && data.failProcessBlockReason != undefined) {
                        this.failProcessBlockReason = data.failProcessBlockReason;
                    }
                    if ("dupWitness" in data && data.dupWitness != undefined) {
                        this.dupWitness = data.dupWitness;
                    }
                }
            }
            get headBlockNum() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set headBlockNum(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get headBlockTimestamp() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set headBlockTimestamp(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get headBlockHash() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set headBlockHash(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get forkCount() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set forkCount(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get failForkCount() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set failForkCount(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get blockProcessTime() {
                return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 6) as MetricsInfo.RateInfo;
            }
            set blockProcessTime(value: MetricsInfo.RateInfo) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_blockProcessTime() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get tps() {
                return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 7) as MetricsInfo.RateInfo;
            }
            set tps(value: MetricsInfo.RateInfo) {
                pb_1.Message.setWrapperField(this, 7, value);
            }
            get has_tps() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get transactionCacheSize() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set transactionCacheSize(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get missedTransaction() {
                return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 9) as MetricsInfo.RateInfo;
            }
            set missedTransaction(value: MetricsInfo.RateInfo) {
                pb_1.Message.setWrapperField(this, 9, value);
            }
            get has_missedTransaction() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get witnesses() {
                return pb_1.Message.getRepeatedWrapperField(this, MetricsInfo.BlockChainInfo.Witness, 10) as MetricsInfo.BlockChainInfo.Witness[];
            }
            set witnesses(value: MetricsInfo.BlockChainInfo.Witness[]) {
                pb_1.Message.setRepeatedWrapperField(this, 10, value);
            }
            get failProcessBlockNum() {
                return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
            }
            set failProcessBlockNum(value: number) {
                pb_1.Message.setField(this, 11, value);
            }
            get failProcessBlockReason() {
                return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
            }
            set failProcessBlockReason(value: string) {
                pb_1.Message.setField(this, 12, value);
            }
            get dupWitness() {
                return pb_1.Message.getRepeatedWrapperField(this, MetricsInfo.BlockChainInfo.DupWitness, 13) as MetricsInfo.BlockChainInfo.DupWitness[];
            }
            set dupWitness(value: MetricsInfo.BlockChainInfo.DupWitness[]) {
                pb_1.Message.setRepeatedWrapperField(this, 13, value);
            }
            static fromObject(data: {
                headBlockNum?: number;
                headBlockTimestamp?: number;
                headBlockHash?: string;
                forkCount?: number;
                failForkCount?: number;
                blockProcessTime?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                tps?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                transactionCacheSize?: number;
                missedTransaction?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                witnesses?: ReturnType<typeof MetricsInfo.BlockChainInfo.Witness.prototype.toObject>[];
                failProcessBlockNum?: number;
                failProcessBlockReason?: string;
                dupWitness?: ReturnType<typeof MetricsInfo.BlockChainInfo.DupWitness.prototype.toObject>[];
            }): BlockChainInfo {
                const message = new BlockChainInfo({});
                if (data.headBlockNum != null) {
                    message.headBlockNum = data.headBlockNum;
                }
                if (data.headBlockTimestamp != null) {
                    message.headBlockTimestamp = data.headBlockTimestamp;
                }
                if (data.headBlockHash != null) {
                    message.headBlockHash = data.headBlockHash;
                }
                if (data.forkCount != null) {
                    message.forkCount = data.forkCount;
                }
                if (data.failForkCount != null) {
                    message.failForkCount = data.failForkCount;
                }
                if (data.blockProcessTime != null) {
                    message.blockProcessTime = MetricsInfo.RateInfo.fromObject(data.blockProcessTime);
                }
                if (data.tps != null) {
                    message.tps = MetricsInfo.RateInfo.fromObject(data.tps);
                }
                if (data.transactionCacheSize != null) {
                    message.transactionCacheSize = data.transactionCacheSize;
                }
                if (data.missedTransaction != null) {
                    message.missedTransaction = MetricsInfo.RateInfo.fromObject(data.missedTransaction);
                }
                if (data.witnesses != null) {
                    message.witnesses = data.witnesses.map(item => MetricsInfo.BlockChainInfo.Witness.fromObject(item));
                }
                if (data.failProcessBlockNum != null) {
                    message.failProcessBlockNum = data.failProcessBlockNum;
                }
                if (data.failProcessBlockReason != null) {
                    message.failProcessBlockReason = data.failProcessBlockReason;
                }
                if (data.dupWitness != null) {
                    message.dupWitness = data.dupWitness.map(item => MetricsInfo.BlockChainInfo.DupWitness.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    headBlockNum?: number;
                    headBlockTimestamp?: number;
                    headBlockHash?: string;
                    forkCount?: number;
                    failForkCount?: number;
                    blockProcessTime?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                    tps?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                    transactionCacheSize?: number;
                    missedTransaction?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                    witnesses?: ReturnType<typeof MetricsInfo.BlockChainInfo.Witness.prototype.toObject>[];
                    failProcessBlockNum?: number;
                    failProcessBlockReason?: string;
                    dupWitness?: ReturnType<typeof MetricsInfo.BlockChainInfo.DupWitness.prototype.toObject>[];
                } = {};
                if (this.headBlockNum != null) {
                    data.headBlockNum = this.headBlockNum;
                }
                if (this.headBlockTimestamp != null) {
                    data.headBlockTimestamp = this.headBlockTimestamp;
                }
                if (this.headBlockHash != null) {
                    data.headBlockHash = this.headBlockHash;
                }
                if (this.forkCount != null) {
                    data.forkCount = this.forkCount;
                }
                if (this.failForkCount != null) {
                    data.failForkCount = this.failForkCount;
                }
                if (this.blockProcessTime != null) {
                    data.blockProcessTime = this.blockProcessTime.toObject();
                }
                if (this.tps != null) {
                    data.tps = this.tps.toObject();
                }
                if (this.transactionCacheSize != null) {
                    data.transactionCacheSize = this.transactionCacheSize;
                }
                if (this.missedTransaction != null) {
                    data.missedTransaction = this.missedTransaction.toObject();
                }
                if (this.witnesses != null) {
                    data.witnesses = this.witnesses.map((item: MetricsInfo.BlockChainInfo.Witness) => item.toObject());
                }
                if (this.failProcessBlockNum != null) {
                    data.failProcessBlockNum = this.failProcessBlockNum;
                }
                if (this.failProcessBlockReason != null) {
                    data.failProcessBlockReason = this.failProcessBlockReason;
                }
                if (this.dupWitness != null) {
                    data.dupWitness = this.dupWitness.map((item: MetricsInfo.BlockChainInfo.DupWitness) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.headBlockNum != 0)
                    writer.writeInt64(1, this.headBlockNum);
                if (this.headBlockTimestamp != 0)
                    writer.writeInt64(2, this.headBlockTimestamp);
                if (this.headBlockHash.length)
                    writer.writeString(3, this.headBlockHash);
                if (this.forkCount != 0)
                    writer.writeInt32(4, this.forkCount);
                if (this.failForkCount != 0)
                    writer.writeInt32(5, this.failForkCount);
                if (this.has_blockProcessTime)
                    writer.writeMessage(6, this.blockProcessTime, () => this.blockProcessTime.serialize(writer));
                if (this.has_tps)
                    writer.writeMessage(7, this.tps, () => this.tps.serialize(writer));
                if (this.transactionCacheSize != 0)
                    writer.writeInt32(8, this.transactionCacheSize);
                if (this.has_missedTransaction)
                    writer.writeMessage(9, this.missedTransaction, () => this.missedTransaction.serialize(writer));
                if (this.witnesses.length)
                    writer.writeRepeatedMessage(10, this.witnesses, (item: MetricsInfo.BlockChainInfo.Witness) => item.serialize(writer));
                if (this.failProcessBlockNum != 0)
                    writer.writeInt64(11, this.failProcessBlockNum);
                if (this.failProcessBlockReason.length)
                    writer.writeString(12, this.failProcessBlockReason);
                if (this.dupWitness.length)
                    writer.writeRepeatedMessage(13, this.dupWitness, (item: MetricsInfo.BlockChainInfo.DupWitness) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockChainInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockChainInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.headBlockNum = reader.readInt64();
                            break;
                        case 2:
                            message.headBlockTimestamp = reader.readInt64();
                            break;
                        case 3:
                            message.headBlockHash = reader.readString();
                            break;
                        case 4:
                            message.forkCount = reader.readInt32();
                            break;
                        case 5:
                            message.failForkCount = reader.readInt32();
                            break;
                        case 6:
                            reader.readMessage(message.blockProcessTime, () => message.blockProcessTime = MetricsInfo.RateInfo.deserialize(reader));
                            break;
                        case 7:
                            reader.readMessage(message.tps, () => message.tps = MetricsInfo.RateInfo.deserialize(reader));
                            break;
                        case 8:
                            message.transactionCacheSize = reader.readInt32();
                            break;
                        case 9:
                            reader.readMessage(message.missedTransaction, () => message.missedTransaction = MetricsInfo.RateInfo.deserialize(reader));
                            break;
                        case 10:
                            reader.readMessage(message.witnesses, () => pb_1.Message.addToRepeatedWrapperField(message, 10, MetricsInfo.BlockChainInfo.Witness.deserialize(reader), MetricsInfo.BlockChainInfo.Witness));
                            break;
                        case 11:
                            message.failProcessBlockNum = reader.readInt64();
                            break;
                        case 12:
                            message.failProcessBlockReason = reader.readString();
                            break;
                        case 13:
                            reader.readMessage(message.dupWitness, () => pb_1.Message.addToRepeatedWrapperField(message, 13, MetricsInfo.BlockChainInfo.DupWitness.deserialize(reader), MetricsInfo.BlockChainInfo.DupWitness));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BlockChainInfo {
                return BlockChainInfo.deserialize(bytes);
            }
        }
        export namespace BlockChainInfo {
            export class Witness extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    address?: string;
                    version?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("address" in data && data.address != undefined) {
                            this.address = data.address;
                        }
                        if ("version" in data && data.version != undefined) {
                            this.version = data.version;
                        }
                    }
                }
                get address() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set address(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get version() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set version(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                static fromObject(data: {
                    address?: string;
                    version?: number;
                }): Witness {
                    const message = new Witness({});
                    if (data.address != null) {
                        message.address = data.address;
                    }
                    if (data.version != null) {
                        message.version = data.version;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        address?: string;
                        version?: number;
                    } = {};
                    if (this.address != null) {
                        data.address = this.address;
                    }
                    if (this.version != null) {
                        data.version = this.version;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.address.length)
                        writer.writeString(1, this.address);
                    if (this.version != 0)
                        writer.writeInt32(2, this.version);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Witness {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Witness();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.address = reader.readString();
                                break;
                            case 2:
                                message.version = reader.readInt32();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Witness {
                    return Witness.deserialize(bytes);
                }
            }
            export class DupWitness extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    address?: string;
                    blockNum?: number;
                    count?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("address" in data && data.address != undefined) {
                            this.address = data.address;
                        }
                        if ("blockNum" in data && data.blockNum != undefined) {
                            this.blockNum = data.blockNum;
                        }
                        if ("count" in data && data.count != undefined) {
                            this.count = data.count;
                        }
                    }
                }
                get address() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set address(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get blockNum() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set blockNum(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get count() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }
                set count(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }
                static fromObject(data: {
                    address?: string;
                    blockNum?: number;
                    count?: number;
                }): DupWitness {
                    const message = new DupWitness({});
                    if (data.address != null) {
                        message.address = data.address;
                    }
                    if (data.blockNum != null) {
                        message.blockNum = data.blockNum;
                    }
                    if (data.count != null) {
                        message.count = data.count;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        address?: string;
                        blockNum?: number;
                        count?: number;
                    } = {};
                    if (this.address != null) {
                        data.address = this.address;
                    }
                    if (this.blockNum != null) {
                        data.blockNum = this.blockNum;
                    }
                    if (this.count != null) {
                        data.count = this.count;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.address.length)
                        writer.writeString(1, this.address);
                    if (this.blockNum != 0)
                        writer.writeInt64(2, this.blockNum);
                    if (this.count != 0)
                        writer.writeInt32(3, this.count);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DupWitness {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DupWitness();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.address = reader.readString();
                                break;
                            case 2:
                                message.blockNum = reader.readInt64();
                                break;
                            case 3:
                                message.count = reader.readInt32();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): DupWitness {
                    return DupWitness.deserialize(bytes);
                }
            }
        }
        export class RateInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                count?: number;
                meanRate?: number;
                oneMinuteRate?: number;
                fiveMinuteRate?: number;
                fifteenMinuteRate?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("count" in data && data.count != undefined) {
                        this.count = data.count;
                    }
                    if ("meanRate" in data && data.meanRate != undefined) {
                        this.meanRate = data.meanRate;
                    }
                    if ("oneMinuteRate" in data && data.oneMinuteRate != undefined) {
                        this.oneMinuteRate = data.oneMinuteRate;
                    }
                    if ("fiveMinuteRate" in data && data.fiveMinuteRate != undefined) {
                        this.fiveMinuteRate = data.fiveMinuteRate;
                    }
                    if ("fifteenMinuteRate" in data && data.fifteenMinuteRate != undefined) {
                        this.fifteenMinuteRate = data.fifteenMinuteRate;
                    }
                }
            }
            get count() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set count(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get meanRate() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set meanRate(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get oneMinuteRate() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set oneMinuteRate(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get fiveMinuteRate() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set fiveMinuteRate(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get fifteenMinuteRate() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set fifteenMinuteRate(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                count?: number;
                meanRate?: number;
                oneMinuteRate?: number;
                fiveMinuteRate?: number;
                fifteenMinuteRate?: number;
            }): RateInfo {
                const message = new RateInfo({});
                if (data.count != null) {
                    message.count = data.count;
                }
                if (data.meanRate != null) {
                    message.meanRate = data.meanRate;
                }
                if (data.oneMinuteRate != null) {
                    message.oneMinuteRate = data.oneMinuteRate;
                }
                if (data.fiveMinuteRate != null) {
                    message.fiveMinuteRate = data.fiveMinuteRate;
                }
                if (data.fifteenMinuteRate != null) {
                    message.fifteenMinuteRate = data.fifteenMinuteRate;
                }
                return message;
            }
            toObject() {
                const data: {
                    count?: number;
                    meanRate?: number;
                    oneMinuteRate?: number;
                    fiveMinuteRate?: number;
                    fifteenMinuteRate?: number;
                } = {};
                if (this.count != null) {
                    data.count = this.count;
                }
                if (this.meanRate != null) {
                    data.meanRate = this.meanRate;
                }
                if (this.oneMinuteRate != null) {
                    data.oneMinuteRate = this.oneMinuteRate;
                }
                if (this.fiveMinuteRate != null) {
                    data.fiveMinuteRate = this.fiveMinuteRate;
                }
                if (this.fifteenMinuteRate != null) {
                    data.fifteenMinuteRate = this.fifteenMinuteRate;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.count != 0)
                    writer.writeInt64(1, this.count);
                if (this.meanRate != 0)
                    writer.writeDouble(2, this.meanRate);
                if (this.oneMinuteRate != 0)
                    writer.writeDouble(3, this.oneMinuteRate);
                if (this.fiveMinuteRate != 0)
                    writer.writeDouble(4, this.fiveMinuteRate);
                if (this.fifteenMinuteRate != 0)
                    writer.writeDouble(5, this.fifteenMinuteRate);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RateInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RateInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.count = reader.readInt64();
                            break;
                        case 2:
                            message.meanRate = reader.readDouble();
                            break;
                        case 3:
                            message.oneMinuteRate = reader.readDouble();
                            break;
                        case 4:
                            message.fiveMinuteRate = reader.readDouble();
                            break;
                        case 5:
                            message.fifteenMinuteRate = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RateInfo {
                return RateInfo.deserialize(bytes);
            }
        }
        export class NetInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                errorProtoCount?: number;
                api?: MetricsInfo.NetInfo.ApiInfo;
                connectionCount?: number;
                validConnectionCount?: number;
                tcpInTraffic?: MetricsInfo.RateInfo;
                tcpOutTraffic?: MetricsInfo.RateInfo;
                disconnectionCount?: number;
                disconnectionDetail?: MetricsInfo.NetInfo.DisconnectionDetailInfo[];
                udpInTraffic?: MetricsInfo.RateInfo;
                udpOutTraffic?: MetricsInfo.RateInfo;
                latency?: MetricsInfo.NetInfo.LatencyInfo;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("errorProtoCount" in data && data.errorProtoCount != undefined) {
                        this.errorProtoCount = data.errorProtoCount;
                    }
                    if ("api" in data && data.api != undefined) {
                        this.api = data.api;
                    }
                    if ("connectionCount" in data && data.connectionCount != undefined) {
                        this.connectionCount = data.connectionCount;
                    }
                    if ("validConnectionCount" in data && data.validConnectionCount != undefined) {
                        this.validConnectionCount = data.validConnectionCount;
                    }
                    if ("tcpInTraffic" in data && data.tcpInTraffic != undefined) {
                        this.tcpInTraffic = data.tcpInTraffic;
                    }
                    if ("tcpOutTraffic" in data && data.tcpOutTraffic != undefined) {
                        this.tcpOutTraffic = data.tcpOutTraffic;
                    }
                    if ("disconnectionCount" in data && data.disconnectionCount != undefined) {
                        this.disconnectionCount = data.disconnectionCount;
                    }
                    if ("disconnectionDetail" in data && data.disconnectionDetail != undefined) {
                        this.disconnectionDetail = data.disconnectionDetail;
                    }
                    if ("udpInTraffic" in data && data.udpInTraffic != undefined) {
                        this.udpInTraffic = data.udpInTraffic;
                    }
                    if ("udpOutTraffic" in data && data.udpOutTraffic != undefined) {
                        this.udpOutTraffic = data.udpOutTraffic;
                    }
                    if ("latency" in data && data.latency != undefined) {
                        this.latency = data.latency;
                    }
                }
            }
            get errorProtoCount() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set errorProtoCount(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get api() {
                return pb_1.Message.getWrapperField(this, MetricsInfo.NetInfo.ApiInfo, 2) as MetricsInfo.NetInfo.ApiInfo;
            }
            set api(value: MetricsInfo.NetInfo.ApiInfo) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_api() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get connectionCount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set connectionCount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get validConnectionCount() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set validConnectionCount(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get tcpInTraffic() {
                return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 5) as MetricsInfo.RateInfo;
            }
            set tcpInTraffic(value: MetricsInfo.RateInfo) {
                pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_tcpInTraffic() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get tcpOutTraffic() {
                return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 6) as MetricsInfo.RateInfo;
            }
            set tcpOutTraffic(value: MetricsInfo.RateInfo) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_tcpOutTraffic() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get disconnectionCount() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set disconnectionCount(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get disconnectionDetail() {
                return pb_1.Message.getRepeatedWrapperField(this, MetricsInfo.NetInfo.DisconnectionDetailInfo, 8) as MetricsInfo.NetInfo.DisconnectionDetailInfo[];
            }
            set disconnectionDetail(value: MetricsInfo.NetInfo.DisconnectionDetailInfo[]) {
                pb_1.Message.setRepeatedWrapperField(this, 8, value);
            }
            get udpInTraffic() {
                return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 9) as MetricsInfo.RateInfo;
            }
            set udpInTraffic(value: MetricsInfo.RateInfo) {
                pb_1.Message.setWrapperField(this, 9, value);
            }
            get has_udpInTraffic() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get udpOutTraffic() {
                return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 10) as MetricsInfo.RateInfo;
            }
            set udpOutTraffic(value: MetricsInfo.RateInfo) {
                pb_1.Message.setWrapperField(this, 10, value);
            }
            get has_udpOutTraffic() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get latency() {
                return pb_1.Message.getWrapperField(this, MetricsInfo.NetInfo.LatencyInfo, 11) as MetricsInfo.NetInfo.LatencyInfo;
            }
            set latency(value: MetricsInfo.NetInfo.LatencyInfo) {
                pb_1.Message.setWrapperField(this, 11, value);
            }
            get has_latency() {
                return pb_1.Message.getField(this, 11) != null;
            }
            static fromObject(data: {
                errorProtoCount?: number;
                api?: ReturnType<typeof MetricsInfo.NetInfo.ApiInfo.prototype.toObject>;
                connectionCount?: number;
                validConnectionCount?: number;
                tcpInTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                tcpOutTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                disconnectionCount?: number;
                disconnectionDetail?: ReturnType<typeof MetricsInfo.NetInfo.DisconnectionDetailInfo.prototype.toObject>[];
                udpInTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                udpOutTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                latency?: ReturnType<typeof MetricsInfo.NetInfo.LatencyInfo.prototype.toObject>;
            }): NetInfo {
                const message = new NetInfo({});
                if (data.errorProtoCount != null) {
                    message.errorProtoCount = data.errorProtoCount;
                }
                if (data.api != null) {
                    message.api = MetricsInfo.NetInfo.ApiInfo.fromObject(data.api);
                }
                if (data.connectionCount != null) {
                    message.connectionCount = data.connectionCount;
                }
                if (data.validConnectionCount != null) {
                    message.validConnectionCount = data.validConnectionCount;
                }
                if (data.tcpInTraffic != null) {
                    message.tcpInTraffic = MetricsInfo.RateInfo.fromObject(data.tcpInTraffic);
                }
                if (data.tcpOutTraffic != null) {
                    message.tcpOutTraffic = MetricsInfo.RateInfo.fromObject(data.tcpOutTraffic);
                }
                if (data.disconnectionCount != null) {
                    message.disconnectionCount = data.disconnectionCount;
                }
                if (data.disconnectionDetail != null) {
                    message.disconnectionDetail = data.disconnectionDetail.map(item => MetricsInfo.NetInfo.DisconnectionDetailInfo.fromObject(item));
                }
                if (data.udpInTraffic != null) {
                    message.udpInTraffic = MetricsInfo.RateInfo.fromObject(data.udpInTraffic);
                }
                if (data.udpOutTraffic != null) {
                    message.udpOutTraffic = MetricsInfo.RateInfo.fromObject(data.udpOutTraffic);
                }
                if (data.latency != null) {
                    message.latency = MetricsInfo.NetInfo.LatencyInfo.fromObject(data.latency);
                }
                return message;
            }
            toObject() {
                const data: {
                    errorProtoCount?: number;
                    api?: ReturnType<typeof MetricsInfo.NetInfo.ApiInfo.prototype.toObject>;
                    connectionCount?: number;
                    validConnectionCount?: number;
                    tcpInTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                    tcpOutTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                    disconnectionCount?: number;
                    disconnectionDetail?: ReturnType<typeof MetricsInfo.NetInfo.DisconnectionDetailInfo.prototype.toObject>[];
                    udpInTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                    udpOutTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                    latency?: ReturnType<typeof MetricsInfo.NetInfo.LatencyInfo.prototype.toObject>;
                } = {};
                if (this.errorProtoCount != null) {
                    data.errorProtoCount = this.errorProtoCount;
                }
                if (this.api != null) {
                    data.api = this.api.toObject();
                }
                if (this.connectionCount != null) {
                    data.connectionCount = this.connectionCount;
                }
                if (this.validConnectionCount != null) {
                    data.validConnectionCount = this.validConnectionCount;
                }
                if (this.tcpInTraffic != null) {
                    data.tcpInTraffic = this.tcpInTraffic.toObject();
                }
                if (this.tcpOutTraffic != null) {
                    data.tcpOutTraffic = this.tcpOutTraffic.toObject();
                }
                if (this.disconnectionCount != null) {
                    data.disconnectionCount = this.disconnectionCount;
                }
                if (this.disconnectionDetail != null) {
                    data.disconnectionDetail = this.disconnectionDetail.map((item: MetricsInfo.NetInfo.DisconnectionDetailInfo) => item.toObject());
                }
                if (this.udpInTraffic != null) {
                    data.udpInTraffic = this.udpInTraffic.toObject();
                }
                if (this.udpOutTraffic != null) {
                    data.udpOutTraffic = this.udpOutTraffic.toObject();
                }
                if (this.latency != null) {
                    data.latency = this.latency.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.errorProtoCount != 0)
                    writer.writeInt32(1, this.errorProtoCount);
                if (this.has_api)
                    writer.writeMessage(2, this.api, () => this.api.serialize(writer));
                if (this.connectionCount != 0)
                    writer.writeInt32(3, this.connectionCount);
                if (this.validConnectionCount != 0)
                    writer.writeInt32(4, this.validConnectionCount);
                if (this.has_tcpInTraffic)
                    writer.writeMessage(5, this.tcpInTraffic, () => this.tcpInTraffic.serialize(writer));
                if (this.has_tcpOutTraffic)
                    writer.writeMessage(6, this.tcpOutTraffic, () => this.tcpOutTraffic.serialize(writer));
                if (this.disconnectionCount != 0)
                    writer.writeInt32(7, this.disconnectionCount);
                if (this.disconnectionDetail.length)
                    writer.writeRepeatedMessage(8, this.disconnectionDetail, (item: MetricsInfo.NetInfo.DisconnectionDetailInfo) => item.serialize(writer));
                if (this.has_udpInTraffic)
                    writer.writeMessage(9, this.udpInTraffic, () => this.udpInTraffic.serialize(writer));
                if (this.has_udpOutTraffic)
                    writer.writeMessage(10, this.udpOutTraffic, () => this.udpOutTraffic.serialize(writer));
                if (this.has_latency)
                    writer.writeMessage(11, this.latency, () => this.latency.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NetInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NetInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.errorProtoCount = reader.readInt32();
                            break;
                        case 2:
                            reader.readMessage(message.api, () => message.api = MetricsInfo.NetInfo.ApiInfo.deserialize(reader));
                            break;
                        case 3:
                            message.connectionCount = reader.readInt32();
                            break;
                        case 4:
                            message.validConnectionCount = reader.readInt32();
                            break;
                        case 5:
                            reader.readMessage(message.tcpInTraffic, () => message.tcpInTraffic = MetricsInfo.RateInfo.deserialize(reader));
                            break;
                        case 6:
                            reader.readMessage(message.tcpOutTraffic, () => message.tcpOutTraffic = MetricsInfo.RateInfo.deserialize(reader));
                            break;
                        case 7:
                            message.disconnectionCount = reader.readInt32();
                            break;
                        case 8:
                            reader.readMessage(message.disconnectionDetail, () => pb_1.Message.addToRepeatedWrapperField(message, 8, MetricsInfo.NetInfo.DisconnectionDetailInfo.deserialize(reader), MetricsInfo.NetInfo.DisconnectionDetailInfo));
                            break;
                        case 9:
                            reader.readMessage(message.udpInTraffic, () => message.udpInTraffic = MetricsInfo.RateInfo.deserialize(reader));
                            break;
                        case 10:
                            reader.readMessage(message.udpOutTraffic, () => message.udpOutTraffic = MetricsInfo.RateInfo.deserialize(reader));
                            break;
                        case 11:
                            reader.readMessage(message.latency, () => message.latency = MetricsInfo.NetInfo.LatencyInfo.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): NetInfo {
                return NetInfo.deserialize(bytes);
            }
        }
        export namespace NetInfo {
            export class ApiInfo extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    qps?: MetricsInfo.RateInfo;
                    failQps?: MetricsInfo.RateInfo;
                    outTraffic?: MetricsInfo.RateInfo;
                    detail?: MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo[];
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("qps" in data && data.qps != undefined) {
                            this.qps = data.qps;
                        }
                        if ("failQps" in data && data.failQps != undefined) {
                            this.failQps = data.failQps;
                        }
                        if ("outTraffic" in data && data.outTraffic != undefined) {
                            this.outTraffic = data.outTraffic;
                        }
                        if ("detail" in data && data.detail != undefined) {
                            this.detail = data.detail;
                        }
                    }
                }
                get qps() {
                    return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 1) as MetricsInfo.RateInfo;
                }
                set qps(value: MetricsInfo.RateInfo) {
                    pb_1.Message.setWrapperField(this, 1, value);
                }
                get has_qps() {
                    return pb_1.Message.getField(this, 1) != null;
                }
                get failQps() {
                    return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 2) as MetricsInfo.RateInfo;
                }
                set failQps(value: MetricsInfo.RateInfo) {
                    pb_1.Message.setWrapperField(this, 2, value);
                }
                get has_failQps() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                get outTraffic() {
                    return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 3) as MetricsInfo.RateInfo;
                }
                set outTraffic(value: MetricsInfo.RateInfo) {
                    pb_1.Message.setWrapperField(this, 3, value);
                }
                get has_outTraffic() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                get detail() {
                    return pb_1.Message.getRepeatedWrapperField(this, MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo, 4) as MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo[];
                }
                set detail(value: MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo[]) {
                    pb_1.Message.setRepeatedWrapperField(this, 4, value);
                }
                static fromObject(data: {
                    qps?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                    failQps?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                    outTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                    detail?: ReturnType<typeof MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo.prototype.toObject>[];
                }): ApiInfo {
                    const message = new ApiInfo({});
                    if (data.qps != null) {
                        message.qps = MetricsInfo.RateInfo.fromObject(data.qps);
                    }
                    if (data.failQps != null) {
                        message.failQps = MetricsInfo.RateInfo.fromObject(data.failQps);
                    }
                    if (data.outTraffic != null) {
                        message.outTraffic = MetricsInfo.RateInfo.fromObject(data.outTraffic);
                    }
                    if (data.detail != null) {
                        message.detail = data.detail.map(item => MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo.fromObject(item));
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        qps?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                        failQps?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                        outTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                        detail?: ReturnType<typeof MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo.prototype.toObject>[];
                    } = {};
                    if (this.qps != null) {
                        data.qps = this.qps.toObject();
                    }
                    if (this.failQps != null) {
                        data.failQps = this.failQps.toObject();
                    }
                    if (this.outTraffic != null) {
                        data.outTraffic = this.outTraffic.toObject();
                    }
                    if (this.detail != null) {
                        data.detail = this.detail.map((item: MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo) => item.toObject());
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.has_qps)
                        writer.writeMessage(1, this.qps, () => this.qps.serialize(writer));
                    if (this.has_failQps)
                        writer.writeMessage(2, this.failQps, () => this.failQps.serialize(writer));
                    if (this.has_outTraffic)
                        writer.writeMessage(3, this.outTraffic, () => this.outTraffic.serialize(writer));
                    if (this.detail.length)
                        writer.writeRepeatedMessage(4, this.detail, (item: MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo) => item.serialize(writer));
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApiInfo {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApiInfo();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                reader.readMessage(message.qps, () => message.qps = MetricsInfo.RateInfo.deserialize(reader));
                                break;
                            case 2:
                                reader.readMessage(message.failQps, () => message.failQps = MetricsInfo.RateInfo.deserialize(reader));
                                break;
                            case 3:
                                reader.readMessage(message.outTraffic, () => message.outTraffic = MetricsInfo.RateInfo.deserialize(reader));
                                break;
                            case 4:
                                reader.readMessage(message.detail, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo.deserialize(reader), MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo));
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): ApiInfo {
                    return ApiInfo.deserialize(bytes);
                }
            }
            export namespace ApiInfo {
                export class ApiDetailInfo extends pb_1.Message {
                    #one_of_decls: number[][] = [];
                    constructor(data?: any[] | {
                        name?: string;
                        qps?: MetricsInfo.RateInfo;
                        failQps?: MetricsInfo.RateInfo;
                        outTraffic?: MetricsInfo.RateInfo;
                    }) {
                        super();
                        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                        if (!Array.isArray(data) && typeof data == "object") {
                            if ("name" in data && data.name != undefined) {
                                this.name = data.name;
                            }
                            if ("qps" in data && data.qps != undefined) {
                                this.qps = data.qps;
                            }
                            if ("failQps" in data && data.failQps != undefined) {
                                this.failQps = data.failQps;
                            }
                            if ("outTraffic" in data && data.outTraffic != undefined) {
                                this.outTraffic = data.outTraffic;
                            }
                        }
                    }
                    get name() {
                        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                    }
                    set name(value: string) {
                        pb_1.Message.setField(this, 1, value);
                    }
                    get qps() {
                        return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 2) as MetricsInfo.RateInfo;
                    }
                    set qps(value: MetricsInfo.RateInfo) {
                        pb_1.Message.setWrapperField(this, 2, value);
                    }
                    get has_qps() {
                        return pb_1.Message.getField(this, 2) != null;
                    }
                    get failQps() {
                        return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 3) as MetricsInfo.RateInfo;
                    }
                    set failQps(value: MetricsInfo.RateInfo) {
                        pb_1.Message.setWrapperField(this, 3, value);
                    }
                    get has_failQps() {
                        return pb_1.Message.getField(this, 3) != null;
                    }
                    get outTraffic() {
                        return pb_1.Message.getWrapperField(this, MetricsInfo.RateInfo, 4) as MetricsInfo.RateInfo;
                    }
                    set outTraffic(value: MetricsInfo.RateInfo) {
                        pb_1.Message.setWrapperField(this, 4, value);
                    }
                    get has_outTraffic() {
                        return pb_1.Message.getField(this, 4) != null;
                    }
                    static fromObject(data: {
                        name?: string;
                        qps?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                        failQps?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                        outTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                    }): ApiDetailInfo {
                        const message = new ApiDetailInfo({});
                        if (data.name != null) {
                            message.name = data.name;
                        }
                        if (data.qps != null) {
                            message.qps = MetricsInfo.RateInfo.fromObject(data.qps);
                        }
                        if (data.failQps != null) {
                            message.failQps = MetricsInfo.RateInfo.fromObject(data.failQps);
                        }
                        if (data.outTraffic != null) {
                            message.outTraffic = MetricsInfo.RateInfo.fromObject(data.outTraffic);
                        }
                        return message;
                    }
                    toObject() {
                        const data: {
                            name?: string;
                            qps?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                            failQps?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                            outTraffic?: ReturnType<typeof MetricsInfo.RateInfo.prototype.toObject>;
                        } = {};
                        if (this.name != null) {
                            data.name = this.name;
                        }
                        if (this.qps != null) {
                            data.qps = this.qps.toObject();
                        }
                        if (this.failQps != null) {
                            data.failQps = this.failQps.toObject();
                        }
                        if (this.outTraffic != null) {
                            data.outTraffic = this.outTraffic.toObject();
                        }
                        return data;
                    }
                    serialize(): Uint8Array;
                    serialize(w: pb_1.BinaryWriter): void;
                    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                        const writer = w || new pb_1.BinaryWriter();
                        if (this.name.length)
                            writer.writeString(1, this.name);
                        if (this.has_qps)
                            writer.writeMessage(2, this.qps, () => this.qps.serialize(writer));
                        if (this.has_failQps)
                            writer.writeMessage(3, this.failQps, () => this.failQps.serialize(writer));
                        if (this.has_outTraffic)
                            writer.writeMessage(4, this.outTraffic, () => this.outTraffic.serialize(writer));
                        if (!w)
                            return writer.getResultBuffer();
                    }
                    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApiDetailInfo {
                        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApiDetailInfo();
                        while (reader.nextField()) {
                            if (reader.isEndGroup())
                                break;
                            switch (reader.getFieldNumber()) {
                                case 1:
                                    message.name = reader.readString();
                                    break;
                                case 2:
                                    reader.readMessage(message.qps, () => message.qps = MetricsInfo.RateInfo.deserialize(reader));
                                    break;
                                case 3:
                                    reader.readMessage(message.failQps, () => message.failQps = MetricsInfo.RateInfo.deserialize(reader));
                                    break;
                                case 4:
                                    reader.readMessage(message.outTraffic, () => message.outTraffic = MetricsInfo.RateInfo.deserialize(reader));
                                    break;
                                default: reader.skipField();
                            }
                        }
                        return message;
                    }
                    serializeBinary(): Uint8Array {
                        return this.serialize();
                    }
                    static deserializeBinary(bytes: Uint8Array): ApiDetailInfo {
                        return ApiDetailInfo.deserialize(bytes);
                    }
                }
            }
            export class DisconnectionDetailInfo extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    reason?: string;
                    count?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("reason" in data && data.reason != undefined) {
                            this.reason = data.reason;
                        }
                        if ("count" in data && data.count != undefined) {
                            this.count = data.count;
                        }
                    }
                }
                get reason() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set reason(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get count() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set count(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                static fromObject(data: {
                    reason?: string;
                    count?: number;
                }): DisconnectionDetailInfo {
                    const message = new DisconnectionDetailInfo({});
                    if (data.reason != null) {
                        message.reason = data.reason;
                    }
                    if (data.count != null) {
                        message.count = data.count;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        reason?: string;
                        count?: number;
                    } = {};
                    if (this.reason != null) {
                        data.reason = this.reason;
                    }
                    if (this.count != null) {
                        data.count = this.count;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.reason.length)
                        writer.writeString(1, this.reason);
                    if (this.count != 0)
                        writer.writeInt32(2, this.count);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisconnectionDetailInfo {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisconnectionDetailInfo();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.reason = reader.readString();
                                break;
                            case 2:
                                message.count = reader.readInt32();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): DisconnectionDetailInfo {
                    return DisconnectionDetailInfo.deserialize(bytes);
                }
            }
            export class LatencyInfo extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    top99?: number;
                    top95?: number;
                    top75?: number;
                    totalCount?: number;
                    delay1S?: number;
                    delay2S?: number;
                    delay3S?: number;
                    detail?: MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo[];
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("top99" in data && data.top99 != undefined) {
                            this.top99 = data.top99;
                        }
                        if ("top95" in data && data.top95 != undefined) {
                            this.top95 = data.top95;
                        }
                        if ("top75" in data && data.top75 != undefined) {
                            this.top75 = data.top75;
                        }
                        if ("totalCount" in data && data.totalCount != undefined) {
                            this.totalCount = data.totalCount;
                        }
                        if ("delay1S" in data && data.delay1S != undefined) {
                            this.delay1S = data.delay1S;
                        }
                        if ("delay2S" in data && data.delay2S != undefined) {
                            this.delay2S = data.delay2S;
                        }
                        if ("delay3S" in data && data.delay3S != undefined) {
                            this.delay3S = data.delay3S;
                        }
                        if ("detail" in data && data.detail != undefined) {
                            this.detail = data.detail;
                        }
                    }
                }
                get top99() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set top99(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get top95() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set top95(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get top75() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }
                set top75(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }
                get totalCount() {
                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                }
                set totalCount(value: number) {
                    pb_1.Message.setField(this, 4, value);
                }
                get delay1S() {
                    return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
                }
                set delay1S(value: number) {
                    pb_1.Message.setField(this, 5, value);
                }
                get delay2S() {
                    return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
                }
                set delay2S(value: number) {
                    pb_1.Message.setField(this, 6, value);
                }
                get delay3S() {
                    return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
                }
                set delay3S(value: number) {
                    pb_1.Message.setField(this, 7, value);
                }
                get detail() {
                    return pb_1.Message.getRepeatedWrapperField(this, MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo, 8) as MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo[];
                }
                set detail(value: MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo[]) {
                    pb_1.Message.setRepeatedWrapperField(this, 8, value);
                }
                static fromObject(data: {
                    top99?: number;
                    top95?: number;
                    top75?: number;
                    totalCount?: number;
                    delay1S?: number;
                    delay2S?: number;
                    delay3S?: number;
                    detail?: ReturnType<typeof MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo.prototype.toObject>[];
                }): LatencyInfo {
                    const message = new LatencyInfo({});
                    if (data.top99 != null) {
                        message.top99 = data.top99;
                    }
                    if (data.top95 != null) {
                        message.top95 = data.top95;
                    }
                    if (data.top75 != null) {
                        message.top75 = data.top75;
                    }
                    if (data.totalCount != null) {
                        message.totalCount = data.totalCount;
                    }
                    if (data.delay1S != null) {
                        message.delay1S = data.delay1S;
                    }
                    if (data.delay2S != null) {
                        message.delay2S = data.delay2S;
                    }
                    if (data.delay3S != null) {
                        message.delay3S = data.delay3S;
                    }
                    if (data.detail != null) {
                        message.detail = data.detail.map(item => MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo.fromObject(item));
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        top99?: number;
                        top95?: number;
                        top75?: number;
                        totalCount?: number;
                        delay1S?: number;
                        delay2S?: number;
                        delay3S?: number;
                        detail?: ReturnType<typeof MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo.prototype.toObject>[];
                    } = {};
                    if (this.top99 != null) {
                        data.top99 = this.top99;
                    }
                    if (this.top95 != null) {
                        data.top95 = this.top95;
                    }
                    if (this.top75 != null) {
                        data.top75 = this.top75;
                    }
                    if (this.totalCount != null) {
                        data.totalCount = this.totalCount;
                    }
                    if (this.delay1S != null) {
                        data.delay1S = this.delay1S;
                    }
                    if (this.delay2S != null) {
                        data.delay2S = this.delay2S;
                    }
                    if (this.delay3S != null) {
                        data.delay3S = this.delay3S;
                    }
                    if (this.detail != null) {
                        data.detail = this.detail.map((item: MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo) => item.toObject());
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.top99 != 0)
                        writer.writeInt32(1, this.top99);
                    if (this.top95 != 0)
                        writer.writeInt32(2, this.top95);
                    if (this.top75 != 0)
                        writer.writeInt32(3, this.top75);
                    if (this.totalCount != 0)
                        writer.writeInt32(4, this.totalCount);
                    if (this.delay1S != 0)
                        writer.writeInt32(5, this.delay1S);
                    if (this.delay2S != 0)
                        writer.writeInt32(6, this.delay2S);
                    if (this.delay3S != 0)
                        writer.writeInt32(7, this.delay3S);
                    if (this.detail.length)
                        writer.writeRepeatedMessage(8, this.detail, (item: MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo) => item.serialize(writer));
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LatencyInfo {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LatencyInfo();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.top99 = reader.readInt32();
                                break;
                            case 2:
                                message.top95 = reader.readInt32();
                                break;
                            case 3:
                                message.top75 = reader.readInt32();
                                break;
                            case 4:
                                message.totalCount = reader.readInt32();
                                break;
                            case 5:
                                message.delay1S = reader.readInt32();
                                break;
                            case 6:
                                message.delay2S = reader.readInt32();
                                break;
                            case 7:
                                message.delay3S = reader.readInt32();
                                break;
                            case 8:
                                reader.readMessage(message.detail, () => pb_1.Message.addToRepeatedWrapperField(message, 8, MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo.deserialize(reader), MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo));
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): LatencyInfo {
                    return LatencyInfo.deserialize(bytes);
                }
            }
            export namespace LatencyInfo {
                export class LatencyDetailInfo extends pb_1.Message {
                    #one_of_decls: number[][] = [];
                    constructor(data?: any[] | {
                        witness?: string;
                        top99?: number;
                        top95?: number;
                        top75?: number;
                        count?: number;
                        delay1S?: number;
                        delay2S?: number;
                        delay3S?: number;
                    }) {
                        super();
                        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                        if (!Array.isArray(data) && typeof data == "object") {
                            if ("witness" in data && data.witness != undefined) {
                                this.witness = data.witness;
                            }
                            if ("top99" in data && data.top99 != undefined) {
                                this.top99 = data.top99;
                            }
                            if ("top95" in data && data.top95 != undefined) {
                                this.top95 = data.top95;
                            }
                            if ("top75" in data && data.top75 != undefined) {
                                this.top75 = data.top75;
                            }
                            if ("count" in data && data.count != undefined) {
                                this.count = data.count;
                            }
                            if ("delay1S" in data && data.delay1S != undefined) {
                                this.delay1S = data.delay1S;
                            }
                            if ("delay2S" in data && data.delay2S != undefined) {
                                this.delay2S = data.delay2S;
                            }
                            if ("delay3S" in data && data.delay3S != undefined) {
                                this.delay3S = data.delay3S;
                            }
                        }
                    }
                    get witness() {
                        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                    }
                    set witness(value: string) {
                        pb_1.Message.setField(this, 1, value);
                    }
                    get top99() {
                        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                    }
                    set top99(value: number) {
                        pb_1.Message.setField(this, 2, value);
                    }
                    get top95() {
                        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                    }
                    set top95(value: number) {
                        pb_1.Message.setField(this, 3, value);
                    }
                    get top75() {
                        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                    }
                    set top75(value: number) {
                        pb_1.Message.setField(this, 4, value);
                    }
                    get count() {
                        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
                    }
                    set count(value: number) {
                        pb_1.Message.setField(this, 5, value);
                    }
                    get delay1S() {
                        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
                    }
                    set delay1S(value: number) {
                        pb_1.Message.setField(this, 6, value);
                    }
                    get delay2S() {
                        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
                    }
                    set delay2S(value: number) {
                        pb_1.Message.setField(this, 7, value);
                    }
                    get delay3S() {
                        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
                    }
                    set delay3S(value: number) {
                        pb_1.Message.setField(this, 8, value);
                    }
                    static fromObject(data: {
                        witness?: string;
                        top99?: number;
                        top95?: number;
                        top75?: number;
                        count?: number;
                        delay1S?: number;
                        delay2S?: number;
                        delay3S?: number;
                    }): LatencyDetailInfo {
                        const message = new LatencyDetailInfo({});
                        if (data.witness != null) {
                            message.witness = data.witness;
                        }
                        if (data.top99 != null) {
                            message.top99 = data.top99;
                        }
                        if (data.top95 != null) {
                            message.top95 = data.top95;
                        }
                        if (data.top75 != null) {
                            message.top75 = data.top75;
                        }
                        if (data.count != null) {
                            message.count = data.count;
                        }
                        if (data.delay1S != null) {
                            message.delay1S = data.delay1S;
                        }
                        if (data.delay2S != null) {
                            message.delay2S = data.delay2S;
                        }
                        if (data.delay3S != null) {
                            message.delay3S = data.delay3S;
                        }
                        return message;
                    }
                    toObject() {
                        const data: {
                            witness?: string;
                            top99?: number;
                            top95?: number;
                            top75?: number;
                            count?: number;
                            delay1S?: number;
                            delay2S?: number;
                            delay3S?: number;
                        } = {};
                        if (this.witness != null) {
                            data.witness = this.witness;
                        }
                        if (this.top99 != null) {
                            data.top99 = this.top99;
                        }
                        if (this.top95 != null) {
                            data.top95 = this.top95;
                        }
                        if (this.top75 != null) {
                            data.top75 = this.top75;
                        }
                        if (this.count != null) {
                            data.count = this.count;
                        }
                        if (this.delay1S != null) {
                            data.delay1S = this.delay1S;
                        }
                        if (this.delay2S != null) {
                            data.delay2S = this.delay2S;
                        }
                        if (this.delay3S != null) {
                            data.delay3S = this.delay3S;
                        }
                        return data;
                    }
                    serialize(): Uint8Array;
                    serialize(w: pb_1.BinaryWriter): void;
                    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                        const writer = w || new pb_1.BinaryWriter();
                        if (this.witness.length)
                            writer.writeString(1, this.witness);
                        if (this.top99 != 0)
                            writer.writeInt32(2, this.top99);
                        if (this.top95 != 0)
                            writer.writeInt32(3, this.top95);
                        if (this.top75 != 0)
                            writer.writeInt32(4, this.top75);
                        if (this.count != 0)
                            writer.writeInt32(5, this.count);
                        if (this.delay1S != 0)
                            writer.writeInt32(6, this.delay1S);
                        if (this.delay2S != 0)
                            writer.writeInt32(7, this.delay2S);
                        if (this.delay3S != 0)
                            writer.writeInt32(8, this.delay3S);
                        if (!w)
                            return writer.getResultBuffer();
                    }
                    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LatencyDetailInfo {
                        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LatencyDetailInfo();
                        while (reader.nextField()) {
                            if (reader.isEndGroup())
                                break;
                            switch (reader.getFieldNumber()) {
                                case 1:
                                    message.witness = reader.readString();
                                    break;
                                case 2:
                                    message.top99 = reader.readInt32();
                                    break;
                                case 3:
                                    message.top95 = reader.readInt32();
                                    break;
                                case 4:
                                    message.top75 = reader.readInt32();
                                    break;
                                case 5:
                                    message.count = reader.readInt32();
                                    break;
                                case 6:
                                    message.delay1S = reader.readInt32();
                                    break;
                                case 7:
                                    message.delay2S = reader.readInt32();
                                    break;
                                case 8:
                                    message.delay3S = reader.readInt32();
                                    break;
                                default: reader.skipField();
                            }
                        }
                        return message;
                    }
                    serializeBinary(): Uint8Array {
                        return this.serialize();
                    }
                    static deserializeBinary(bytes: Uint8Array): LatencyDetailInfo {
                        return LatencyDetailInfo.deserialize(bytes);
                    }
                }
            }
        }
    }
    export class PBFTMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            raw_data?: PBFTMessage.Raw;
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("raw_data" in data && data.raw_data != undefined) {
                    this.raw_data = data.raw_data;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get raw_data() {
            return pb_1.Message.getWrapperField(this, PBFTMessage.Raw, 1) as PBFTMessage.Raw;
        }
        set raw_data(value: PBFTMessage.Raw) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_raw_data() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            raw_data?: ReturnType<typeof PBFTMessage.Raw.prototype.toObject>;
            signature?: Uint8Array;
        }): PBFTMessage {
            const message = new PBFTMessage({});
            if (data.raw_data != null) {
                message.raw_data = PBFTMessage.Raw.fromObject(data.raw_data);
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                raw_data?: ReturnType<typeof PBFTMessage.Raw.prototype.toObject>;
                signature?: Uint8Array;
            } = {};
            if (this.raw_data != null) {
                data.raw_data = this.raw_data.toObject();
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_raw_data)
                writer.writeMessage(1, this.raw_data, () => this.raw_data.serialize(writer));
            if (this.signature.length)
                writer.writeBytes(2, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PBFTMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PBFTMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.raw_data, () => message.raw_data = PBFTMessage.Raw.deserialize(reader));
                        break;
                    case 2:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PBFTMessage {
            return PBFTMessage.deserialize(bytes);
        }
    }
    export namespace PBFTMessage {
        export enum MsgType {
            VIEW_CHANGE = 0,
            REQUEST = 1,
            PREPREPARE = 2,
            PREPARE = 3,
            COMMIT = 4
        }
        export enum DataType {
            BLOCK = 0,
            SRL = 1
        }
        export class Raw extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                msg_type?: PBFTMessage.MsgType;
                data_type?: PBFTMessage.DataType;
                view_n?: number;
                epoch?: number;
                data?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("msg_type" in data && data.msg_type != undefined) {
                        this.msg_type = data.msg_type;
                    }
                    if ("data_type" in data && data.data_type != undefined) {
                        this.data_type = data.data_type;
                    }
                    if ("view_n" in data && data.view_n != undefined) {
                        this.view_n = data.view_n;
                    }
                    if ("epoch" in data && data.epoch != undefined) {
                        this.epoch = data.epoch;
                    }
                    if ("data" in data && data.data != undefined) {
                        this.data = data.data;
                    }
                }
            }
            get msg_type() {
                return pb_1.Message.getFieldWithDefault(this, 1, PBFTMessage.MsgType.VIEW_CHANGE) as PBFTMessage.MsgType;
            }
            set msg_type(value: PBFTMessage.MsgType) {
                pb_1.Message.setField(this, 1, value);
            }
            get data_type() {
                return pb_1.Message.getFieldWithDefault(this, 2, PBFTMessage.DataType.BLOCK) as PBFTMessage.DataType;
            }
            set data_type(value: PBFTMessage.DataType) {
                pb_1.Message.setField(this, 2, value);
            }
            get view_n() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set view_n(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get epoch() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set epoch(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get data() {
                return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
            }
            set data(value: Uint8Array) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                msg_type?: PBFTMessage.MsgType;
                data_type?: PBFTMessage.DataType;
                view_n?: number;
                epoch?: number;
                data?: Uint8Array;
            }): Raw {
                const message = new Raw({});
                if (data.msg_type != null) {
                    message.msg_type = data.msg_type;
                }
                if (data.data_type != null) {
                    message.data_type = data.data_type;
                }
                if (data.view_n != null) {
                    message.view_n = data.view_n;
                }
                if (data.epoch != null) {
                    message.epoch = data.epoch;
                }
                if (data.data != null) {
                    message.data = data.data;
                }
                return message;
            }
            toObject() {
                const data: {
                    msg_type?: PBFTMessage.MsgType;
                    data_type?: PBFTMessage.DataType;
                    view_n?: number;
                    epoch?: number;
                    data?: Uint8Array;
                } = {};
                if (this.msg_type != null) {
                    data.msg_type = this.msg_type;
                }
                if (this.data_type != null) {
                    data.data_type = this.data_type;
                }
                if (this.view_n != null) {
                    data.view_n = this.view_n;
                }
                if (this.epoch != null) {
                    data.epoch = this.epoch;
                }
                if (this.data != null) {
                    data.data = this.data;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.msg_type != PBFTMessage.MsgType.VIEW_CHANGE)
                    writer.writeEnum(1, this.msg_type);
                if (this.data_type != PBFTMessage.DataType.BLOCK)
                    writer.writeEnum(2, this.data_type);
                if (this.view_n != 0)
                    writer.writeInt64(3, this.view_n);
                if (this.epoch != 0)
                    writer.writeInt64(4, this.epoch);
                if (this.data.length)
                    writer.writeBytes(5, this.data);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Raw {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Raw();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.msg_type = reader.readEnum();
                            break;
                        case 2:
                            message.data_type = reader.readEnum();
                            break;
                        case 3:
                            message.view_n = reader.readInt64();
                            break;
                        case 4:
                            message.epoch = reader.readInt64();
                            break;
                        case 5:
                            message.data = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Raw {
                return Raw.deserialize(bytes);
            }
        }
    }
    export class PBFTCommitResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
            signature?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set signature(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
            signature?: Uint8Array[];
        }): PBFTCommitResult {
            const message = new PBFTCommitResult({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
                signature?: Uint8Array[];
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (this.signature.length)
                writer.writeRepeatedBytes(2, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PBFTCommitResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PBFTCommitResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PBFTCommitResult {
            return PBFTCommitResult.deserialize(bytes);
        }
    }
    export class SRL extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            srAddress?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("srAddress" in data && data.srAddress != undefined) {
                    this.srAddress = data.srAddress;
                }
            }
        }
        get srAddress() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set srAddress(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            srAddress?: Uint8Array[];
        }): SRL {
            const message = new SRL({});
            if (data.srAddress != null) {
                message.srAddress = data.srAddress;
            }
            return message;
        }
        toObject() {
            const data: {
                srAddress?: Uint8Array[];
            } = {};
            if (this.srAddress != null) {
                data.srAddress = this.srAddress;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.srAddress.length)
                writer.writeRepeatedBytes(1, this.srAddress);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SRL {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SRL();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SRL {
            return SRL.deserialize(bytes);
        }
    }
    export class Any extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type_url?: string;
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type_url" in data && data.type_url != undefined) {
                    this.type_url = data.type_url;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get type_url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type_url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type_url?: string;
            value?: Uint8Array;
        }): Any {
            const message = new Any({});
            if (data.type_url != null) {
                message.type_url = data.type_url;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                type_url?: string;
                value?: Uint8Array;
            } = {};
            if (this.type_url != null) {
                data.type_url = this.type_url;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type_url.length)
                writer.writeString(1, this.type_url);
            if (this.value.length)
                writer.writeBytes(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Any {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Any();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type_url = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Any {
            return Any.deserialize(bytes);
        }
    }
}
